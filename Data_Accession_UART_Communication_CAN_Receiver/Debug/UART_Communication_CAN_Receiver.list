
UART_Communication_CAN_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08008da8  08008da8  00009da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091a0  080091a0  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080091a0  080091a0  0000a1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091a8  080091a8  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091a8  080091a8  0000a1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091ac  080091ac  0000a1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080091b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d8  2**0
                  CONTENTS
 10 .bss          00004224  200001d8  200001d8  0000b1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200043fc  200043fc  0000b1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000163da  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000337d  00000000  00000000  000215e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  00024960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f44  00000000  00000000  00025d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241d5  00000000  00000000  00026c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f80  00000000  00000000  0004ae19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8887  00000000  00000000  0005fd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00138620  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063a0  00000000  00000000  00138664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0013ea04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d8c 	.word	0x08008d8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008d8c 	.word	0x08008d8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <vApplicationGetIdleTaskMemory+0x30>)
 8000eae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2280      	movs	r2, #128	@ 0x80
 8000eb4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	200001f4 	.word	0x200001f4
 8000ec8:	20000294 	.word	0x20000294

08000ecc <send_UART_message>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */
/* UART Message Formatting */
void send_UART_message(CANMessage_t msg) {
 8000ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed0:	b0a8      	sub	sp, #160	@ 0xa0
 8000ed2:	af06      	add	r7, sp, #24
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char uartMessage[120];
	snprintf(uartMessage, sizeof(uartMessage),
			"MQ-135 PPM: %d | ADC: %lu | Temp: %.2f°C | Humidity: %.2f%%\r\n",
			msg.ppm, msg.adcValue, msg.temperature / 100.0,
 8000eda:	88bb      	ldrh	r3, [r7, #4]
	snprintf(uartMessage, sizeof(uartMessage),
 8000edc:	4698      	mov	r8, r3
 8000ede:	68be      	ldr	r6, [r7, #8]
			msg.ppm, msg.adcValue, msg.temperature / 100.0,
 8000ee0:	89bb      	ldrh	r3, [r7, #12]
	snprintf(uartMessage, sizeof(uartMessage),
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fb1e 	bl	8000524 <__aeabi_i2d>
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <send_UART_message+0x84>)
 8000eee:	f7ff fcad 	bl	800084c <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4614      	mov	r4, r2
 8000ef8:	461d      	mov	r5, r3
			msg.humidity / 100.0);
 8000efa:	89fb      	ldrh	r3, [r7, #14]
	snprintf(uartMessage, sizeof(uartMessage),
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fb11 	bl	8000524 <__aeabi_i2d>
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <send_UART_message+0x84>)
 8000f08:	f7ff fca0 	bl	800084c <__aeabi_ddiv>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	f107 0010 	add.w	r0, r7, #16
 8000f14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f18:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8000f1c:	9600      	str	r6, [sp, #0]
 8000f1e:	4643      	mov	r3, r8
 8000f20:	4a0c      	ldr	r2, [pc, #48]	@ (8000f54 <send_UART_message+0x88>)
 8000f22:	2178      	movs	r1, #120	@ 0x78
 8000f24:	f005 fd9a 	bl	8006a5c <sniprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*) uartMessage, strlen(uartMessage),
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff f99f 	bl	8000270 <strlen>
 8000f32:	4603      	mov	r3, r0
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	f107 0110 	add.w	r1, r7, #16
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f3e:	4806      	ldr	r0, [pc, #24]	@ (8000f58 <send_UART_message+0x8c>)
 8000f40:	f002 fd4a 	bl	80039d8 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 8000f44:	bf00      	nop
 8000f46:	3788      	adds	r7, #136	@ 0x88
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f4e:	bf00      	nop
 8000f50:	40590000 	.word	0x40590000
 8000f54:	08008da8 	.word	0x08008da8
 8000f58:	200004bc 	.word	0x200004bc

08000f5c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* CAN Interrupt Callback */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b098      	sub	sp, #96	@ 0x60
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	CANMessage_t msg;

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData)
 8000f64:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f68:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	483a      	ldr	r0, [pc, #232]	@ (8001058 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8000f70:	f000 ff4c 	bl	8001e0c <HAL_CAN_GetRxMessage>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d16a      	bne.n	8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
			== HAL_OK) {
		if (RxHeader.StdId == 0x103 && RxHeader.DLC == 8) {
 8000f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f7c:	f240 1203 	movw	r2, #259	@ 0x103
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d165      	bne.n	8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
 8000f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f86:	2b08      	cmp	r3, #8
 8000f88:	d162      	bne.n	8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
			/* Extract 8-byte CAN data */
			msg.ppm = (RxData[0] << 8) | RxData[1];
 8000f8a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	863b      	strh	r3, [r7, #48]	@ 0x30
			msg.adcValue = (RxData[2] << 24) | (RxData[3] << 16)
 8000fa0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000fa4:	061a      	lsls	r2, r3, #24
 8000fa6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000faa:	041b      	lsls	r3, r3, #16
 8000fac:	431a      	orrs	r2, r3
					| (RxData[4] << 8) | RxData[5];
 8000fae:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8000fba:	4313      	orrs	r3, r2
			msg.adcValue = (RxData[2] << 24) | (RxData[3] << 16)
 8000fbc:	637b      	str	r3, [r7, #52]	@ 0x34
			msg.temperature = (RxData[6] << 8) | RxData[7];
 8000fbe:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	873b      	strh	r3, [r7, #56]	@ 0x38
			msg.humidity = 0; // Humidity is not transmitted, set to 0
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	877b      	strh	r3, [r7, #58]	@ 0x3a

			/* Send message to queue */
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (uxQueueSpacesAvailable(xQueueCAN) > 0) {
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 fbb5 	bl	8004750 <uxQueueSpacesAvailable>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d014      	beq.n	8001016 <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
				xQueueSendFromISR(xQueueCAN, &msg, &xHigherPriorityTaskWoken);
 8000fec:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8000fee:	6818      	ldr	r0, [r3, #0]
 8000ff0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000ff4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f003 fa29 	bl	8004450 <xQueueGenericSendFromISR>
				portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001000:	2b00      	cmp	r3, #0
 8001002:	d025      	beq.n	8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
 8001004:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 8001006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	f3bf 8f4f 	dsb	sy
 8001010:	f3bf 8f6f 	isb	sy
				HAL_UART_Transmit(&huart2, (uint8_t*) errorMsg,
						strlen(errorMsg), HAL_MAX_DELAY);
			}
		}
	}
}
 8001014:	e01c      	b.n	8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14); // Indicate queue overflow
 8001016:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800101a:	4812      	ldr	r0, [pc, #72]	@ (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800101c:	f001 fd05 	bl	8002a2a <HAL_GPIO_TogglePin>
				char errorMsg[] = "Queue Overflow! Data Lost.\r\n";
 8001020:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8001022:	f107 040c 	add.w	r4, r7, #12
 8001026:	461d      	mov	r5, r3
 8001028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001030:	c407      	stmia	r4!, {r0, r1, r2}
 8001032:	7023      	strb	r3, [r4, #0]
						strlen(errorMsg), HAL_MAX_DELAY);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f919 	bl	8000270 <strlen>
 800103e:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) errorMsg,
 8001040:	b29a      	uxth	r2, r3
 8001042:	f107 010c 	add.w	r1, r7, #12
 8001046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800104a:	4808      	ldr	r0, [pc, #32]	@ (800106c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800104c:	f002 fcc4 	bl	80039d8 <HAL_UART_Transmit>
}
 8001050:	bf00      	nop
 8001052:	3760      	adds	r7, #96	@ 0x60
 8001054:	46bd      	mov	sp, r7
 8001056:	bdb0      	pop	{r4, r5, r7, pc}
 8001058:	20000494 	.word	0x20000494
 800105c:	20000504 	.word	0x20000504
 8001060:	e000ed04 	.word	0xe000ed04
 8001064:	40020c00 	.word	0x40020c00
 8001068:	08008de8 	.word	0x08008de8
 800106c:	200004bc 	.word	0x200004bc

08001070 <vCANTask>:

/* CAN Reception Task */
void vCANTask(void *pvParam) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	CANMessage_t receivedMsg;

	while (1) {
		if (xQueueReceive(xQueueCAN, &receivedMsg, portMAX_DELAY) == pdPASS) {
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <vCANTask+0x48>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f107 010c 	add.w	r1, r7, #12
 8001080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001084:	4618      	mov	r0, r3
 8001086:	f003 fa81 	bl	800458c <xQueueReceive>
 800108a:	4603      	mov	r3, r0
 800108c:	2b01      	cmp	r3, #1
 800108e:	d1f3      	bne.n	8001078 <vCANTask+0x8>
			/* Blink LED to indicate successful reception */
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001090:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001094:	4809      	ldr	r0, [pc, #36]	@ (80010bc <vCANTask+0x4c>)
 8001096:	f001 fcc8 	bl	8002a2a <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(50));
 800109a:	2032      	movs	r0, #50	@ 0x32
 800109c:	f003 fe24 	bl	8004ce8 <vTaskDelay>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80010a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a4:	4805      	ldr	r0, [pc, #20]	@ (80010bc <vCANTask+0x4c>)
 80010a6:	f001 fcc0 	bl	8002a2a <HAL_GPIO_TogglePin>

			/* Send Data Over UART */
			send_UART_message(receivedMsg);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010b2:	f7ff ff0b 	bl	8000ecc <send_UART_message>
		if (xQueueReceive(xQueueCAN, &receivedMsg, portMAX_DELAY) == pdPASS) {
 80010b6:	e7df      	b.n	8001078 <vCANTask+0x8>
 80010b8:	20000504 	.word	0x20000504
 80010bc:	40020c00 	.word	0x40020c00

080010c0 <main>:
}
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af02      	add	r7, sp, #8
	HAL_Init();
 80010c6:	f000 fc1b 	bl	8001900 <HAL_Init>
	SystemClock_Config();
 80010ca:	f000 f839 	bl	8001140 <SystemClock_Config>
	MX_GPIO_Init();
 80010ce:	f000 f92b 	bl	8001328 <MX_GPIO_Init>
	MX_CAN1_Init();
 80010d2:	f000 f89f 	bl	8001214 <MX_CAN1_Init>
	MX_USART2_UART_Init();
 80010d6:	f000 f8fd 	bl	80012d4 <MX_USART2_UART_Init>

	/* Start CAN */
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80010da:	4814      	ldr	r0, [pc, #80]	@ (800112c <main+0x6c>)
 80010dc:	f000 fe52 	bl	8001d84 <HAL_CAN_Start>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <main+0x2a>
		Error_Handler();
 80010e6:	f000 f991 	bl	800140c <Error_Handler>
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80010ea:	2102      	movs	r1, #2
 80010ec:	480f      	ldr	r0, [pc, #60]	@ (800112c <main+0x6c>)
 80010ee:	f000 ffaf 	bl	8002050 <HAL_CAN_ActivateNotification>

	/* Create Queue */
	xQueueCAN = xQueueCreate(10, sizeof(CANMessage_t));
 80010f2:	2200      	movs	r2, #0
 80010f4:	210c      	movs	r1, #12
 80010f6:	200a      	movs	r0, #10
 80010f8:	f003 f950 	bl	800439c <xQueueGenericCreate>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001130 <main+0x70>)
 8001100:	6013      	str	r3, [r2, #0]
	if (xQueueCAN == NULL) {
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <main+0x70>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <main+0x4e>
		Error_Handler();
 800110a:	f000 f97f 	bl	800140c <Error_Handler>
	}

	/* Create Task */
	xTaskCreate(vCANTask, "CANTask", configMINIMAL_STACK_SIZE + 256, NULL, 4,
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <main+0x74>)
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	2304      	movs	r3, #4
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2300      	movs	r3, #0
 8001118:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800111c:	4906      	ldr	r1, [pc, #24]	@ (8001138 <main+0x78>)
 800111e:	4807      	ldr	r0, [pc, #28]	@ (800113c <main+0x7c>)
 8001120:	f003 fc92 	bl	8004a48 <xTaskCreate>
			&CANTaskHandle);
	osKernelStart();
 8001124:	f003 f814 	bl	8004150 <osKernelStart>

	while (1) {
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <main+0x68>
 800112c:	20000494 	.word	0x20000494
 8001130:	20000504 	.word	0x20000504
 8001134:	20000508 	.word	0x20000508
 8001138:	08008e08 	.word	0x08008e08
 800113c:	08001071 	.word	0x08001071

08001140 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b094      	sub	sp, #80	@ 0x50
 8001144:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	2230      	movs	r2, #48	@ 0x30
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f005 fcfb 	bl	8006b4a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	4b28      	ldr	r3, [pc, #160]	@ (800120c <SystemClock_Config+0xcc>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	4a27      	ldr	r2, [pc, #156]	@ (800120c <SystemClock_Config+0xcc>)
 800116e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001172:	6413      	str	r3, [r2, #64]	@ 0x40
 8001174:	4b25      	ldr	r3, [pc, #148]	@ (800120c <SystemClock_Config+0xcc>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <SystemClock_Config+0xd0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <SystemClock_Config+0xd0>)
 800118a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <SystemClock_Config+0xd0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119c:	2302      	movs	r3, #2
 800119e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a0:	2301      	movs	r3, #1
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a4:	2310      	movs	r3, #16
 80011a6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a8:	2302      	movs	r3, #2
 80011aa:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80011b0:	2308      	movs	r3, #8
 80011b2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80011b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011b8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011ba:	2304      	movs	r3, #4
 80011bc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80011be:	2307      	movs	r3, #7
 80011c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fc4a 	bl	8002a60 <HAL_RCC_OscConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x96>
		Error_Handler();
 80011d2:	f000 f91b 	bl	800140c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011d6:	230f      	movs	r3, #15
 80011d8:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011da:	2302      	movs	r3, #2
 80011dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011e6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ec:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 feab 	bl	8002f50 <HAL_RCC_ClockConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0xc4>
		Error_Handler();
 8001200:	f000 f904 	bl	800140c <Error_Handler>
	}
}
 8001204:	bf00      	nop
 8001206:	3750      	adds	r7, #80	@ 0x50
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800
 8001210:	40007000 	.word	0x40007000

08001214 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 800121a:	4b2c      	ldr	r3, [pc, #176]	@ (80012cc <MX_CAN1_Init+0xb8>)
 800121c:	4a2c      	ldr	r2, [pc, #176]	@ (80012d0 <MX_CAN1_Init+0xbc>)
 800121e:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 21;
 8001220:	4b2a      	ldr	r3, [pc, #168]	@ (80012cc <MX_CAN1_Init+0xb8>)
 8001222:	2215      	movs	r2, #21
 8001224:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001226:	4b29      	ldr	r3, [pc, #164]	@ (80012cc <MX_CAN1_Init+0xb8>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800122c:	4b27      	ldr	r3, [pc, #156]	@ (80012cc <MX_CAN1_Init+0xb8>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001232:	4b26      	ldr	r3, [pc, #152]	@ (80012cc <MX_CAN1_Init+0xb8>)
 8001234:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001238:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800123a:	4b24      	ldr	r3, [pc, #144]	@ (80012cc <MX_CAN1_Init+0xb8>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001240:	4b22      	ldr	r3, [pc, #136]	@ (80012cc <MX_CAN1_Init+0xb8>)
 8001242:	2200      	movs	r2, #0
 8001244:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001246:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <MX_CAN1_Init+0xb8>)
 8001248:	2200      	movs	r2, #0
 800124a:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800124c:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <MX_CAN1_Init+0xb8>)
 800124e:	2200      	movs	r2, #0
 8001250:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001252:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <MX_CAN1_Init+0xb8>)
 8001254:	2200      	movs	r2, #0
 8001256:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001258:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <MX_CAN1_Init+0xb8>)
 800125a:	2200      	movs	r2, #0
 800125c:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800125e:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <MX_CAN1_Init+0xb8>)
 8001260:	2200      	movs	r2, #0
 8001262:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001264:	4819      	ldr	r0, [pc, #100]	@ (80012cc <MX_CAN1_Init+0xb8>)
 8001266:	f000 fbb1 	bl	80019cc <HAL_CAN_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_CAN1_Init+0x60>
		Error_Handler();
 8001270:	f000 f8cc 	bl	800140c <Error_Handler>
	}

	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x123 << 5;
 8001280:	f242 4360 	movw	r3, #9312	@ 0x2460
 8001284:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x103 << 5;
 800128a:	f242 0360 	movw	r3, #8288	@ 0x2060
 800128e:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001298:	2301      	movs	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14;
 800129c:	230e      	movs	r3, #14
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK) {
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4809      	ldr	r0, [pc, #36]	@ (80012cc <MX_CAN1_Init+0xb8>)
 80012a6:	f000 fc8d 	bl	8001bc4 <HAL_CAN_ConfigFilter>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_CAN1_Init+0xa0>
		Error_Handler();
 80012b0:	f000 f8ac 	bl	800140c <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80012b4:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_CAN1_Init+0xb8>)
 80012b6:	f000 fd65 	bl	8001d84 <HAL_CAN_Start>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_CAN1_Init+0xb0>
		Error_Handler();
 80012c0:	f000 f8a4 	bl	800140c <Error_Handler>
	}
}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	@ 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000494 	.word	0x20000494
 80012d0:	40006400 	.word	0x40006400

080012d4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	@ (8001324 <MX_USART2_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_USART2_UART_Init+0x4c>)
 800130c:	f002 fb14 	bl	8003938 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001316:	f000 f879 	bl	800140c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200004bc 	.word	0x200004bc
 8001324:	40004400 	.word	0x40004400

08001328 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b27      	ldr	r3, [pc, #156]	@ (80013e0 <MX_GPIO_Init+0xb8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a26      	ldr	r2, [pc, #152]	@ (80013e0 <MX_GPIO_Init+0xb8>)
 8001348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b24      	ldr	r3, [pc, #144]	@ (80013e0 <MX_GPIO_Init+0xb8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <MX_GPIO_Init+0xb8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a1f      	ldr	r2, [pc, #124]	@ (80013e0 <MX_GPIO_Init+0xb8>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <MX_GPIO_Init+0xb8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <MX_GPIO_Init+0xb8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a18      	ldr	r2, [pc, #96]	@ (80013e0 <MX_GPIO_Init+0xb8>)
 8001380:	f043 0308 	orr.w	r3, r3, #8
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <MX_GPIO_Init+0xb8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_GPIO_Init+0xb8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <MX_GPIO_Init+0xb8>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_GPIO_Init+0xb8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013b4:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <MX_GPIO_Init+0xbc>)
 80013b6:	f001 fb1f 	bl	80029f8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4804      	ldr	r0, [pc, #16]	@ (80013e4 <MX_GPIO_Init+0xbc>)
 80013d4:	f001 f974 	bl	80026c0 <HAL_GPIO_Init>
}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	@ 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020c00 	.word	0x40020c00

080013e8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80013fa:	f000 faa3 	bl	8001944 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40010000 	.word	0x40010000

0800140c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001410:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <Error_Handler+0x1c>)
 8001416:	f001 fb08 	bl	8002a2a <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800141a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800141e:	f000 fab1 	bl	8001984 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001422:	bf00      	nop
 8001424:	e7f4      	b.n	8001410 <Error_Handler+0x4>
 8001426:	bf00      	nop
 8001428:	40020c00 	.word	0x40020c00

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_MspInit+0x54>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	4a11      	ldr	r2, [pc, #68]	@ (8001480 <HAL_MspInit+0x54>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001440:	6453      	str	r3, [r2, #68]	@ 0x44
 8001442:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <HAL_MspInit+0x54>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <HAL_MspInit+0x54>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <HAL_MspInit+0x54>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	@ 0x40
 800145e:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <HAL_MspInit+0x54>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	210f      	movs	r1, #15
 800146e:	f06f 0001 	mvn.w	r0, #1
 8001472:	f001 f8fb 	bl	800266c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001518 <HAL_CAN_MspInit+0x94>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d134      	bne.n	8001510 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <HAL_CAN_MspInit+0x98>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a1b      	ldr	r2, [pc, #108]	@ (800151c <HAL_CAN_MspInit+0x98>)
 80014b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b19      	ldr	r3, [pc, #100]	@ (800151c <HAL_CAN_MspInit+0x98>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <HAL_CAN_MspInit+0x98>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a14      	ldr	r2, [pc, #80]	@ (800151c <HAL_CAN_MspInit+0x98>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_CAN_MspInit+0x98>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014f0:	2309      	movs	r3, #9
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4809      	ldr	r0, [pc, #36]	@ (8001520 <HAL_CAN_MspInit+0x9c>)
 80014fc:	f001 f8e0 	bl	80026c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2105      	movs	r1, #5
 8001504:	2014      	movs	r0, #20
 8001506:	f001 f8b1 	bl	800266c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800150a:	2014      	movs	r0, #20
 800150c:	f001 f8ca 	bl	80026a4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	@ 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40006400 	.word	0x40006400
 800151c:	40023800 	.word	0x40023800
 8001520:	40020400 	.word	0x40020400

08001524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	@ 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a19      	ldr	r2, [pc, #100]	@ (80015a8 <HAL_UART_MspInit+0x84>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d12b      	bne.n	800159e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <HAL_UART_MspInit+0x88>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <HAL_UART_MspInit+0x88>)
 8001550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001554:	6413      	str	r3, [r2, #64]	@ 0x40
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <HAL_UART_MspInit+0x88>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <HAL_UART_MspInit+0x88>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a10      	ldr	r2, [pc, #64]	@ (80015ac <HAL_UART_MspInit+0x88>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HAL_UART_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800157e:	230c      	movs	r3, #12
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800158e:	2307      	movs	r3, #7
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <HAL_UART_MspInit+0x8c>)
 800159a:	f001 f891 	bl	80026c0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	@ 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40004400 	.word	0x40004400
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000

080015b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	@ 0x30
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <HAL_InitTick+0xd4>)
 80015ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001688 <HAL_InitTick+0xd4>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001688 <HAL_InitTick+0xd4>)
 80015d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015e0:	f107 020c 	add.w	r2, r7, #12
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 fed0 	bl	8003390 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80015f0:	f001 feba 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 80015f4:	4603      	mov	r3, r0
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fc:	4a23      	ldr	r2, [pc, #140]	@ (800168c <HAL_InitTick+0xd8>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0c9b      	lsrs	r3, r3, #18
 8001604:	3b01      	subs	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001608:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <HAL_InitTick+0xdc>)
 800160a:	4a22      	ldr	r2, [pc, #136]	@ (8001694 <HAL_InitTick+0xe0>)
 800160c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800160e:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <HAL_InitTick+0xdc>)
 8001610:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001614:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001616:	4a1e      	ldr	r2, [pc, #120]	@ (8001690 <HAL_InitTick+0xdc>)
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800161c:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <HAL_InitTick+0xdc>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <HAL_InitTick+0xdc>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <HAL_InitTick+0xdc>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800162e:	4818      	ldr	r0, [pc, #96]	@ (8001690 <HAL_InitTick+0xdc>)
 8001630:	f001 fee0 	bl	80033f4 <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800163a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800163e:	2b00      	cmp	r3, #0
 8001640:	d11b      	bne.n	800167a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001642:	4813      	ldr	r0, [pc, #76]	@ (8001690 <HAL_InitTick+0xdc>)
 8001644:	f001 ff30 	bl	80034a8 <HAL_TIM_Base_Start_IT>
 8001648:	4603      	mov	r3, r0
 800164a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800164e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001652:	2b00      	cmp	r3, #0
 8001654:	d111      	bne.n	800167a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001656:	2019      	movs	r0, #25
 8001658:	f001 f824 	bl	80026a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b0f      	cmp	r3, #15
 8001660:	d808      	bhi.n	8001674 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001662:	2200      	movs	r2, #0
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	2019      	movs	r0, #25
 8001668:	f001 f800 	bl	800266c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800166c:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <HAL_InitTick+0xe4>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e002      	b.n	800167a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800167a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800167e:	4618      	mov	r0, r3
 8001680:	3730      	adds	r7, #48	@ 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	431bde83 	.word	0x431bde83
 8001690:	2000050c 	.word	0x2000050c
 8001694:	40010000 	.word	0x40010000
 8001698:	20000004 	.word	0x20000004

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <NMI_Handler+0x4>

080016a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <MemManage_Handler+0x4>

080016b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <CAN1_RX0_IRQHandler+0x10>)
 80016da:	f000 fcdf 	bl	800209c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000494 	.word	0x20000494

080016e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016ee:	f001 ff4b 	bl	8003588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000050c 	.word	0x2000050c

080016fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return 1;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_kill>:

int _kill(int pid, int sig)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001716:	f005 fac1 	bl	8006c9c <__errno>
 800171a:	4603      	mov	r3, r0
 800171c:	2216      	movs	r2, #22
 800171e:	601a      	str	r2, [r3, #0]
  return -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_exit>:

void _exit (int status)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001734:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ffe7 	bl	800170c <_kill>
  while (1) {}    /* Make sure we hang here */
 800173e:	bf00      	nop
 8001740:	e7fd      	b.n	800173e <_exit+0x12>

08001742 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e00a      	b.n	800176a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001754:	f3af 8000 	nop.w
 8001758:	4601      	mov	r1, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	60ba      	str	r2, [r7, #8]
 8001760:	b2ca      	uxtb	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3301      	adds	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	dbf0      	blt.n	8001754 <_read+0x12>
  }

  return len;
 8001772:	687b      	ldr	r3, [r7, #4]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e009      	b.n	80017a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	60ba      	str	r2, [r7, #8]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	dbf1      	blt.n	800178e <_write+0x12>
  }
  return len;
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_close>:

int _close(int file)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017dc:	605a      	str	r2, [r3, #4]
  return 0;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_isatty>:

int _isatty(int file)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	@ (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f005 fa26 	bl	8006c9c <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	@ (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20020000 	.word	0x20020000
 800187c:	00000400 	.word	0x00000400
 8001880:	20000554 	.word	0x20000554
 8001884:	20004400 	.word	0x20004400

08001888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018b0:	f7ff ffea 	bl	8001888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018b6:	490d      	ldr	r1, [pc, #52]	@ (80018ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b8:	4a0d      	ldr	r2, [pc, #52]	@ (80018f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018cc:	4c0a      	ldr	r4, [pc, #40]	@ (80018f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018da:	f005 f9e5 	bl	8006ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7ff fbef 	bl	80010c0 <main>
  bx  lr    
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80018f0:	080091b0 	.word	0x080091b0
  ldr r2, =_sbss
 80018f4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80018f8:	200043fc 	.word	0x200043fc

080018fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001904:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0d      	ldr	r2, [pc, #52]	@ (8001940 <HAL_Init+0x40>)
 800190a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800190e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <HAL_Init+0x40>)
 8001916:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800191a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	@ (8001940 <HAL_Init+0x40>)
 8001922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 fe94 	bl	8002656 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	200f      	movs	r0, #15
 8001930:	f7ff fe40 	bl	80015b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fd7a 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00

08001944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	@ (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008
 8001968:	20000558 	.word	0x20000558

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000558 	.word	0x20000558

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ffee 	bl	800196c <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800199c:	d005      	beq.n	80019aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <HAL_Delay+0x44>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019aa:	bf00      	nop
 80019ac:	f7ff ffde 	bl	800196c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8f7      	bhi.n	80019ac <HAL_Delay+0x28>
  {
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000008 	.word	0x20000008

080019cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0ed      	b.n	8001bba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fd4a 	bl	8001484 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a00:	f7ff ffb4 	bl	800196c <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a06:	e012      	b.n	8001a2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a08:	f7ff ffb0 	bl	800196c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b0a      	cmp	r3, #10
 8001a14:	d90b      	bls.n	8001a2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2205      	movs	r2, #5
 8001a26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0c5      	b.n	8001bba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0e5      	beq.n	8001a08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0202 	bic.w	r2, r2, #2
 8001a4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a4c:	f7ff ff8e 	bl	800196c <HAL_GetTick>
 8001a50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a52:	e012      	b.n	8001a7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a54:	f7ff ff8a 	bl	800196c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b0a      	cmp	r3, #10
 8001a60:	d90b      	bls.n	8001a7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2205      	movs	r2, #5
 8001a72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e09f      	b.n	8001bba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1e5      	bne.n	8001a54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7e1b      	ldrb	r3, [r3, #24]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d108      	bne.n	8001aa2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e007      	b.n	8001ab2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ab0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7e5b      	ldrb	r3, [r3, #25]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d108      	bne.n	8001acc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e007      	b.n	8001adc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ada:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7e9b      	ldrb	r3, [r3, #26]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d108      	bne.n	8001af6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0220 	orr.w	r2, r2, #32
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e007      	b.n	8001b06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0220 	bic.w	r2, r2, #32
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7edb      	ldrb	r3, [r3, #27]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d108      	bne.n	8001b20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0210 	bic.w	r2, r2, #16
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	e007      	b.n	8001b30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0210 	orr.w	r2, r2, #16
 8001b2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7f1b      	ldrb	r3, [r3, #28]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d108      	bne.n	8001b4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0208 	orr.w	r2, r2, #8
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e007      	b.n	8001b5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0208 	bic.w	r2, r2, #8
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7f5b      	ldrb	r3, [r3, #29]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d108      	bne.n	8001b74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0204 	orr.w	r2, r2, #4
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e007      	b.n	8001b84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0204 	bic.w	r2, r2, #4
 8001b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	ea42 0103 	orr.w	r1, r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	1e5a      	subs	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bda:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bdc:	7cfb      	ldrb	r3, [r7, #19]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d003      	beq.n	8001bea <HAL_CAN_ConfigFilter+0x26>
 8001be2:	7cfb      	ldrb	r3, [r7, #19]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	f040 80be 	bne.w	8001d66 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001bea:	4b65      	ldr	r3, [pc, #404]	@ (8001d80 <HAL_CAN_ConfigFilter+0x1bc>)
 8001bec:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c04:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d123      	bne.n	8001c94 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	401a      	ands	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c6e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3248      	adds	r2, #72	@ 0x48
 8001c74:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c88:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c8a:	6979      	ldr	r1, [r7, #20]
 8001c8c:	3348      	adds	r3, #72	@ 0x48
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d122      	bne.n	8001ce2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cbc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3248      	adds	r2, #72	@ 0x48
 8001cc2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cd6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cd8:	6979      	ldr	r1, [r7, #20]
 8001cda:	3348      	adds	r3, #72	@ 0x48
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001cfc:	e007      	b.n	8001d0e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	401a      	ands	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001d28:	e007      	b.n	8001d3a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d107      	bne.n	8001d52 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d58:	f023 0201 	bic.w	r2, r3, #1
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e006      	b.n	8001d74 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
  }
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40006400 	.word	0x40006400

08001d84 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d12e      	bne.n	8001df6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001db0:	f7ff fddc 	bl	800196c <HAL_GetTick>
 8001db4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001db6:	e012      	b.n	8001dde <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001db8:	f7ff fdd8 	bl	800196c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b0a      	cmp	r3, #10
 8001dc4:	d90b      	bls.n	8001dde <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2205      	movs	r2, #5
 8001dd6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e012      	b.n	8001e04 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1e5      	bne.n	8001db8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e006      	b.n	8001e04 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
  }
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e20:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d003      	beq.n	8001e30 <HAL_CAN_GetRxMessage+0x24>
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	f040 8103 	bne.w	8002036 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10e      	bne.n	8001e54 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d116      	bne.n	8001e72 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0f7      	b.n	8002044 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d107      	bne.n	8001e72 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0e8      	b.n	8002044 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	331b      	adds	r3, #27
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	4413      	add	r3, r2
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0204 	and.w	r2, r3, #4
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10c      	bne.n	8001eaa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	331b      	adds	r3, #27
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	4413      	add	r3, r2
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0d5b      	lsrs	r3, r3, #21
 8001ea0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e00b      	b.n	8001ec2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	331b      	adds	r3, #27
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	4413      	add	r3, r2
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	331b      	adds	r3, #27
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	4413      	add	r3, r2
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0202 	and.w	r2, r3, #2
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	331b      	adds	r3, #27
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	e00b      	b.n	8001f10 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	331b      	adds	r3, #27
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	4413      	add	r3, r2
 8001f04:	3304      	adds	r3, #4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 020f 	and.w	r2, r3, #15
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	331b      	adds	r3, #27
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	331b      	adds	r3, #27
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	4413      	add	r3, r2
 8001f34:	3304      	adds	r3, #4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0c1b      	lsrs	r3, r3, #16
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0a1a      	lsrs	r2, r3, #8
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0c1a      	lsrs	r2, r3, #16
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	3302      	adds	r3, #2
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	0e1a      	lsrs	r2, r3, #24
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	3303      	adds	r3, #3
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0a1a      	lsrs	r2, r3, #8
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	3305      	adds	r3, #5
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	0c1a      	lsrs	r2, r3, #16
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	3306      	adds	r3, #6
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e1a      	lsrs	r2, r3, #24
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	3307      	adds	r3, #7
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d108      	bne.n	8002022 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0220 	orr.w	r2, r2, #32
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	e007      	b.n	8002032 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0220 	orr.w	r2, r2, #32
 8002030:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e006      	b.n	8002044 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
  }
}
 8002044:	4618      	mov	r0, r3
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002060:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d002      	beq.n	800206e <HAL_CAN_ActivateNotification+0x1e>
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d109      	bne.n	8002082 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6959      	ldr	r1, [r3, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e006      	b.n	8002090 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
  }
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	@ 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d07c      	beq.n	80021dc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d023      	beq.n	8002134 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2201      	movs	r2, #1
 80020f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f983 	bl	800240a <HAL_CAN_TxMailbox0CompleteCallback>
 8002104:	e016      	b.n	8002134 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d004      	beq.n	800211a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
 8002118:	e00c      	b.n	8002134 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
 800212c:	e002      	b.n	8002134 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f989 	bl	8002446 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d024      	beq.n	8002188 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002146:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f963 	bl	800241e <HAL_CAN_TxMailbox1CompleteCallback>
 8002158:	e016      	b.n	8002188 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24
 800216c:	e00c      	b.n	8002188 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800217e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002180:	e002      	b.n	8002188 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f969 	bl	800245a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d024      	beq.n	80021dc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800219a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f943 	bl	8002432 <HAL_CAN_TxMailbox2CompleteCallback>
 80021ac:	e016      	b.n	80021dc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d004      	beq.n	80021c2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c0:	e00c      	b.n	80021dc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d4:	e002      	b.n	80021dc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f949 	bl	800246e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00c      	beq.n	8002200 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2210      	movs	r2, #16
 80021fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d006      	beq.n	8002222 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2208      	movs	r2, #8
 800221a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f930 	bl	8002482 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d009      	beq.n	8002240 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fe fe8e 	bl	8000f5c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800225a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2210      	movs	r2, #16
 8002262:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d006      	beq.n	8002286 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2208      	movs	r2, #8
 800227e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f912 	bl	80024aa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f8f9 	bl	8002496 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2210      	movs	r2, #16
 80022be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f8fc 	bl	80024be <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00b      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2208      	movs	r2, #8
 80022e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f8f5 	bl	80024d2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d07b      	beq.n	80023ea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d072      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	f043 0302 	orr.w	r3, r3, #2
 8002332:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002356:	2b00      	cmp	r3, #0
 8002358:	d043      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002360:	2b00      	cmp	r3, #0
 8002362:	d03e      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800236a:	2b60      	cmp	r3, #96	@ 0x60
 800236c:	d02b      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x32a>
 800236e:	2b60      	cmp	r3, #96	@ 0x60
 8002370:	d82e      	bhi.n	80023d0 <HAL_CAN_IRQHandler+0x334>
 8002372:	2b50      	cmp	r3, #80	@ 0x50
 8002374:	d022      	beq.n	80023bc <HAL_CAN_IRQHandler+0x320>
 8002376:	2b50      	cmp	r3, #80	@ 0x50
 8002378:	d82a      	bhi.n	80023d0 <HAL_CAN_IRQHandler+0x334>
 800237a:	2b40      	cmp	r3, #64	@ 0x40
 800237c:	d019      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x316>
 800237e:	2b40      	cmp	r3, #64	@ 0x40
 8002380:	d826      	bhi.n	80023d0 <HAL_CAN_IRQHandler+0x334>
 8002382:	2b30      	cmp	r3, #48	@ 0x30
 8002384:	d010      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x30c>
 8002386:	2b30      	cmp	r3, #48	@ 0x30
 8002388:	d822      	bhi.n	80023d0 <HAL_CAN_IRQHandler+0x334>
 800238a:	2b10      	cmp	r3, #16
 800238c:	d002      	beq.n	8002394 <HAL_CAN_IRQHandler+0x2f8>
 800238e:	2b20      	cmp	r3, #32
 8002390:	d005      	beq.n	800239e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002392:	e01d      	b.n	80023d0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	f043 0308 	orr.w	r3, r3, #8
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800239c:	e019      	b.n	80023d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	f043 0310 	orr.w	r3, r3, #16
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023a6:	e014      	b.n	80023d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	f043 0320 	orr.w	r3, r3, #32
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023b0:	e00f      	b.n	80023d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023ba:	e00a      	b.n	80023d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023c4:	e005      	b.n	80023d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023ce:	e000      	b.n	80023d2 <HAL_CAN_IRQHandler+0x336>
            break;
 80023d0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80023e0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2204      	movs	r2, #4
 80023e8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f872 	bl	80024e6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002402:	bf00      	nop
 8002404:	3728      	adds	r7, #40	@ 0x28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800250c:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002518:	4013      	ands	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002524:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800252c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252e:	4a04      	ldr	r2, [pc, #16]	@ (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	60d3      	str	r3, [r2, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002548:	4b04      	ldr	r3, [pc, #16]	@ (800255c <__NVIC_GetPriorityGrouping+0x18>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	f003 0307 	and.w	r3, r3, #7
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	db0b      	blt.n	800258a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	4907      	ldr	r1, [pc, #28]	@ (8002598 <__NVIC_EnableIRQ+0x38>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	2001      	movs	r0, #1
 8002582:	fa00 f202 	lsl.w	r2, r0, r2
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000e100 	.word	0xe000e100

0800259c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	db0a      	blt.n	80025c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	490c      	ldr	r1, [pc, #48]	@ (80025e8 <__NVIC_SetPriority+0x4c>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	0112      	lsls	r2, r2, #4
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	440b      	add	r3, r1
 80025c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c4:	e00a      	b.n	80025dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4908      	ldr	r1, [pc, #32]	@ (80025ec <__NVIC_SetPriority+0x50>)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	3b04      	subs	r3, #4
 80025d4:	0112      	lsls	r2, r2, #4
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	440b      	add	r3, r1
 80025da:	761a      	strb	r2, [r3, #24]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000e100 	.word	0xe000e100
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	@ 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f1c3 0307 	rsb	r3, r3, #7
 800260a:	2b04      	cmp	r3, #4
 800260c:	bf28      	it	cs
 800260e:	2304      	movcs	r3, #4
 8002610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3304      	adds	r3, #4
 8002616:	2b06      	cmp	r3, #6
 8002618:	d902      	bls.n	8002620 <NVIC_EncodePriority+0x30>
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3b03      	subs	r3, #3
 800261e:	e000      	b.n	8002622 <NVIC_EncodePriority+0x32>
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43da      	mvns	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	401a      	ands	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002638:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43d9      	mvns	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	4313      	orrs	r3, r2
         );
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	@ 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ff4c 	bl	80024fc <__NVIC_SetPriorityGrouping>
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800267e:	f7ff ff61 	bl	8002544 <__NVIC_GetPriorityGrouping>
 8002682:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	6978      	ldr	r0, [r7, #20]
 800268a:	f7ff ffb1 	bl	80025f0 <NVIC_EncodePriority>
 800268e:	4602      	mov	r2, r0
 8002690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ff80 	bl	800259c <__NVIC_SetPriority>
}
 800269c:	bf00      	nop
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ff54 	bl	8002560 <__NVIC_EnableIRQ>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	@ 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	e16b      	b.n	80029b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	f040 815a 	bne.w	80029ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d005      	beq.n	8002712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270e:	2b02      	cmp	r3, #2
 8002710:	d130      	bne.n	8002774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	2203      	movs	r2, #3
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002748:	2201      	movs	r2, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 0201 	and.w	r2, r3, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b03      	cmp	r3, #3
 800277e:	d017      	beq.n	80027b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d123      	bne.n	8002804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	08da      	lsrs	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3208      	adds	r2, #8
 80027c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	220f      	movs	r2, #15
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	08da      	lsrs	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3208      	adds	r2, #8
 80027fe:	69b9      	ldr	r1, [r7, #24]
 8002800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0203 	and.w	r2, r3, #3
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80b4 	beq.w	80029ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b60      	ldr	r3, [pc, #384]	@ (80029cc <HAL_GPIO_Init+0x30c>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	4a5f      	ldr	r2, [pc, #380]	@ (80029cc <HAL_GPIO_Init+0x30c>)
 8002850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002854:	6453      	str	r3, [r2, #68]	@ 0x44
 8002856:	4b5d      	ldr	r3, [pc, #372]	@ (80029cc <HAL_GPIO_Init+0x30c>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002862:	4a5b      	ldr	r2, [pc, #364]	@ (80029d0 <HAL_GPIO_Init+0x310>)
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	089b      	lsrs	r3, r3, #2
 8002868:	3302      	adds	r3, #2
 800286a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	220f      	movs	r2, #15
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a52      	ldr	r2, [pc, #328]	@ (80029d4 <HAL_GPIO_Init+0x314>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d02b      	beq.n	80028e6 <HAL_GPIO_Init+0x226>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a51      	ldr	r2, [pc, #324]	@ (80029d8 <HAL_GPIO_Init+0x318>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d025      	beq.n	80028e2 <HAL_GPIO_Init+0x222>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a50      	ldr	r2, [pc, #320]	@ (80029dc <HAL_GPIO_Init+0x31c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01f      	beq.n	80028de <HAL_GPIO_Init+0x21e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4f      	ldr	r2, [pc, #316]	@ (80029e0 <HAL_GPIO_Init+0x320>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d019      	beq.n	80028da <HAL_GPIO_Init+0x21a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4e      	ldr	r2, [pc, #312]	@ (80029e4 <HAL_GPIO_Init+0x324>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_GPIO_Init+0x216>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4d      	ldr	r2, [pc, #308]	@ (80029e8 <HAL_GPIO_Init+0x328>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00d      	beq.n	80028d2 <HAL_GPIO_Init+0x212>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4c      	ldr	r2, [pc, #304]	@ (80029ec <HAL_GPIO_Init+0x32c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <HAL_GPIO_Init+0x20e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4b      	ldr	r2, [pc, #300]	@ (80029f0 <HAL_GPIO_Init+0x330>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_GPIO_Init+0x20a>
 80028c6:	2307      	movs	r3, #7
 80028c8:	e00e      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028ca:	2308      	movs	r3, #8
 80028cc:	e00c      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028ce:	2306      	movs	r3, #6
 80028d0:	e00a      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028d2:	2305      	movs	r3, #5
 80028d4:	e008      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028d6:	2304      	movs	r3, #4
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028da:	2303      	movs	r3, #3
 80028dc:	e004      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028de:	2302      	movs	r3, #2
 80028e0:	e002      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_GPIO_Init+0x228>
 80028e6:	2300      	movs	r3, #0
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f002 0203 	and.w	r2, r2, #3
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	4093      	lsls	r3, r2
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f8:	4935      	ldr	r1, [pc, #212]	@ (80029d0 <HAL_GPIO_Init+0x310>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3302      	adds	r3, #2
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002906:	4b3b      	ldr	r3, [pc, #236]	@ (80029f4 <HAL_GPIO_Init+0x334>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800292a:	4a32      	ldr	r2, [pc, #200]	@ (80029f4 <HAL_GPIO_Init+0x334>)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002930:	4b30      	ldr	r3, [pc, #192]	@ (80029f4 <HAL_GPIO_Init+0x334>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002954:	4a27      	ldr	r2, [pc, #156]	@ (80029f4 <HAL_GPIO_Init+0x334>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800295a:	4b26      	ldr	r3, [pc, #152]	@ (80029f4 <HAL_GPIO_Init+0x334>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800297e:	4a1d      	ldr	r2, [pc, #116]	@ (80029f4 <HAL_GPIO_Init+0x334>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002984:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <HAL_GPIO_Init+0x334>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029a8:	4a12      	ldr	r2, [pc, #72]	@ (80029f4 <HAL_GPIO_Init+0x334>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3301      	adds	r3, #1
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	f67f ae90 	bls.w	80026dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3724      	adds	r7, #36	@ 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40013800 	.word	0x40013800
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40020800 	.word	0x40020800
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40021400 	.word	0x40021400
 80029ec:	40021800 	.word	0x40021800
 80029f0:	40021c00 	.word	0x40021c00
 80029f4:	40013c00 	.word	0x40013c00

080029f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]
 8002a04:	4613      	mov	r3, r2
 8002a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a08:	787b      	ldrb	r3, [r7, #1]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a0e:	887a      	ldrh	r2, [r7, #2]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a14:	e003      	b.n	8002a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a16:	887b      	ldrh	r3, [r7, #2]
 8002a18:	041a      	lsls	r2, r3, #16
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	619a      	str	r2, [r3, #24]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b085      	sub	sp, #20
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a3c:	887a      	ldrh	r2, [r7, #2]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4013      	ands	r3, r2
 8002a42:	041a      	lsls	r2, r3, #16
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43d9      	mvns	r1, r3
 8002a48:	887b      	ldrh	r3, [r7, #2]
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	619a      	str	r2, [r3, #24]
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e267      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d075      	beq.n	8002b6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a7e:	4b88      	ldr	r3, [pc, #544]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d00c      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a8a:	4b85      	ldr	r3, [pc, #532]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d112      	bne.n	8002abc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a96:	4b82      	ldr	r3, [pc, #520]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aa2:	d10b      	bne.n	8002abc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d05b      	beq.n	8002b68 <HAL_RCC_OscConfig+0x108>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d157      	bne.n	8002b68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e242      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac4:	d106      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x74>
 8002ac6:	4b76      	ldr	r3, [pc, #472]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a75      	ldr	r2, [pc, #468]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e01d      	b.n	8002b10 <HAL_RCC_OscConfig+0xb0>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x98>
 8002ade:	4b70      	ldr	r3, [pc, #448]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a6f      	ldr	r2, [pc, #444]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b6d      	ldr	r3, [pc, #436]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6c      	ldr	r2, [pc, #432]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0xb0>
 8002af8:	4b69      	ldr	r3, [pc, #420]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a68      	ldr	r2, [pc, #416]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b66      	ldr	r3, [pc, #408]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a65      	ldr	r2, [pc, #404]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002b0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe ff28 	bl	800196c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe ff24 	bl	800196c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e207      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b5b      	ldr	r3, [pc, #364]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0xc0>
 8002b3e:	e014      	b.n	8002b6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fe ff14 	bl	800196c <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fe ff10 	bl	800196c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	@ 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e1f3      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5a:	4b51      	ldr	r3, [pc, #324]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0xe8>
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d063      	beq.n	8002c3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b82:	4b47      	ldr	r3, [pc, #284]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d11c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8e:	4b44      	ldr	r3, [pc, #272]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d116      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x152>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e1c7      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4937      	ldr	r1, [pc, #220]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc6:	e03a      	b.n	8002c3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d020      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd0:	4b34      	ldr	r3, [pc, #208]	@ (8002ca4 <HAL_RCC_OscConfig+0x244>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fec9 	bl	800196c <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bde:	f7fe fec5 	bl	800196c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e1a8      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfc:	4b28      	ldr	r3, [pc, #160]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4925      	ldr	r1, [pc, #148]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	600b      	str	r3, [r1, #0]
 8002c10:	e015      	b.n	8002c3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c12:	4b24      	ldr	r3, [pc, #144]	@ (8002ca4 <HAL_RCC_OscConfig+0x244>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe fea8 	bl	800196c <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c20:	f7fe fea4 	bl	800196c <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e187      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d036      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d016      	beq.n	8002c80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c52:	4b15      	ldr	r3, [pc, #84]	@ (8002ca8 <HAL_RCC_OscConfig+0x248>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7fe fe88 	bl	800196c <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c60:	f7fe fe84 	bl	800196c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e167      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <HAL_RCC_OscConfig+0x240>)
 8002c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x200>
 8002c7e:	e01b      	b.n	8002cb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c80:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <HAL_RCC_OscConfig+0x248>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c86:	f7fe fe71 	bl	800196c <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8c:	e00e      	b.n	8002cac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8e:	f7fe fe6d 	bl	800196c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d907      	bls.n	8002cac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e150      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	42470000 	.word	0x42470000
 8002ca8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cac:	4b88      	ldr	r3, [pc, #544]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ea      	bne.n	8002c8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8097 	beq.w	8002df4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cca:	4b81      	ldr	r3, [pc, #516]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10f      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	4b7d      	ldr	r3, [pc, #500]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	4a7c      	ldr	r2, [pc, #496]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b77      	ldr	r3, [pc, #476]	@ (8002ed4 <HAL_RCC_OscConfig+0x474>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d118      	bne.n	8002d34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d02:	4b74      	ldr	r3, [pc, #464]	@ (8002ed4 <HAL_RCC_OscConfig+0x474>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a73      	ldr	r2, [pc, #460]	@ (8002ed4 <HAL_RCC_OscConfig+0x474>)
 8002d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0e:	f7fe fe2d 	bl	800196c <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d16:	f7fe fe29 	bl	800196c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e10c      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed4 <HAL_RCC_OscConfig+0x474>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCC_OscConfig+0x2ea>
 8002d3c:	4b64      	ldr	r3, [pc, #400]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d40:	4a63      	ldr	r2, [pc, #396]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d48:	e01c      	b.n	8002d84 <HAL_RCC_OscConfig+0x324>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x30c>
 8002d52:	4b5f      	ldr	r3, [pc, #380]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d56:	4a5e      	ldr	r2, [pc, #376]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002d58:	f043 0304 	orr.w	r3, r3, #4
 8002d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d5e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d62:	4a5b      	ldr	r2, [pc, #364]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0x324>
 8002d6c:	4b58      	ldr	r3, [pc, #352]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d70:	4a57      	ldr	r2, [pc, #348]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d78:	4b55      	ldr	r3, [pc, #340]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7c:	4a54      	ldr	r2, [pc, #336]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002d7e:	f023 0304 	bic.w	r3, r3, #4
 8002d82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d015      	beq.n	8002db8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fe fdee 	bl	800196c <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d94:	f7fe fdea 	bl	800196c <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e0cb      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002daa:	4b49      	ldr	r3, [pc, #292]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0ee      	beq.n	8002d94 <HAL_RCC_OscConfig+0x334>
 8002db6:	e014      	b.n	8002de2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db8:	f7fe fdd8 	bl	800196c <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc0:	f7fe fdd4 	bl	800196c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e0b5      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1ee      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de8:	4b39      	ldr	r3, [pc, #228]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	4a38      	ldr	r2, [pc, #224]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002dee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80a1 	beq.w	8002f40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dfe:	4b34      	ldr	r3, [pc, #208]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d05c      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d141      	bne.n	8002e96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e12:	4b31      	ldr	r3, [pc, #196]	@ (8002ed8 <HAL_RCC_OscConfig+0x478>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7fe fda8 	bl	800196c <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fe fda4 	bl	800196c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e087      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e32:	4b27      	ldr	r3, [pc, #156]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	019b      	lsls	r3, r3, #6
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	3b01      	subs	r3, #1
 8002e58:	041b      	lsls	r3, r3, #16
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e60:	061b      	lsls	r3, r3, #24
 8002e62:	491b      	ldr	r1, [pc, #108]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed8 <HAL_RCC_OscConfig+0x478>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fd7d 	bl	800196c <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe fd79 	bl	800196c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e05c      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e88:	4b11      	ldr	r3, [pc, #68]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x416>
 8002e94:	e054      	b.n	8002f40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e96:	4b10      	ldr	r3, [pc, #64]	@ (8002ed8 <HAL_RCC_OscConfig+0x478>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fd66 	bl	800196c <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7fe fd62 	bl	800196c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e045      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x444>
 8002ec2:	e03d      	b.n	8002f40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d107      	bne.n	8002edc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e038      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002edc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <HAL_RCC_OscConfig+0x4ec>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d028      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d121      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d11a      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d111      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f22:	085b      	lsrs	r3, r3, #1
 8002f24:	3b01      	subs	r3, #1
 8002f26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800

08002f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0cc      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f64:	4b68      	ldr	r3, [pc, #416]	@ (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d90c      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b65      	ldr	r3, [pc, #404]	@ (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b63      	ldr	r3, [pc, #396]	@ (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0b8      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa4:	4b59      	ldr	r3, [pc, #356]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4a58      	ldr	r2, [pc, #352]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fbc:	4b53      	ldr	r3, [pc, #332]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4a52      	ldr	r2, [pc, #328]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc8:	4b50      	ldr	r3, [pc, #320]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	494d      	ldr	r1, [pc, #308]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d044      	beq.n	8003070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b47      	ldr	r3, [pc, #284]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d119      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e07f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d003      	beq.n	800300e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800300a:	2b03      	cmp	r3, #3
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300e:	4b3f      	ldr	r3, [pc, #252]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e06f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301e:	4b3b      	ldr	r3, [pc, #236]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e067      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302e:	4b37      	ldr	r3, [pc, #220]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f023 0203 	bic.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4934      	ldr	r1, [pc, #208]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	4313      	orrs	r3, r2
 800303e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003040:	f7fe fc94 	bl	800196c <HAL_GetTick>
 8003044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	e00a      	b.n	800305e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003048:	f7fe fc90 	bl	800196c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e04f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	4b2b      	ldr	r3, [pc, #172]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 020c 	and.w	r2, r3, #12
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	429a      	cmp	r2, r3
 800306e:	d1eb      	bne.n	8003048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003070:	4b25      	ldr	r3, [pc, #148]	@ (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d20c      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b22      	ldr	r3, [pc, #136]	@ (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b20      	ldr	r3, [pc, #128]	@ (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e032      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a4:	4b19      	ldr	r3, [pc, #100]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4916      	ldr	r1, [pc, #88]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c2:	4b12      	ldr	r3, [pc, #72]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	490e      	ldr	r1, [pc, #56]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030d6:	f000 f821 	bl	800311c <HAL_RCC_GetSysClockFreq>
 80030da:	4602      	mov	r2, r0
 80030dc:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	490a      	ldr	r1, [pc, #40]	@ (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 80030e8:	5ccb      	ldrb	r3, [r1, r3]
 80030ea:	fa22 f303 	lsr.w	r3, r2, r3
 80030ee:	4a09      	ldr	r2, [pc, #36]	@ (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030f2:	4b09      	ldr	r3, [pc, #36]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fa5c 	bl	80015b4 <HAL_InitTick>

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023c00 	.word	0x40023c00
 800310c:	40023800 	.word	0x40023800
 8003110:	08008e18 	.word	0x08008e18
 8003114:	20000000 	.word	0x20000000
 8003118:	20000004 	.word	0x20000004

0800311c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800311c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003120:	b094      	sub	sp, #80	@ 0x50
 8003122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003134:	4b79      	ldr	r3, [pc, #484]	@ (800331c <HAL_RCC_GetSysClockFreq+0x200>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d00d      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x40>
 8003140:	2b08      	cmp	r3, #8
 8003142:	f200 80e1 	bhi.w	8003308 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0x34>
 800314a:	2b04      	cmp	r3, #4
 800314c:	d003      	beq.n	8003156 <HAL_RCC_GetSysClockFreq+0x3a>
 800314e:	e0db      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003150:	4b73      	ldr	r3, [pc, #460]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x204>)
 8003152:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003154:	e0db      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003156:	4b73      	ldr	r3, [pc, #460]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x208>)
 8003158:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800315a:	e0d8      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800315c:	4b6f      	ldr	r3, [pc, #444]	@ (800331c <HAL_RCC_GetSysClockFreq+0x200>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003164:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003166:	4b6d      	ldr	r3, [pc, #436]	@ (800331c <HAL_RCC_GetSysClockFreq+0x200>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d063      	beq.n	800323a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003172:	4b6a      	ldr	r3, [pc, #424]	@ (800331c <HAL_RCC_GetSysClockFreq+0x200>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	099b      	lsrs	r3, r3, #6
 8003178:	2200      	movs	r2, #0
 800317a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800317c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800317e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003184:	633b      	str	r3, [r7, #48]	@ 0x30
 8003186:	2300      	movs	r3, #0
 8003188:	637b      	str	r3, [r7, #52]	@ 0x34
 800318a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800318e:	4622      	mov	r2, r4
 8003190:	462b      	mov	r3, r5
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	0159      	lsls	r1, r3, #5
 800319c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a0:	0150      	lsls	r0, r2, #5
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4621      	mov	r1, r4
 80031a8:	1a51      	subs	r1, r2, r1
 80031aa:	6139      	str	r1, [r7, #16]
 80031ac:	4629      	mov	r1, r5
 80031ae:	eb63 0301 	sbc.w	r3, r3, r1
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031c0:	4659      	mov	r1, fp
 80031c2:	018b      	lsls	r3, r1, #6
 80031c4:	4651      	mov	r1, sl
 80031c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ca:	4651      	mov	r1, sl
 80031cc:	018a      	lsls	r2, r1, #6
 80031ce:	4651      	mov	r1, sl
 80031d0:	ebb2 0801 	subs.w	r8, r2, r1
 80031d4:	4659      	mov	r1, fp
 80031d6:	eb63 0901 	sbc.w	r9, r3, r1
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ee:	4690      	mov	r8, r2
 80031f0:	4699      	mov	r9, r3
 80031f2:	4623      	mov	r3, r4
 80031f4:	eb18 0303 	adds.w	r3, r8, r3
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	462b      	mov	r3, r5
 80031fc:	eb49 0303 	adc.w	r3, r9, r3
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800320e:	4629      	mov	r1, r5
 8003210:	024b      	lsls	r3, r1, #9
 8003212:	4621      	mov	r1, r4
 8003214:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003218:	4621      	mov	r1, r4
 800321a:	024a      	lsls	r2, r1, #9
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003222:	2200      	movs	r2, #0
 8003224:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003226:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800322c:	f7fd fcbc 	bl	8000ba8 <__aeabi_uldivmod>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4613      	mov	r3, r2
 8003236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003238:	e058      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323a:	4b38      	ldr	r3, [pc, #224]	@ (800331c <HAL_RCC_GetSysClockFreq+0x200>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	099b      	lsrs	r3, r3, #6
 8003240:	2200      	movs	r2, #0
 8003242:	4618      	mov	r0, r3
 8003244:	4611      	mov	r1, r2
 8003246:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800324a:	623b      	str	r3, [r7, #32]
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003250:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003254:	4642      	mov	r2, r8
 8003256:	464b      	mov	r3, r9
 8003258:	f04f 0000 	mov.w	r0, #0
 800325c:	f04f 0100 	mov.w	r1, #0
 8003260:	0159      	lsls	r1, r3, #5
 8003262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003266:	0150      	lsls	r0, r2, #5
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4641      	mov	r1, r8
 800326e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003272:	4649      	mov	r1, r9
 8003274:	eb63 0b01 	sbc.w	fp, r3, r1
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003284:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003288:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800328c:	ebb2 040a 	subs.w	r4, r2, sl
 8003290:	eb63 050b 	sbc.w	r5, r3, fp
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	00eb      	lsls	r3, r5, #3
 800329e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032a2:	00e2      	lsls	r2, r4, #3
 80032a4:	4614      	mov	r4, r2
 80032a6:	461d      	mov	r5, r3
 80032a8:	4643      	mov	r3, r8
 80032aa:	18e3      	adds	r3, r4, r3
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	464b      	mov	r3, r9
 80032b0:	eb45 0303 	adc.w	r3, r5, r3
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032c2:	4629      	mov	r1, r5
 80032c4:	028b      	lsls	r3, r1, #10
 80032c6:	4621      	mov	r1, r4
 80032c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032cc:	4621      	mov	r1, r4
 80032ce:	028a      	lsls	r2, r1, #10
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d6:	2200      	movs	r2, #0
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	61fa      	str	r2, [r7, #28]
 80032dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e0:	f7fd fc62 	bl	8000ba8 <__aeabi_uldivmod>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4613      	mov	r3, r2
 80032ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032ec:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <HAL_RCC_GetSysClockFreq+0x200>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	0c1b      	lsrs	r3, r3, #16
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	3301      	adds	r3, #1
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80032fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003306:	e002      	b.n	800330e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003308:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x204>)
 800330a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800330c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800330e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003310:	4618      	mov	r0, r3
 8003312:	3750      	adds	r7, #80	@ 0x50
 8003314:	46bd      	mov	sp, r7
 8003316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800
 8003320:	00f42400 	.word	0x00f42400
 8003324:	007a1200 	.word	0x007a1200

08003328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800332c:	4b03      	ldr	r3, [pc, #12]	@ (800333c <HAL_RCC_GetHCLKFreq+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	20000000 	.word	0x20000000

08003340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003344:	f7ff fff0 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0a9b      	lsrs	r3, r3, #10
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4903      	ldr	r1, [pc, #12]	@ (8003364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40023800 	.word	0x40023800
 8003364:	08008e28 	.word	0x08008e28

08003368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800336c:	f7ff ffdc 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003370:	4602      	mov	r2, r0
 8003372:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	0b5b      	lsrs	r3, r3, #13
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4903      	ldr	r1, [pc, #12]	@ (800338c <HAL_RCC_GetPCLK2Freq+0x24>)
 800337e:	5ccb      	ldrb	r3, [r1, r3]
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40023800 	.word	0x40023800
 800338c:	08008e28 	.word	0x08008e28

08003390 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	220f      	movs	r2, #15
 800339e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033a0:	4b12      	ldr	r3, [pc, #72]	@ (80033ec <HAL_RCC_GetClockConfig+0x5c>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0203 	and.w	r2, r3, #3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033ac:	4b0f      	ldr	r3, [pc, #60]	@ (80033ec <HAL_RCC_GetClockConfig+0x5c>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033b8:	4b0c      	ldr	r3, [pc, #48]	@ (80033ec <HAL_RCC_GetClockConfig+0x5c>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033c4:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <HAL_RCC_GetClockConfig+0x5c>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	08db      	lsrs	r3, r3, #3
 80033ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033d2:	4b07      	ldr	r3, [pc, #28]	@ (80033f0 <HAL_RCC_GetClockConfig+0x60>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0207 	and.w	r2, r3, #7
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	601a      	str	r2, [r3, #0]
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40023c00 	.word	0x40023c00

080033f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e041      	b.n	800348a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f839 	bl	8003492 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3304      	adds	r3, #4
 8003430:	4619      	mov	r1, r3
 8003432:	4610      	mov	r0, r2
 8003434:	f000 f9c0 	bl	80037b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d001      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e04e      	b.n	800355e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a23      	ldr	r2, [pc, #140]	@ (800356c <HAL_TIM_Base_Start_IT+0xc4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d022      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x80>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ea:	d01d      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x80>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003570 <HAL_TIM_Base_Start_IT+0xc8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d018      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x80>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003574 <HAL_TIM_Base_Start_IT+0xcc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x80>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1c      	ldr	r2, [pc, #112]	@ (8003578 <HAL_TIM_Base_Start_IT+0xd0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00e      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x80>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1b      	ldr	r2, [pc, #108]	@ (800357c <HAL_TIM_Base_Start_IT+0xd4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d009      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x80>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a19      	ldr	r2, [pc, #100]	@ (8003580 <HAL_TIM_Base_Start_IT+0xd8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x80>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a18      	ldr	r2, [pc, #96]	@ (8003584 <HAL_TIM_Base_Start_IT+0xdc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d111      	bne.n	800354c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b06      	cmp	r3, #6
 8003538:	d010      	beq.n	800355c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0201 	orr.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354a:	e007      	b.n	800355c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40010000 	.word	0x40010000
 8003570:	40000400 	.word	0x40000400
 8003574:	40000800 	.word	0x40000800
 8003578:	40000c00 	.word	0x40000c00
 800357c:	40010400 	.word	0x40010400
 8003580:	40014000 	.word	0x40014000
 8003584:	40001800 	.word	0x40001800

08003588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d020      	beq.n	80035ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01b      	beq.n	80035ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0202 	mvn.w	r2, #2
 80035bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f8d2 	bl	800377c <HAL_TIM_IC_CaptureCallback>
 80035d8:	e005      	b.n	80035e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8c4 	bl	8003768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f8d5 	bl	8003790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d020      	beq.n	8003638 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d01b      	beq.n	8003638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0204 	mvn.w	r2, #4
 8003608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2202      	movs	r2, #2
 800360e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f8ac 	bl	800377c <HAL_TIM_IC_CaptureCallback>
 8003624:	e005      	b.n	8003632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f89e 	bl	8003768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f8af 	bl	8003790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d020      	beq.n	8003684 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01b      	beq.n	8003684 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0208 	mvn.w	r2, #8
 8003654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2204      	movs	r2, #4
 800365a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f886 	bl	800377c <HAL_TIM_IC_CaptureCallback>
 8003670:	e005      	b.n	800367e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f878 	bl	8003768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f889 	bl	8003790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	d020      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01b      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0210 	mvn.w	r2, #16
 80036a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2208      	movs	r2, #8
 80036a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f860 	bl	800377c <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f852 	bl	8003768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f863 	bl	8003790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00c      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0201 	mvn.w	r2, #1
 80036ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fd fe7a 	bl	80013e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f906 	bl	8003924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00c      	beq.n	800373c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f834 	bl	80037a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0220 	mvn.w	r2, #32
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f8d8 	bl	8003910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a46      	ldr	r2, [pc, #280]	@ (80038e4 <TIM_Base_SetConfig+0x12c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d013      	beq.n	80037f8 <TIM_Base_SetConfig+0x40>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d6:	d00f      	beq.n	80037f8 <TIM_Base_SetConfig+0x40>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a43      	ldr	r2, [pc, #268]	@ (80038e8 <TIM_Base_SetConfig+0x130>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00b      	beq.n	80037f8 <TIM_Base_SetConfig+0x40>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a42      	ldr	r2, [pc, #264]	@ (80038ec <TIM_Base_SetConfig+0x134>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d007      	beq.n	80037f8 <TIM_Base_SetConfig+0x40>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a41      	ldr	r2, [pc, #260]	@ (80038f0 <TIM_Base_SetConfig+0x138>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_Base_SetConfig+0x40>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a40      	ldr	r2, [pc, #256]	@ (80038f4 <TIM_Base_SetConfig+0x13c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d108      	bne.n	800380a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a35      	ldr	r2, [pc, #212]	@ (80038e4 <TIM_Base_SetConfig+0x12c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d02b      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003818:	d027      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a32      	ldr	r2, [pc, #200]	@ (80038e8 <TIM_Base_SetConfig+0x130>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d023      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a31      	ldr	r2, [pc, #196]	@ (80038ec <TIM_Base_SetConfig+0x134>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01f      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a30      	ldr	r2, [pc, #192]	@ (80038f0 <TIM_Base_SetConfig+0x138>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01b      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a2f      	ldr	r2, [pc, #188]	@ (80038f4 <TIM_Base_SetConfig+0x13c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d017      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a2e      	ldr	r2, [pc, #184]	@ (80038f8 <TIM_Base_SetConfig+0x140>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a2d      	ldr	r2, [pc, #180]	@ (80038fc <TIM_Base_SetConfig+0x144>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00f      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a2c      	ldr	r2, [pc, #176]	@ (8003900 <TIM_Base_SetConfig+0x148>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00b      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a2b      	ldr	r2, [pc, #172]	@ (8003904 <TIM_Base_SetConfig+0x14c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d007      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2a      	ldr	r2, [pc, #168]	@ (8003908 <TIM_Base_SetConfig+0x150>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d003      	beq.n	800386a <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a29      	ldr	r2, [pc, #164]	@ (800390c <TIM_Base_SetConfig+0x154>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d108      	bne.n	800387c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a10      	ldr	r2, [pc, #64]	@ (80038e4 <TIM_Base_SetConfig+0x12c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_Base_SetConfig+0xf8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a12      	ldr	r2, [pc, #72]	@ (80038f4 <TIM_Base_SetConfig+0x13c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d103      	bne.n	80038b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d105      	bne.n	80038d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f023 0201 	bic.w	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	611a      	str	r2, [r3, #16]
  }
}
 80038d6:	bf00      	nop
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40010000 	.word	0x40010000
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000800 	.word	0x40000800
 80038f0:	40000c00 	.word	0x40000c00
 80038f4:	40010400 	.word	0x40010400
 80038f8:	40014000 	.word	0x40014000
 80038fc:	40014400 	.word	0x40014400
 8003900:	40014800 	.word	0x40014800
 8003904:	40001800 	.word	0x40001800
 8003908:	40001c00 	.word	0x40001c00
 800390c:	40002000 	.word	0x40002000

08003910 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e042      	b.n	80039d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fde0 	bl	8001524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2224      	movs	r2, #36	@ 0x24
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800397a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f973 	bl	8003c68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	@ 0x28
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	4613      	mov	r3, r2
 80039e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d175      	bne.n	8003ae4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_UART_Transmit+0x2c>
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e06e      	b.n	8003ae6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2221      	movs	r2, #33	@ 0x21
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a16:	f7fd ffa9 	bl	800196c <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	88fa      	ldrh	r2, [r7, #6]
 8003a26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a30:	d108      	bne.n	8003a44 <HAL_UART_Transmit+0x6c>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	e003      	b.n	8003a4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a4c:	e02e      	b.n	8003aac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2200      	movs	r2, #0
 8003a56:	2180      	movs	r1, #128	@ 0x80
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f848 	bl	8003aee <UART_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e03a      	b.n	8003ae6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10b      	bne.n	8003a8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	3302      	adds	r3, #2
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	e007      	b.n	8003a9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	781a      	ldrb	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1cb      	bne.n	8003a4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2200      	movs	r2, #0
 8003abe:	2140      	movs	r1, #64	@ 0x40
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f814 	bl	8003aee <UART_WaitOnFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e006      	b.n	8003ae6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e000      	b.n	8003ae6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
  }
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003afe:	e03b      	b.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b06:	d037      	beq.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b08:	f7fd ff30 	bl	800196c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	6a3a      	ldr	r2, [r7, #32]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e03a      	b.n	8003b98 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d023      	beq.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b80      	cmp	r3, #128	@ 0x80
 8003b34:	d020      	beq.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b40      	cmp	r3, #64	@ 0x40
 8003b3a:	d01d      	beq.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d116      	bne.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f81d 	bl	8003ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2208      	movs	r2, #8
 8003b6a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e00f      	b.n	8003b98 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4013      	ands	r3, r2
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d0b4      	beq.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b095      	sub	sp, #84	@ 0x54
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bc8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e5      	bne.n	8003ba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3314      	adds	r3, #20
 8003be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3314      	adds	r3, #20
 8003bfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e5      	bne.n	8003bdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d119      	bne.n	8003c4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f023 0310 	bic.w	r3, r3, #16
 8003c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c38:	61ba      	str	r2, [r7, #24]
 8003c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6979      	ldr	r1, [r7, #20]
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	613b      	str	r3, [r7, #16]
   return(result);
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e5      	bne.n	8003c18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c5a:	bf00      	nop
 8003c5c:	3754      	adds	r7, #84	@ 0x54
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c6c:	b0c0      	sub	sp, #256	@ 0x100
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c84:	68d9      	ldr	r1, [r3, #12]
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	ea40 0301 	orr.w	r3, r0, r1
 8003c90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cc0:	f021 010c 	bic.w	r1, r1, #12
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cce:	430b      	orrs	r3, r1
 8003cd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce2:	6999      	ldr	r1, [r3, #24]
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	ea40 0301 	orr.w	r3, r0, r1
 8003cee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4b8f      	ldr	r3, [pc, #572]	@ (8003f34 <UART_SetConfig+0x2cc>)
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d005      	beq.n	8003d08 <UART_SetConfig+0xa0>
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	4b8d      	ldr	r3, [pc, #564]	@ (8003f38 <UART_SetConfig+0x2d0>)
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d104      	bne.n	8003d12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d08:	f7ff fb2e 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8003d0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d10:	e003      	b.n	8003d1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d12:	f7ff fb15 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8003d16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d24:	f040 810c 	bne.w	8003f40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	462b      	mov	r3, r5
 8003d3e:	1891      	adds	r1, r2, r2
 8003d40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d42:	415b      	adcs	r3, r3
 8003d44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	eb12 0801 	adds.w	r8, r2, r1
 8003d50:	4629      	mov	r1, r5
 8003d52:	eb43 0901 	adc.w	r9, r3, r1
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d6a:	4690      	mov	r8, r2
 8003d6c:	4699      	mov	r9, r3
 8003d6e:	4623      	mov	r3, r4
 8003d70:	eb18 0303 	adds.w	r3, r8, r3
 8003d74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d78:	462b      	mov	r3, r5
 8003d7a:	eb49 0303 	adc.w	r3, r9, r3
 8003d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d96:	460b      	mov	r3, r1
 8003d98:	18db      	adds	r3, r3, r3
 8003d9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	eb42 0303 	adc.w	r3, r2, r3
 8003da2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003da4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003da8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003dac:	f7fc fefc 	bl	8000ba8 <__aeabi_uldivmod>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4b61      	ldr	r3, [pc, #388]	@ (8003f3c <UART_SetConfig+0x2d4>)
 8003db6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	011c      	lsls	r4, r3, #4
 8003dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dc8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003dcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003dd0:	4642      	mov	r2, r8
 8003dd2:	464b      	mov	r3, r9
 8003dd4:	1891      	adds	r1, r2, r2
 8003dd6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003dd8:	415b      	adcs	r3, r3
 8003dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ddc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003de0:	4641      	mov	r1, r8
 8003de2:	eb12 0a01 	adds.w	sl, r2, r1
 8003de6:	4649      	mov	r1, r9
 8003de8:	eb43 0b01 	adc.w	fp, r3, r1
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003df8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e00:	4692      	mov	sl, r2
 8003e02:	469b      	mov	fp, r3
 8003e04:	4643      	mov	r3, r8
 8003e06:	eb1a 0303 	adds.w	r3, sl, r3
 8003e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e0e:	464b      	mov	r3, r9
 8003e10:	eb4b 0303 	adc.w	r3, fp, r3
 8003e14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	18db      	adds	r3, r3, r3
 8003e30:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e32:	4613      	mov	r3, r2
 8003e34:	eb42 0303 	adc.w	r3, r2, r3
 8003e38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e42:	f7fc feb1 	bl	8000ba8 <__aeabi_uldivmod>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f3c <UART_SetConfig+0x2d4>)
 8003e4e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	2264      	movs	r2, #100	@ 0x64
 8003e56:	fb02 f303 	mul.w	r3, r2, r3
 8003e5a:	1acb      	subs	r3, r1, r3
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e62:	4b36      	ldr	r3, [pc, #216]	@ (8003f3c <UART_SetConfig+0x2d4>)
 8003e64:	fba3 2302 	umull	r2, r3, r3, r2
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e70:	441c      	add	r4, r3
 8003e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e84:	4642      	mov	r2, r8
 8003e86:	464b      	mov	r3, r9
 8003e88:	1891      	adds	r1, r2, r2
 8003e8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e8c:	415b      	adcs	r3, r3
 8003e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e94:	4641      	mov	r1, r8
 8003e96:	1851      	adds	r1, r2, r1
 8003e98:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	414b      	adcs	r3, r1
 8003e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003eac:	4659      	mov	r1, fp
 8003eae:	00cb      	lsls	r3, r1, #3
 8003eb0:	4651      	mov	r1, sl
 8003eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb6:	4651      	mov	r1, sl
 8003eb8:	00ca      	lsls	r2, r1, #3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	189b      	adds	r3, r3, r2
 8003ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ec8:	464b      	mov	r3, r9
 8003eca:	460a      	mov	r2, r1
 8003ecc:	eb42 0303 	adc.w	r3, r2, r3
 8003ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ee0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ee4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ee8:	460b      	mov	r3, r1
 8003eea:	18db      	adds	r3, r3, r3
 8003eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eee:	4613      	mov	r3, r2
 8003ef0:	eb42 0303 	adc.w	r3, r2, r3
 8003ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ef6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003efa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003efe:	f7fc fe53 	bl	8000ba8 <__aeabi_uldivmod>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <UART_SetConfig+0x2d4>)
 8003f08:	fba3 1302 	umull	r1, r3, r3, r2
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	2164      	movs	r1, #100	@ 0x64
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	3332      	adds	r3, #50	@ 0x32
 8003f1a:	4a08      	ldr	r2, [pc, #32]	@ (8003f3c <UART_SetConfig+0x2d4>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	f003 0207 	and.w	r2, r3, #7
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4422      	add	r2, r4
 8003f2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f30:	e106      	b.n	8004140 <UART_SetConfig+0x4d8>
 8003f32:	bf00      	nop
 8003f34:	40011000 	.word	0x40011000
 8003f38:	40011400 	.word	0x40011400
 8003f3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f44:	2200      	movs	r2, #0
 8003f46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f52:	4642      	mov	r2, r8
 8003f54:	464b      	mov	r3, r9
 8003f56:	1891      	adds	r1, r2, r2
 8003f58:	6239      	str	r1, [r7, #32]
 8003f5a:	415b      	adcs	r3, r3
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f62:	4641      	mov	r1, r8
 8003f64:	1854      	adds	r4, r2, r1
 8003f66:	4649      	mov	r1, r9
 8003f68:	eb43 0501 	adc.w	r5, r3, r1
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	00eb      	lsls	r3, r5, #3
 8003f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f7a:	00e2      	lsls	r2, r4, #3
 8003f7c:	4614      	mov	r4, r2
 8003f7e:	461d      	mov	r5, r3
 8003f80:	4643      	mov	r3, r8
 8003f82:	18e3      	adds	r3, r4, r3
 8003f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f88:	464b      	mov	r3, r9
 8003f8a:	eb45 0303 	adc.w	r3, r5, r3
 8003f8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fae:	4629      	mov	r1, r5
 8003fb0:	008b      	lsls	r3, r1, #2
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fb8:	4621      	mov	r1, r4
 8003fba:	008a      	lsls	r2, r1, #2
 8003fbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003fc0:	f7fc fdf2 	bl	8000ba8 <__aeabi_uldivmod>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4b60      	ldr	r3, [pc, #384]	@ (800414c <UART_SetConfig+0x4e4>)
 8003fca:	fba3 2302 	umull	r2, r3, r3, r2
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	011c      	lsls	r4, r3, #4
 8003fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fe0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	1891      	adds	r1, r2, r2
 8003fea:	61b9      	str	r1, [r7, #24]
 8003fec:	415b      	adcs	r3, r3
 8003fee:	61fb      	str	r3, [r7, #28]
 8003ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	1851      	adds	r1, r2, r1
 8003ff8:	6139      	str	r1, [r7, #16]
 8003ffa:	4649      	mov	r1, r9
 8003ffc:	414b      	adcs	r3, r1
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800400c:	4659      	mov	r1, fp
 800400e:	00cb      	lsls	r3, r1, #3
 8004010:	4651      	mov	r1, sl
 8004012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004016:	4651      	mov	r1, sl
 8004018:	00ca      	lsls	r2, r1, #3
 800401a:	4610      	mov	r0, r2
 800401c:	4619      	mov	r1, r3
 800401e:	4603      	mov	r3, r0
 8004020:	4642      	mov	r2, r8
 8004022:	189b      	adds	r3, r3, r2
 8004024:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004028:	464b      	mov	r3, r9
 800402a:	460a      	mov	r2, r1
 800402c:	eb42 0303 	adc.w	r3, r2, r3
 8004030:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800403e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800404c:	4649      	mov	r1, r9
 800404e:	008b      	lsls	r3, r1, #2
 8004050:	4641      	mov	r1, r8
 8004052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004056:	4641      	mov	r1, r8
 8004058:	008a      	lsls	r2, r1, #2
 800405a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800405e:	f7fc fda3 	bl	8000ba8 <__aeabi_uldivmod>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4611      	mov	r1, r2
 8004068:	4b38      	ldr	r3, [pc, #224]	@ (800414c <UART_SetConfig+0x4e4>)
 800406a:	fba3 2301 	umull	r2, r3, r3, r1
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	2264      	movs	r2, #100	@ 0x64
 8004072:	fb02 f303 	mul.w	r3, r2, r3
 8004076:	1acb      	subs	r3, r1, r3
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	3332      	adds	r3, #50	@ 0x32
 800407c:	4a33      	ldr	r2, [pc, #204]	@ (800414c <UART_SetConfig+0x4e4>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004088:	441c      	add	r4, r3
 800408a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800408e:	2200      	movs	r2, #0
 8004090:	673b      	str	r3, [r7, #112]	@ 0x70
 8004092:	677a      	str	r2, [r7, #116]	@ 0x74
 8004094:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004098:	4642      	mov	r2, r8
 800409a:	464b      	mov	r3, r9
 800409c:	1891      	adds	r1, r2, r2
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	415b      	adcs	r3, r3
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040a8:	4641      	mov	r1, r8
 80040aa:	1851      	adds	r1, r2, r1
 80040ac:	6039      	str	r1, [r7, #0]
 80040ae:	4649      	mov	r1, r9
 80040b0:	414b      	adcs	r3, r1
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040c0:	4659      	mov	r1, fp
 80040c2:	00cb      	lsls	r3, r1, #3
 80040c4:	4651      	mov	r1, sl
 80040c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ca:	4651      	mov	r1, sl
 80040cc:	00ca      	lsls	r2, r1, #3
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	4603      	mov	r3, r0
 80040d4:	4642      	mov	r2, r8
 80040d6:	189b      	adds	r3, r3, r2
 80040d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040da:	464b      	mov	r3, r9
 80040dc:	460a      	mov	r2, r1
 80040de:	eb42 0303 	adc.w	r3, r2, r3
 80040e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80040ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80040fc:	4649      	mov	r1, r9
 80040fe:	008b      	lsls	r3, r1, #2
 8004100:	4641      	mov	r1, r8
 8004102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004106:	4641      	mov	r1, r8
 8004108:	008a      	lsls	r2, r1, #2
 800410a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800410e:	f7fc fd4b 	bl	8000ba8 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4b0d      	ldr	r3, [pc, #52]	@ (800414c <UART_SetConfig+0x4e4>)
 8004118:	fba3 1302 	umull	r1, r3, r3, r2
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	2164      	movs	r1, #100	@ 0x64
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	3332      	adds	r3, #50	@ 0x32
 800412a:	4a08      	ldr	r2, [pc, #32]	@ (800414c <UART_SetConfig+0x4e4>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	f003 020f 	and.w	r2, r3, #15
 8004136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4422      	add	r2, r4
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004146:	46bd      	mov	sp, r7
 8004148:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414c:	51eb851f 	.word	0x51eb851f

08004150 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004154:	f000 fdfe 	bl	8004d54 <vTaskStartScheduler>
  
  return osOK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	bd80      	pop	{r7, pc}

0800415e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f103 0208 	add.w	r2, r3, #8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004176:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f103 0208 	add.w	r2, r3, #8
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f103 0208 	add.w	r2, r3, #8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	601a      	str	r2, [r3, #0]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004216:	d103      	bne.n	8004220 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	e00c      	b.n	800423a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3308      	adds	r3, #8
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	e002      	b.n	800422e <vListInsert+0x2e>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	429a      	cmp	r2, r3
 8004238:	d2f6      	bcs.n	8004228 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	601a      	str	r2, [r3, #0]
}
 8004266:	bf00      	nop
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6892      	ldr	r2, [r2, #8]
 8004288:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6852      	ldr	r2, [r2, #4]
 8004292:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	429a      	cmp	r2, r3
 800429c:	d103      	bne.n	80042a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	1e5a      	subs	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10b      	bne.n	80042f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
 80042f2:	e7fd      	b.n	80042f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80042f4:	f001 fb88 	bl	8005a08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004300:	68f9      	ldr	r1, [r7, #12]
 8004302:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	441a      	add	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004324:	3b01      	subs	r3, #1
 8004326:	68f9      	ldr	r1, [r7, #12]
 8004328:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800432a:	fb01 f303 	mul.w	r3, r1, r3
 800432e:	441a      	add	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	22ff      	movs	r2, #255	@ 0xff
 8004338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	22ff      	movs	r2, #255	@ 0xff
 8004340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d114      	bne.n	8004374 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01a      	beq.n	8004388 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3310      	adds	r3, #16
 8004356:	4618      	mov	r0, r3
 8004358:	f000 ff56 	bl	8005208 <xTaskRemoveFromEventList>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d012      	beq.n	8004388 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004362:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <xQueueGenericReset+0xd0>)
 8004364:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	e009      	b.n	8004388 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3310      	adds	r3, #16
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fef0 	bl	800415e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3324      	adds	r3, #36	@ 0x24
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff feeb 	bl	800415e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004388:	f001 fb70 	bl	8005a6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800438c:	2301      	movs	r3, #1
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	e000ed04 	.word	0xe000ed04

0800439c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	@ 0x28
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	4613      	mov	r3, r2
 80043a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <xQueueGenericCreate+0x2c>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	613b      	str	r3, [r7, #16]
}
 80043c2:	bf00      	nop
 80043c4:	bf00      	nop
 80043c6:	e7fd      	b.n	80043c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	fb02 f303 	mul.w	r3, r2, r3
 80043d0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3348      	adds	r3, #72	@ 0x48
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 fc38 	bl	8005c4c <pvPortMalloc>
 80043dc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d011      	beq.n	8004408 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	3348      	adds	r3, #72	@ 0x48
 80043ec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043f6:	79fa      	ldrb	r2, [r7, #7]
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f805 	bl	8004412 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004408:	69bb      	ldr	r3, [r7, #24]
	}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	607a      	str	r2, [r7, #4]
 800441e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	e002      	b.n	8004434 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004440:	2101      	movs	r1, #1
 8004442:	69b8      	ldr	r0, [r7, #24]
 8004444:	f7ff ff40 	bl	80042c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b090      	sub	sp, #64	@ 0x40
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10b      	bne.n	8004480 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d103      	bne.n	800448e <xQueueGenericSendFromISR+0x3e>
 8004486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <xQueueGenericSendFromISR+0x42>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <xQueueGenericSendFromISR+0x44>
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10b      	bne.n	80044b0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80044aa:	bf00      	nop
 80044ac:	bf00      	nop
 80044ae:	e7fd      	b.n	80044ac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d103      	bne.n	80044be <xQueueGenericSendFromISR+0x6e>
 80044b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <xQueueGenericSendFromISR+0x72>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <xQueueGenericSendFromISR+0x74>
 80044c2:	2300      	movs	r3, #0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	623b      	str	r3, [r7, #32]
}
 80044da:	bf00      	nop
 80044dc:	bf00      	nop
 80044de:	e7fd      	b.n	80044dc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044e0:	f001 fb72 	bl	8005bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044e4:	f3ef 8211 	mrs	r2, BASEPRI
 80044e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	61fa      	str	r2, [r7, #28]
 80044fa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044fe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004502:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004508:	429a      	cmp	r2, r3
 800450a:	d302      	bcc.n	8004512 <xQueueGenericSendFromISR+0xc2>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d12f      	bne.n	8004572 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004514:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004518:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800451c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004520:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004528:	f000 f936 	bl	8004798 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800452c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004534:	d112      	bne.n	800455c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	2b00      	cmp	r3, #0
 800453c:	d016      	beq.n	800456c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800453e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004540:	3324      	adds	r3, #36	@ 0x24
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fe60 	bl	8005208 <xTaskRemoveFromEventList>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00e      	beq.n	800456c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00b      	beq.n	800456c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e007      	b.n	800456c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800455c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004560:	3301      	adds	r3, #1
 8004562:	b2db      	uxtb	r3, r3
 8004564:	b25a      	sxtb	r2, r3
 8004566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800456c:	2301      	movs	r3, #1
 800456e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004570:	e001      	b.n	8004576 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004572:	2300      	movs	r3, #0
 8004574:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004578:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004580:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004584:	4618      	mov	r0, r3
 8004586:	3740      	adds	r7, #64	@ 0x40
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08c      	sub	sp, #48	@ 0x30
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004598:	2300      	movs	r3, #0
 800459a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10b      	bne.n	80045be <xQueueReceive+0x32>
	__asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	623b      	str	r3, [r7, #32]
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	e7fd      	b.n	80045ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d103      	bne.n	80045cc <xQueueReceive+0x40>
 80045c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <xQueueReceive+0x44>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <xQueueReceive+0x46>
 80045d0:	2300      	movs	r3, #0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10b      	bne.n	80045ee <xQueueReceive+0x62>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	61fb      	str	r3, [r7, #28]
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	e7fd      	b.n	80045ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045ee:	f000 ffd1 	bl	8005594 <xTaskGetSchedulerState>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <xQueueReceive+0x72>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <xQueueReceive+0x76>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <xQueueReceive+0x78>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <xQueueReceive+0x94>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	61bb      	str	r3, [r7, #24]
}
 800461a:	bf00      	nop
 800461c:	bf00      	nop
 800461e:	e7fd      	b.n	800461c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004620:	f001 f9f2 	bl	8005a08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004628:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01f      	beq.n	8004670 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004634:	f000 f91a 	bl	800486c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	1e5a      	subs	r2, r3, #1
 800463c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00f      	beq.n	8004668 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464a:	3310      	adds	r3, #16
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fddb 	bl	8005208 <xTaskRemoveFromEventList>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004658:	4b3c      	ldr	r3, [pc, #240]	@ (800474c <xQueueReceive+0x1c0>)
 800465a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004668:	f001 fa00 	bl	8005a6c <vPortExitCritical>
				return pdPASS;
 800466c:	2301      	movs	r3, #1
 800466e:	e069      	b.n	8004744 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d103      	bne.n	800467e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004676:	f001 f9f9 	bl	8005a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800467a:	2300      	movs	r3, #0
 800467c:	e062      	b.n	8004744 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800467e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d106      	bne.n	8004692 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004684:	f107 0310 	add.w	r3, r7, #16
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fe21 	bl	80052d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800468e:	2301      	movs	r3, #1
 8004690:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004692:	f001 f9eb 	bl	8005a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004696:	f000 fbc7 	bl	8004e28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800469a:	f001 f9b5 	bl	8005a08 <vPortEnterCritical>
 800469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046a4:	b25b      	sxtb	r3, r3
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046aa:	d103      	bne.n	80046b4 <xQueueReceive+0x128>
 80046ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046ba:	b25b      	sxtb	r3, r3
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046c0:	d103      	bne.n	80046ca <xQueueReceive+0x13e>
 80046c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046ca:	f001 f9cf 	bl	8005a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046ce:	1d3a      	adds	r2, r7, #4
 80046d0:	f107 0310 	add.w	r3, r7, #16
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fe10 	bl	80052fc <xTaskCheckForTimeOut>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d123      	bne.n	800472a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046e4:	f000 f93a 	bl	800495c <prvIsQueueEmpty>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d017      	beq.n	800471e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	3324      	adds	r3, #36	@ 0x24
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4611      	mov	r1, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fd60 	bl	80051bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046fe:	f000 f8db 	bl	80048b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004702:	f000 fb9f 	bl	8004e44 <xTaskResumeAll>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d189      	bne.n	8004620 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800470c:	4b0f      	ldr	r3, [pc, #60]	@ (800474c <xQueueReceive+0x1c0>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	e780      	b.n	8004620 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800471e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004720:	f000 f8ca 	bl	80048b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004724:	f000 fb8e 	bl	8004e44 <xTaskResumeAll>
 8004728:	e77a      	b.n	8004620 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800472a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800472c:	f000 f8c4 	bl	80048b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004730:	f000 fb88 	bl	8004e44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004734:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004736:	f000 f911 	bl	800495c <prvIsQueueEmpty>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	f43f af6f 	beq.w	8004620 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004742:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004744:	4618      	mov	r0, r3
 8004746:	3730      	adds	r7, #48	@ 0x30
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10b      	bne.n	800477a <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	60fb      	str	r3, [r7, #12]
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	e7fd      	b.n	8004776 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800477a:	f001 f945 	bl	8005a08 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800478a:	f001 f96f 	bl	8005a6c <vPortExitCritical>

	return uxReturn;
 800478e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10d      	bne.n	80047d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d14d      	bne.n	800485a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 ff04 	bl	80055d0 <xTaskPriorityDisinherit>
 80047c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	609a      	str	r2, [r3, #8]
 80047d0:	e043      	b.n	800485a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d119      	bne.n	800480c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6858      	ldr	r0, [r3, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e0:	461a      	mov	r2, r3
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	f002 fa87 	bl	8006cf6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	441a      	add	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d32b      	bcc.n	800485a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	e026      	b.n	800485a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68d8      	ldr	r0, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	461a      	mov	r2, r3
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	f002 fa6d 	bl	8006cf6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004824:	425b      	negs	r3, r3
 8004826:	441a      	add	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d207      	bcs.n	8004848 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	425b      	negs	r3, r3
 8004842:	441a      	add	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d105      	bne.n	800485a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	3b01      	subs	r3, #1
 8004858:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004862:	697b      	ldr	r3, [r7, #20]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d018      	beq.n	80048b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	441a      	add	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	429a      	cmp	r2, r3
 8004896:	d303      	bcc.n	80048a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68d9      	ldr	r1, [r3, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a8:	461a      	mov	r2, r3
 80048aa:	6838      	ldr	r0, [r7, #0]
 80048ac:	f002 fa23 	bl	8006cf6 <memcpy>
	}
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048c0:	f001 f8a2 	bl	8005a08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048cc:	e011      	b.n	80048f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d012      	beq.n	80048fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3324      	adds	r3, #36	@ 0x24
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fc94 	bl	8005208 <xTaskRemoveFromEventList>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048e6:	f000 fd6d 	bl	80053c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	dce9      	bgt.n	80048ce <prvUnlockQueue+0x16>
 80048fa:	e000      	b.n	80048fe <prvUnlockQueue+0x46>
					break;
 80048fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	22ff      	movs	r2, #255	@ 0xff
 8004902:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004906:	f001 f8b1 	bl	8005a6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800490a:	f001 f87d 	bl	8005a08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004914:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004916:	e011      	b.n	800493c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d012      	beq.n	8004946 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3310      	adds	r3, #16
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fc6f 	bl	8005208 <xTaskRemoveFromEventList>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004930:	f000 fd48 	bl	80053c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004934:	7bbb      	ldrb	r3, [r7, #14]
 8004936:	3b01      	subs	r3, #1
 8004938:	b2db      	uxtb	r3, r3
 800493a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800493c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004940:	2b00      	cmp	r3, #0
 8004942:	dce9      	bgt.n	8004918 <prvUnlockQueue+0x60>
 8004944:	e000      	b.n	8004948 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004946:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	22ff      	movs	r2, #255	@ 0xff
 800494c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004950:	f001 f88c 	bl	8005a6c <vPortExitCritical>
}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004964:	f001 f850 	bl	8005a08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496c:	2b00      	cmp	r3, #0
 800496e:	d102      	bne.n	8004976 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	e001      	b.n	800497a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800497a:	f001 f877 	bl	8005a6c <vPortExitCritical>

	return xReturn;
 800497e:	68fb      	ldr	r3, [r7, #12]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08e      	sub	sp, #56	@ 0x38
 800498c:	af04      	add	r7, sp, #16
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10b      	bne.n	80049b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	623b      	str	r3, [r7, #32]
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	e7fd      	b.n	80049b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10b      	bne.n	80049d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	61fb      	str	r3, [r7, #28]
}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	e7fd      	b.n	80049ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049d2:	23a0      	movs	r3, #160	@ 0xa0
 80049d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80049da:	d00b      	beq.n	80049f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	61bb      	str	r3, [r7, #24]
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	e7fd      	b.n	80049f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01e      	beq.n	8004a3a <xTaskCreateStatic+0xb2>
 80049fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d01b      	beq.n	8004a3a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a0a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a14:	2300      	movs	r3, #0
 8004a16:	9303      	str	r3, [sp, #12]
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	9302      	str	r3, [sp, #8]
 8004a1c:	f107 0314 	add.w	r3, r7, #20
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f851 	bl	8004ad4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a34:	f000 f8ee 	bl	8004c14 <prvAddNewTaskToReadyList>
 8004a38:	e001      	b.n	8004a3e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a3e:	697b      	ldr	r3, [r7, #20]
	}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3728      	adds	r7, #40	@ 0x28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08c      	sub	sp, #48	@ 0x30
 8004a4c:	af04      	add	r7, sp, #16
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a58:	88fb      	ldrh	r3, [r7, #6]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f001 f8f5 	bl	8005c4c <pvPortMalloc>
 8004a62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00e      	beq.n	8004a88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a6a:	20a0      	movs	r0, #160	@ 0xa0
 8004a6c:	f001 f8ee 	bl	8005c4c <pvPortMalloc>
 8004a70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a7e:	e005      	b.n	8004a8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a80:	6978      	ldr	r0, [r7, #20]
 8004a82:	f001 f9b1 	bl	8005de8 <vPortFree>
 8004a86:	e001      	b.n	8004a8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d017      	beq.n	8004ac2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a9a:	88fa      	ldrh	r2, [r7, #6]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9303      	str	r3, [sp, #12]
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	9302      	str	r3, [sp, #8]
 8004aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 f80f 	bl	8004ad4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ab6:	69f8      	ldr	r0, [r7, #28]
 8004ab8:	f000 f8ac 	bl	8004c14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004abc:	2301      	movs	r3, #1
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	e002      	b.n	8004ac8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ac6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ac8:	69bb      	ldr	r3, [r7, #24]
	}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3720      	adds	r7, #32
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004aec:	3b01      	subs	r3, #1
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f023 0307 	bic.w	r3, r3, #7
 8004afa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	617b      	str	r3, [r7, #20]
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	e7fd      	b.n	8004b1a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01f      	beq.n	8004b64 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e012      	b.n	8004b50 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	4413      	add	r3, r2
 8004b30:	7819      	ldrb	r1, [r3, #0]
 8004b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	3334      	adds	r3, #52	@ 0x34
 8004b3a:	460a      	mov	r2, r1
 8004b3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d006      	beq.n	8004b58 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	2b0f      	cmp	r3, #15
 8004b54:	d9e9      	bls.n	8004b2a <prvInitialiseNewTask+0x56>
 8004b56:	e000      	b.n	8004b5a <prvInitialiseNewTask+0x86>
			{
				break;
 8004b58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b62:	e003      	b.n	8004b6c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6e:	2b06      	cmp	r3, #6
 8004b70:	d901      	bls.n	8004b76 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b72:	2306      	movs	r3, #6
 8004b74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b80:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b84:	2200      	movs	r2, #0
 8004b86:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff fb06 	bl	800419e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b94:	3318      	adds	r3, #24
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fb01 	bl	800419e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ba0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba4:	f1c3 0207 	rsb	r2, r3, #7
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004baa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	334c      	adds	r3, #76	@ 0x4c
 8004bc6:	224c      	movs	r2, #76	@ 0x4c
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f001 ffbd 	bl	8006b4a <memset>
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	4a0d      	ldr	r2, [pc, #52]	@ (8004c08 <prvInitialiseNewTask+0x134>)
 8004bd4:	651a      	str	r2, [r3, #80]	@ 0x50
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8004c0c <prvInitialiseNewTask+0x138>)
 8004bda:	655a      	str	r2, [r3, #84]	@ 0x54
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bde:	4a0c      	ldr	r2, [pc, #48]	@ (8004c10 <prvInitialiseNewTask+0x13c>)
 8004be0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	68f9      	ldr	r1, [r7, #12]
 8004be6:	69b8      	ldr	r0, [r7, #24]
 8004be8:	f000 fde0 	bl	80057ac <pxPortInitialiseStack>
 8004bec:	4602      	mov	r2, r0
 8004bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bfe:	bf00      	nop
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	200042b0 	.word	0x200042b0
 8004c0c:	20004318 	.word	0x20004318
 8004c10:	20004380 	.word	0x20004380

08004c14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c1c:	f000 fef4 	bl	8005a08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c20:	4b2a      	ldr	r3, [pc, #168]	@ (8004ccc <prvAddNewTaskToReadyList+0xb8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	4a29      	ldr	r2, [pc, #164]	@ (8004ccc <prvAddNewTaskToReadyList+0xb8>)
 8004c28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c2a:	4b29      	ldr	r3, [pc, #164]	@ (8004cd0 <prvAddNewTaskToReadyList+0xbc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c32:	4a27      	ldr	r2, [pc, #156]	@ (8004cd0 <prvAddNewTaskToReadyList+0xbc>)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c38:	4b24      	ldr	r3, [pc, #144]	@ (8004ccc <prvAddNewTaskToReadyList+0xb8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d110      	bne.n	8004c62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c40:	f000 fbe4 	bl	800540c <prvInitialiseTaskLists>
 8004c44:	e00d      	b.n	8004c62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c46:	4b23      	ldr	r3, [pc, #140]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c4e:	4b20      	ldr	r3, [pc, #128]	@ (8004cd0 <prvAddNewTaskToReadyList+0xbc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d802      	bhi.n	8004c62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd0 <prvAddNewTaskToReadyList+0xbc>)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c62:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd8 <prvAddNewTaskToReadyList+0xc4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3301      	adds	r3, #1
 8004c68:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd8 <prvAddNewTaskToReadyList+0xc4>)
 8004c6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	2201      	movs	r2, #1
 8004c72:	409a      	lsls	r2, r3
 8004c74:	4b19      	ldr	r3, [pc, #100]	@ (8004cdc <prvAddNewTaskToReadyList+0xc8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	4a18      	ldr	r2, [pc, #96]	@ (8004cdc <prvAddNewTaskToReadyList+0xc8>)
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ce0 <prvAddNewTaskToReadyList+0xcc>)
 8004c8c:	441a      	add	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3304      	adds	r3, #4
 8004c92:	4619      	mov	r1, r3
 8004c94:	4610      	mov	r0, r2
 8004c96:	f7ff fa8f 	bl	80041b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c9a:	f000 fee7 	bl	8005a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd4 <prvAddNewTaskToReadyList+0xc0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00e      	beq.n	8004cc4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd0 <prvAddNewTaskToReadyList+0xbc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d207      	bcs.n	8004cc4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce4 <prvAddNewTaskToReadyList+0xd0>)
 8004cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	2000065c 	.word	0x2000065c
 8004cd0:	2000055c 	.word	0x2000055c
 8004cd4:	20000668 	.word	0x20000668
 8004cd8:	20000678 	.word	0x20000678
 8004cdc:	20000664 	.word	0x20000664
 8004ce0:	20000560 	.word	0x20000560
 8004ce4:	e000ed04 	.word	0xe000ed04

08004ce8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d018      	beq.n	8004d2c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004cfa:	4b14      	ldr	r3, [pc, #80]	@ (8004d4c <vTaskDelay+0x64>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00b      	beq.n	8004d1a <vTaskDelay+0x32>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	60bb      	str	r3, [r7, #8]
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	e7fd      	b.n	8004d16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d1a:	f000 f885 	bl	8004e28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d1e:	2100      	movs	r1, #0
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fcdd 	bl	80056e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d26:	f000 f88d 	bl	8004e44 <xTaskResumeAll>
 8004d2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d107      	bne.n	8004d42 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004d32:	4b07      	ldr	r3, [pc, #28]	@ (8004d50 <vTaskDelay+0x68>)
 8004d34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000684 	.word	0x20000684
 8004d50:	e000ed04 	.word	0xe000ed04

08004d54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08a      	sub	sp, #40	@ 0x28
 8004d58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d62:	463a      	mov	r2, r7
 8004d64:	1d39      	adds	r1, r7, #4
 8004d66:	f107 0308 	add.w	r3, r7, #8
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fc f894 	bl	8000e98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d70:	6839      	ldr	r1, [r7, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	9202      	str	r2, [sp, #8]
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	460a      	mov	r2, r1
 8004d82:	4921      	ldr	r1, [pc, #132]	@ (8004e08 <vTaskStartScheduler+0xb4>)
 8004d84:	4821      	ldr	r0, [pc, #132]	@ (8004e0c <vTaskStartScheduler+0xb8>)
 8004d86:	f7ff fdff 	bl	8004988 <xTaskCreateStatic>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4a20      	ldr	r2, [pc, #128]	@ (8004e10 <vTaskStartScheduler+0xbc>)
 8004d8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d90:	4b1f      	ldr	r3, [pc, #124]	@ (8004e10 <vTaskStartScheduler+0xbc>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	e001      	b.n	8004da2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d11b      	bne.n	8004de0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	613b      	str	r3, [r7, #16]
}
 8004dba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004dbc:	4b15      	ldr	r3, [pc, #84]	@ (8004e14 <vTaskStartScheduler+0xc0>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	334c      	adds	r3, #76	@ 0x4c
 8004dc2:	4a15      	ldr	r2, [pc, #84]	@ (8004e18 <vTaskStartScheduler+0xc4>)
 8004dc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004dc6:	4b15      	ldr	r3, [pc, #84]	@ (8004e1c <vTaskStartScheduler+0xc8>)
 8004dc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004dcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dce:	4b14      	ldr	r3, [pc, #80]	@ (8004e20 <vTaskStartScheduler+0xcc>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dd4:	4b13      	ldr	r3, [pc, #76]	@ (8004e24 <vTaskStartScheduler+0xd0>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004dda:	f000 fd71 	bl	80058c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004dde:	e00f      	b.n	8004e00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004de6:	d10b      	bne.n	8004e00 <vTaskStartScheduler+0xac>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	60fb      	str	r3, [r7, #12]
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <vTaskStartScheduler+0xa8>
}
 8004e00:	bf00      	nop
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	08008e10 	.word	0x08008e10
 8004e0c:	080053dd 	.word	0x080053dd
 8004e10:	20000680 	.word	0x20000680
 8004e14:	2000055c 	.word	0x2000055c
 8004e18:	2000001c 	.word	0x2000001c
 8004e1c:	2000067c 	.word	0x2000067c
 8004e20:	20000668 	.word	0x20000668
 8004e24:	20000660 	.word	0x20000660

08004e28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e2c:	4b04      	ldr	r3, [pc, #16]	@ (8004e40 <vTaskSuspendAll+0x18>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3301      	adds	r3, #1
 8004e32:	4a03      	ldr	r2, [pc, #12]	@ (8004e40 <vTaskSuspendAll+0x18>)
 8004e34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e36:	bf00      	nop
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	20000684 	.word	0x20000684

08004e44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e52:	4b42      	ldr	r3, [pc, #264]	@ (8004f5c <xTaskResumeAll+0x118>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10b      	bne.n	8004e72 <xTaskResumeAll+0x2e>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	603b      	str	r3, [r7, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	bf00      	nop
 8004e70:	e7fd      	b.n	8004e6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e72:	f000 fdc9 	bl	8005a08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e76:	4b39      	ldr	r3, [pc, #228]	@ (8004f5c <xTaskResumeAll+0x118>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	4a37      	ldr	r2, [pc, #220]	@ (8004f5c <xTaskResumeAll+0x118>)
 8004e7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e80:	4b36      	ldr	r3, [pc, #216]	@ (8004f5c <xTaskResumeAll+0x118>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d161      	bne.n	8004f4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e88:	4b35      	ldr	r3, [pc, #212]	@ (8004f60 <xTaskResumeAll+0x11c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d05d      	beq.n	8004f4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e90:	e02e      	b.n	8004ef0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e92:	4b34      	ldr	r3, [pc, #208]	@ (8004f64 <xTaskResumeAll+0x120>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3318      	adds	r3, #24
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff f9e7 	bl	8004272 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff f9e2 	bl	8004272 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	409a      	lsls	r2, r3
 8004eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8004f68 <xTaskResumeAll+0x124>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8004f68 <xTaskResumeAll+0x124>)
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4a27      	ldr	r2, [pc, #156]	@ (8004f6c <xTaskResumeAll+0x128>)
 8004ece:	441a      	add	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f7ff f96e 	bl	80041b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee0:	4b23      	ldr	r3, [pc, #140]	@ (8004f70 <xTaskResumeAll+0x12c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d302      	bcc.n	8004ef0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004eea:	4b22      	ldr	r3, [pc, #136]	@ (8004f74 <xTaskResumeAll+0x130>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8004f64 <xTaskResumeAll+0x120>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1cc      	bne.n	8004e92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004efe:	f000 fb29 	bl	8005554 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f02:	4b1d      	ldr	r3, [pc, #116]	@ (8004f78 <xTaskResumeAll+0x134>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d010      	beq.n	8004f30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f0e:	f000 f837 	bl	8004f80 <xTaskIncrementTick>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f18:	4b16      	ldr	r3, [pc, #88]	@ (8004f74 <xTaskResumeAll+0x130>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f1      	bne.n	8004f0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f2a:	4b13      	ldr	r3, [pc, #76]	@ (8004f78 <xTaskResumeAll+0x134>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f30:	4b10      	ldr	r3, [pc, #64]	@ (8004f74 <xTaskResumeAll+0x130>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d009      	beq.n	8004f4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f7c <xTaskResumeAll+0x138>)
 8004f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f4c:	f000 fd8e 	bl	8005a6c <vPortExitCritical>

	return xAlreadyYielded;
 8004f50:	68bb      	ldr	r3, [r7, #8]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20000684 	.word	0x20000684
 8004f60:	2000065c 	.word	0x2000065c
 8004f64:	2000061c 	.word	0x2000061c
 8004f68:	20000664 	.word	0x20000664
 8004f6c:	20000560 	.word	0x20000560
 8004f70:	2000055c 	.word	0x2000055c
 8004f74:	20000670 	.word	0x20000670
 8004f78:	2000066c 	.word	0x2000066c
 8004f7c:	e000ed04 	.word	0xe000ed04

08004f80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80050c8 <xTaskIncrementTick+0x148>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f040 808f 	bne.w	80050b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f94:	4b4d      	ldr	r3, [pc, #308]	@ (80050cc <xTaskIncrementTick+0x14c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f9c:	4a4b      	ldr	r2, [pc, #300]	@ (80050cc <xTaskIncrementTick+0x14c>)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d121      	bne.n	8004fec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fa8:	4b49      	ldr	r3, [pc, #292]	@ (80050d0 <xTaskIncrementTick+0x150>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <xTaskIncrementTick+0x4a>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	603b      	str	r3, [r7, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <xTaskIncrementTick+0x46>
 8004fca:	4b41      	ldr	r3, [pc, #260]	@ (80050d0 <xTaskIncrementTick+0x150>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	4b40      	ldr	r3, [pc, #256]	@ (80050d4 <xTaskIncrementTick+0x154>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a3e      	ldr	r2, [pc, #248]	@ (80050d0 <xTaskIncrementTick+0x150>)
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	4a3e      	ldr	r2, [pc, #248]	@ (80050d4 <xTaskIncrementTick+0x154>)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	4b3e      	ldr	r3, [pc, #248]	@ (80050d8 <xTaskIncrementTick+0x158>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	4a3c      	ldr	r2, [pc, #240]	@ (80050d8 <xTaskIncrementTick+0x158>)
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	f000 fab4 	bl	8005554 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fec:	4b3b      	ldr	r3, [pc, #236]	@ (80050dc <xTaskIncrementTick+0x15c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d348      	bcc.n	8005088 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ff6:	4b36      	ldr	r3, [pc, #216]	@ (80050d0 <xTaskIncrementTick+0x150>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d104      	bne.n	800500a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005000:	4b36      	ldr	r3, [pc, #216]	@ (80050dc <xTaskIncrementTick+0x15c>)
 8005002:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005006:	601a      	str	r2, [r3, #0]
					break;
 8005008:	e03e      	b.n	8005088 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800500a:	4b31      	ldr	r3, [pc, #196]	@ (80050d0 <xTaskIncrementTick+0x150>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	429a      	cmp	r2, r3
 8005020:	d203      	bcs.n	800502a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005022:	4a2e      	ldr	r2, [pc, #184]	@ (80050dc <xTaskIncrementTick+0x15c>)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005028:	e02e      	b.n	8005088 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	3304      	adds	r3, #4
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff f91f 	bl	8004272 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005038:	2b00      	cmp	r3, #0
 800503a:	d004      	beq.n	8005046 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	3318      	adds	r3, #24
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff f916 	bl	8004272 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	2201      	movs	r2, #1
 800504c:	409a      	lsls	r2, r3
 800504e:	4b24      	ldr	r3, [pc, #144]	@ (80050e0 <xTaskIncrementTick+0x160>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4313      	orrs	r3, r2
 8005054:	4a22      	ldr	r2, [pc, #136]	@ (80050e0 <xTaskIncrementTick+0x160>)
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4a1f      	ldr	r2, [pc, #124]	@ (80050e4 <xTaskIncrementTick+0x164>)
 8005066:	441a      	add	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	3304      	adds	r3, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f7ff f8a2 	bl	80041b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005078:	4b1b      	ldr	r3, [pc, #108]	@ (80050e8 <xTaskIncrementTick+0x168>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	429a      	cmp	r2, r3
 8005080:	d3b9      	bcc.n	8004ff6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005082:	2301      	movs	r3, #1
 8005084:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005086:	e7b6      	b.n	8004ff6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005088:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <xTaskIncrementTick+0x168>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800508e:	4915      	ldr	r1, [pc, #84]	@ (80050e4 <xTaskIncrementTick+0x164>)
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d901      	bls.n	80050a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80050a0:	2301      	movs	r3, #1
 80050a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80050a4:	4b11      	ldr	r3, [pc, #68]	@ (80050ec <xTaskIncrementTick+0x16c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d007      	beq.n	80050bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80050ac:	2301      	movs	r3, #1
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e004      	b.n	80050bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80050b2:	4b0f      	ldr	r3, [pc, #60]	@ (80050f0 <xTaskIncrementTick+0x170>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3301      	adds	r3, #1
 80050b8:	4a0d      	ldr	r2, [pc, #52]	@ (80050f0 <xTaskIncrementTick+0x170>)
 80050ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80050bc:	697b      	ldr	r3, [r7, #20]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000684 	.word	0x20000684
 80050cc:	20000660 	.word	0x20000660
 80050d0:	20000614 	.word	0x20000614
 80050d4:	20000618 	.word	0x20000618
 80050d8:	20000674 	.word	0x20000674
 80050dc:	2000067c 	.word	0x2000067c
 80050e0:	20000664 	.word	0x20000664
 80050e4:	20000560 	.word	0x20000560
 80050e8:	2000055c 	.word	0x2000055c
 80050ec:	20000670 	.word	0x20000670
 80050f0:	2000066c 	.word	0x2000066c

080050f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050fa:	4b2a      	ldr	r3, [pc, #168]	@ (80051a4 <vTaskSwitchContext+0xb0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005102:	4b29      	ldr	r3, [pc, #164]	@ (80051a8 <vTaskSwitchContext+0xb4>)
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005108:	e045      	b.n	8005196 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800510a:	4b27      	ldr	r3, [pc, #156]	@ (80051a8 <vTaskSwitchContext+0xb4>)
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005110:	4b26      	ldr	r3, [pc, #152]	@ (80051ac <vTaskSwitchContext+0xb8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	fab3 f383 	clz	r3, r3
 800511c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800511e:	7afb      	ldrb	r3, [r7, #11]
 8005120:	f1c3 031f 	rsb	r3, r3, #31
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	4922      	ldr	r1, [pc, #136]	@ (80051b0 <vTaskSwitchContext+0xbc>)
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4613      	mov	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10b      	bne.n	8005152 <vTaskSwitchContext+0x5e>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	607b      	str	r3, [r7, #4]
}
 800514c:	bf00      	nop
 800514e:	bf00      	nop
 8005150:	e7fd      	b.n	800514e <vTaskSwitchContext+0x5a>
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4a14      	ldr	r2, [pc, #80]	@ (80051b0 <vTaskSwitchContext+0xbc>)
 800515e:	4413      	add	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	605a      	str	r2, [r3, #4]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	3308      	adds	r3, #8
 8005174:	429a      	cmp	r2, r3
 8005176:	d104      	bne.n	8005182 <vTaskSwitchContext+0x8e>
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4a0a      	ldr	r2, [pc, #40]	@ (80051b4 <vTaskSwitchContext+0xc0>)
 800518a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800518c:	4b09      	ldr	r3, [pc, #36]	@ (80051b4 <vTaskSwitchContext+0xc0>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	334c      	adds	r3, #76	@ 0x4c
 8005192:	4a09      	ldr	r2, [pc, #36]	@ (80051b8 <vTaskSwitchContext+0xc4>)
 8005194:	6013      	str	r3, [r2, #0]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000684 	.word	0x20000684
 80051a8:	20000670 	.word	0x20000670
 80051ac:	20000664 	.word	0x20000664
 80051b0:	20000560 	.word	0x20000560
 80051b4:	2000055c 	.word	0x2000055c
 80051b8:	2000001c 	.word	0x2000001c

080051bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10b      	bne.n	80051e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	60fb      	str	r3, [r7, #12]
}
 80051de:	bf00      	nop
 80051e0:	bf00      	nop
 80051e2:	e7fd      	b.n	80051e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051e4:	4b07      	ldr	r3, [pc, #28]	@ (8005204 <vTaskPlaceOnEventList+0x48>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3318      	adds	r3, #24
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff f807 	bl	8004200 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051f2:	2101      	movs	r1, #1
 80051f4:	6838      	ldr	r0, [r7, #0]
 80051f6:	f000 fa73 	bl	80056e0 <prvAddCurrentTaskToDelayedList>
}
 80051fa:	bf00      	nop
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	2000055c 	.word	0x2000055c

08005208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10b      	bne.n	8005236 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	60fb      	str	r3, [r7, #12]
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	e7fd      	b.n	8005232 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	3318      	adds	r3, #24
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff f819 	bl	8004272 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005240:	4b1d      	ldr	r3, [pc, #116]	@ (80052b8 <xTaskRemoveFromEventList+0xb0>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d11c      	bne.n	8005282 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	3304      	adds	r3, #4
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff f810 	bl	8004272 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005256:	2201      	movs	r2, #1
 8005258:	409a      	lsls	r2, r3
 800525a:	4b18      	ldr	r3, [pc, #96]	@ (80052bc <xTaskRemoveFromEventList+0xb4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4313      	orrs	r3, r2
 8005260:	4a16      	ldr	r2, [pc, #88]	@ (80052bc <xTaskRemoveFromEventList+0xb4>)
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4a13      	ldr	r2, [pc, #76]	@ (80052c0 <xTaskRemoveFromEventList+0xb8>)
 8005272:	441a      	add	r2, r3
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	3304      	adds	r3, #4
 8005278:	4619      	mov	r1, r3
 800527a:	4610      	mov	r0, r2
 800527c:	f7fe ff9c 	bl	80041b8 <vListInsertEnd>
 8005280:	e005      	b.n	800528e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	3318      	adds	r3, #24
 8005286:	4619      	mov	r1, r3
 8005288:	480e      	ldr	r0, [pc, #56]	@ (80052c4 <xTaskRemoveFromEventList+0xbc>)
 800528a:	f7fe ff95 	bl	80041b8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005292:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <xTaskRemoveFromEventList+0xc0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005298:	429a      	cmp	r2, r3
 800529a:	d905      	bls.n	80052a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800529c:	2301      	movs	r3, #1
 800529e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052a0:	4b0a      	ldr	r3, [pc, #40]	@ (80052cc <xTaskRemoveFromEventList+0xc4>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e001      	b.n	80052ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80052ac:	697b      	ldr	r3, [r7, #20]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20000684 	.word	0x20000684
 80052bc:	20000664 	.word	0x20000664
 80052c0:	20000560 	.word	0x20000560
 80052c4:	2000061c 	.word	0x2000061c
 80052c8:	2000055c 	.word	0x2000055c
 80052cc:	20000670 	.word	0x20000670

080052d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052d8:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <vTaskInternalSetTimeOutState+0x24>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052e0:	4b05      	ldr	r3, [pc, #20]	@ (80052f8 <vTaskInternalSetTimeOutState+0x28>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	605a      	str	r2, [r3, #4]
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	20000674 	.word	0x20000674
 80052f8:	20000660 	.word	0x20000660

080052fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10b      	bne.n	8005324 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	613b      	str	r3, [r7, #16]
}
 800531e:	bf00      	nop
 8005320:	bf00      	nop
 8005322:	e7fd      	b.n	8005320 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10b      	bne.n	8005342 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	60fb      	str	r3, [r7, #12]
}
 800533c:	bf00      	nop
 800533e:	bf00      	nop
 8005340:	e7fd      	b.n	800533e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005342:	f000 fb61 	bl	8005a08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005346:	4b1d      	ldr	r3, [pc, #116]	@ (80053bc <xTaskCheckForTimeOut+0xc0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800535e:	d102      	bne.n	8005366 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005360:	2300      	movs	r3, #0
 8005362:	61fb      	str	r3, [r7, #28]
 8005364:	e023      	b.n	80053ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4b15      	ldr	r3, [pc, #84]	@ (80053c0 <xTaskCheckForTimeOut+0xc4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d007      	beq.n	8005382 <xTaskCheckForTimeOut+0x86>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	429a      	cmp	r2, r3
 800537a:	d302      	bcc.n	8005382 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800537c:	2301      	movs	r3, #1
 800537e:	61fb      	str	r3, [r7, #28]
 8005380:	e015      	b.n	80053ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	429a      	cmp	r2, r3
 800538a:	d20b      	bcs.n	80053a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	1ad2      	subs	r2, r2, r3
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff ff99 	bl	80052d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800539e:	2300      	movs	r3, #0
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	e004      	b.n	80053ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80053aa:	2301      	movs	r3, #1
 80053ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053ae:	f000 fb5d 	bl	8005a6c <vPortExitCritical>

	return xReturn;
 80053b2:	69fb      	ldr	r3, [r7, #28]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3720      	adds	r7, #32
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20000660 	.word	0x20000660
 80053c0:	20000674 	.word	0x20000674

080053c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053c8:	4b03      	ldr	r3, [pc, #12]	@ (80053d8 <vTaskMissedYield+0x14>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
}
 80053ce:	bf00      	nop
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	20000670 	.word	0x20000670

080053dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053e4:	f000 f852 	bl	800548c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053e8:	4b06      	ldr	r3, [pc, #24]	@ (8005404 <prvIdleTask+0x28>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d9f9      	bls.n	80053e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053f0:	4b05      	ldr	r3, [pc, #20]	@ (8005408 <prvIdleTask+0x2c>)
 80053f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005400:	e7f0      	b.n	80053e4 <prvIdleTask+0x8>
 8005402:	bf00      	nop
 8005404:	20000560 	.word	0x20000560
 8005408:	e000ed04 	.word	0xe000ed04

0800540c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005412:	2300      	movs	r3, #0
 8005414:	607b      	str	r3, [r7, #4]
 8005416:	e00c      	b.n	8005432 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4a12      	ldr	r2, [pc, #72]	@ (800546c <prvInitialiseTaskLists+0x60>)
 8005424:	4413      	add	r3, r2
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe fe99 	bl	800415e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3301      	adds	r3, #1
 8005430:	607b      	str	r3, [r7, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b06      	cmp	r3, #6
 8005436:	d9ef      	bls.n	8005418 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005438:	480d      	ldr	r0, [pc, #52]	@ (8005470 <prvInitialiseTaskLists+0x64>)
 800543a:	f7fe fe90 	bl	800415e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800543e:	480d      	ldr	r0, [pc, #52]	@ (8005474 <prvInitialiseTaskLists+0x68>)
 8005440:	f7fe fe8d 	bl	800415e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005444:	480c      	ldr	r0, [pc, #48]	@ (8005478 <prvInitialiseTaskLists+0x6c>)
 8005446:	f7fe fe8a 	bl	800415e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800544a:	480c      	ldr	r0, [pc, #48]	@ (800547c <prvInitialiseTaskLists+0x70>)
 800544c:	f7fe fe87 	bl	800415e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005450:	480b      	ldr	r0, [pc, #44]	@ (8005480 <prvInitialiseTaskLists+0x74>)
 8005452:	f7fe fe84 	bl	800415e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005456:	4b0b      	ldr	r3, [pc, #44]	@ (8005484 <prvInitialiseTaskLists+0x78>)
 8005458:	4a05      	ldr	r2, [pc, #20]	@ (8005470 <prvInitialiseTaskLists+0x64>)
 800545a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800545c:	4b0a      	ldr	r3, [pc, #40]	@ (8005488 <prvInitialiseTaskLists+0x7c>)
 800545e:	4a05      	ldr	r2, [pc, #20]	@ (8005474 <prvInitialiseTaskLists+0x68>)
 8005460:	601a      	str	r2, [r3, #0]
}
 8005462:	bf00      	nop
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000560 	.word	0x20000560
 8005470:	200005ec 	.word	0x200005ec
 8005474:	20000600 	.word	0x20000600
 8005478:	2000061c 	.word	0x2000061c
 800547c:	20000630 	.word	0x20000630
 8005480:	20000648 	.word	0x20000648
 8005484:	20000614 	.word	0x20000614
 8005488:	20000618 	.word	0x20000618

0800548c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005492:	e019      	b.n	80054c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005494:	f000 fab8 	bl	8005a08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005498:	4b10      	ldr	r3, [pc, #64]	@ (80054dc <prvCheckTasksWaitingTermination+0x50>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fe fee4 	bl	8004272 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054aa:	4b0d      	ldr	r3, [pc, #52]	@ (80054e0 <prvCheckTasksWaitingTermination+0x54>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	4a0b      	ldr	r2, [pc, #44]	@ (80054e0 <prvCheckTasksWaitingTermination+0x54>)
 80054b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054b4:	4b0b      	ldr	r3, [pc, #44]	@ (80054e4 <prvCheckTasksWaitingTermination+0x58>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	4a0a      	ldr	r2, [pc, #40]	@ (80054e4 <prvCheckTasksWaitingTermination+0x58>)
 80054bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054be:	f000 fad5 	bl	8005a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f810 	bl	80054e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054c8:	4b06      	ldr	r3, [pc, #24]	@ (80054e4 <prvCheckTasksWaitingTermination+0x58>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e1      	bne.n	8005494 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054d0:	bf00      	nop
 80054d2:	bf00      	nop
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000630 	.word	0x20000630
 80054e0:	2000065c 	.word	0x2000065c
 80054e4:	20000644 	.word	0x20000644

080054e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	334c      	adds	r3, #76	@ 0x4c
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 fb45 	bl	8006b84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005500:	2b00      	cmp	r3, #0
 8005502:	d108      	bne.n	8005516 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fc6d 	bl	8005de8 <vPortFree>
				vPortFree( pxTCB );
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fc6a 	bl	8005de8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005514:	e019      	b.n	800554a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800551c:	2b01      	cmp	r3, #1
 800551e:	d103      	bne.n	8005528 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fc61 	bl	8005de8 <vPortFree>
	}
 8005526:	e010      	b.n	800554a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800552e:	2b02      	cmp	r3, #2
 8005530:	d00b      	beq.n	800554a <prvDeleteTCB+0x62>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	60fb      	str	r3, [r7, #12]
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	e7fd      	b.n	8005546 <prvDeleteTCB+0x5e>
	}
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800555a:	4b0c      	ldr	r3, [pc, #48]	@ (800558c <prvResetNextTaskUnblockTime+0x38>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d104      	bne.n	800556e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005564:	4b0a      	ldr	r3, [pc, #40]	@ (8005590 <prvResetNextTaskUnblockTime+0x3c>)
 8005566:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800556a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800556c:	e008      	b.n	8005580 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800556e:	4b07      	ldr	r3, [pc, #28]	@ (800558c <prvResetNextTaskUnblockTime+0x38>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	4a04      	ldr	r2, [pc, #16]	@ (8005590 <prvResetNextTaskUnblockTime+0x3c>)
 800557e:	6013      	str	r3, [r2, #0]
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	20000614 	.word	0x20000614
 8005590:	2000067c 	.word	0x2000067c

08005594 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800559a:	4b0b      	ldr	r3, [pc, #44]	@ (80055c8 <xTaskGetSchedulerState+0x34>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d102      	bne.n	80055a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055a2:	2301      	movs	r3, #1
 80055a4:	607b      	str	r3, [r7, #4]
 80055a6:	e008      	b.n	80055ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055a8:	4b08      	ldr	r3, [pc, #32]	@ (80055cc <xTaskGetSchedulerState+0x38>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80055b0:	2302      	movs	r3, #2
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	e001      	b.n	80055ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80055b6:	2300      	movs	r3, #0
 80055b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80055ba:	687b      	ldr	r3, [r7, #4]
	}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	20000668 	.word	0x20000668
 80055cc:	20000684 	.word	0x20000684

080055d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d070      	beq.n	80056c8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055e6:	4b3b      	ldr	r3, [pc, #236]	@ (80056d4 <xTaskPriorityDisinherit+0x104>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d00b      	beq.n	8005608 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	60fb      	str	r3, [r7, #12]
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	e7fd      	b.n	8005604 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10b      	bne.n	8005628 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60bb      	str	r3, [r7, #8]
}
 8005622:	bf00      	nop
 8005624:	bf00      	nop
 8005626:	e7fd      	b.n	8005624 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800562c:	1e5a      	subs	r2, r3, #1
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563a:	429a      	cmp	r2, r3
 800563c:	d044      	beq.n	80056c8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005642:	2b00      	cmp	r3, #0
 8005644:	d140      	bne.n	80056c8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	3304      	adds	r3, #4
 800564a:	4618      	mov	r0, r3
 800564c:	f7fe fe11 	bl	8004272 <uxListRemove>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d115      	bne.n	8005682 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800565a:	491f      	ldr	r1, [pc, #124]	@ (80056d8 <xTaskPriorityDisinherit+0x108>)
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10a      	bne.n	8005682 <xTaskPriorityDisinherit+0xb2>
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005670:	2201      	movs	r2, #1
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	43da      	mvns	r2, r3
 8005678:	4b18      	ldr	r3, [pc, #96]	@ (80056dc <xTaskPriorityDisinherit+0x10c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4013      	ands	r3, r2
 800567e:	4a17      	ldr	r2, [pc, #92]	@ (80056dc <xTaskPriorityDisinherit+0x10c>)
 8005680:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568e:	f1c3 0207 	rsb	r2, r3, #7
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	2201      	movs	r2, #1
 800569c:	409a      	lsls	r2, r3
 800569e:	4b0f      	ldr	r3, [pc, #60]	@ (80056dc <xTaskPriorityDisinherit+0x10c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	4a0d      	ldr	r2, [pc, #52]	@ (80056dc <xTaskPriorityDisinherit+0x10c>)
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4a08      	ldr	r2, [pc, #32]	@ (80056d8 <xTaskPriorityDisinherit+0x108>)
 80056b6:	441a      	add	r2, r3
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	3304      	adds	r3, #4
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f7fe fd7a 	bl	80041b8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056c8:	697b      	ldr	r3, [r7, #20]
	}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	2000055c 	.word	0x2000055c
 80056d8:	20000560 	.word	0x20000560
 80056dc:	20000664 	.word	0x20000664

080056e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056ea:	4b29      	ldr	r3, [pc, #164]	@ (8005790 <prvAddCurrentTaskToDelayedList+0xb0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056f0:	4b28      	ldr	r3, [pc, #160]	@ (8005794 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fe fdbb 	bl	8004272 <uxListRemove>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10b      	bne.n	800571a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005702:	4b24      	ldr	r3, [pc, #144]	@ (8005794 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005708:	2201      	movs	r2, #1
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43da      	mvns	r2, r3
 8005710:	4b21      	ldr	r3, [pc, #132]	@ (8005798 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4013      	ands	r3, r2
 8005716:	4a20      	ldr	r2, [pc, #128]	@ (8005798 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005718:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005720:	d10a      	bne.n	8005738 <prvAddCurrentTaskToDelayedList+0x58>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d007      	beq.n	8005738 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005728:	4b1a      	ldr	r3, [pc, #104]	@ (8005794 <prvAddCurrentTaskToDelayedList+0xb4>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3304      	adds	r3, #4
 800572e:	4619      	mov	r1, r3
 8005730:	481a      	ldr	r0, [pc, #104]	@ (800579c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005732:	f7fe fd41 	bl	80041b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005736:	e026      	b.n	8005786 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4413      	add	r3, r2
 800573e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005740:	4b14      	ldr	r3, [pc, #80]	@ (8005794 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	429a      	cmp	r2, r3
 800574e:	d209      	bcs.n	8005764 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005750:	4b13      	ldr	r3, [pc, #76]	@ (80057a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4b0f      	ldr	r3, [pc, #60]	@ (8005794 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3304      	adds	r3, #4
 800575a:	4619      	mov	r1, r3
 800575c:	4610      	mov	r0, r2
 800575e:	f7fe fd4f 	bl	8004200 <vListInsert>
}
 8005762:	e010      	b.n	8005786 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005764:	4b0f      	ldr	r3, [pc, #60]	@ (80057a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	4b0a      	ldr	r3, [pc, #40]	@ (8005794 <prvAddCurrentTaskToDelayedList+0xb4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3304      	adds	r3, #4
 800576e:	4619      	mov	r1, r3
 8005770:	4610      	mov	r0, r2
 8005772:	f7fe fd45 	bl	8004200 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005776:	4b0c      	ldr	r3, [pc, #48]	@ (80057a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	429a      	cmp	r2, r3
 800577e:	d202      	bcs.n	8005786 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005780:	4a09      	ldr	r2, [pc, #36]	@ (80057a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6013      	str	r3, [r2, #0]
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000660 	.word	0x20000660
 8005794:	2000055c 	.word	0x2000055c
 8005798:	20000664 	.word	0x20000664
 800579c:	20000648 	.word	0x20000648
 80057a0:	20000618 	.word	0x20000618
 80057a4:	20000614 	.word	0x20000614
 80057a8:	2000067c 	.word	0x2000067c

080057ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3b04      	subs	r3, #4
 80057bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3b04      	subs	r3, #4
 80057ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f023 0201 	bic.w	r2, r3, #1
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3b04      	subs	r3, #4
 80057da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005810 <pxPortInitialiseStack+0x64>)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3b14      	subs	r3, #20
 80057e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3b04      	subs	r3, #4
 80057f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f06f 0202 	mvn.w	r2, #2
 80057fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3b20      	subs	r3, #32
 8005800:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005802:	68fb      	ldr	r3, [r7, #12]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	08005815 	.word	0x08005815

08005814 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800581e:	4b13      	ldr	r3, [pc, #76]	@ (800586c <prvTaskExitError+0x58>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005826:	d00b      	beq.n	8005840 <prvTaskExitError+0x2c>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	60fb      	str	r3, [r7, #12]
}
 800583a:	bf00      	nop
 800583c:	bf00      	nop
 800583e:	e7fd      	b.n	800583c <prvTaskExitError+0x28>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	60bb      	str	r3, [r7, #8]
}
 8005852:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005854:	bf00      	nop
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0fc      	beq.n	8005856 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	2000000c 	.word	0x2000000c

08005870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005870:	4b07      	ldr	r3, [pc, #28]	@ (8005890 <pxCurrentTCBConst2>)
 8005872:	6819      	ldr	r1, [r3, #0]
 8005874:	6808      	ldr	r0, [r1, #0]
 8005876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	f380 8809 	msr	PSP, r0
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f04f 0000 	mov.w	r0, #0
 8005886:	f380 8811 	msr	BASEPRI, r0
 800588a:	4770      	bx	lr
 800588c:	f3af 8000 	nop.w

08005890 <pxCurrentTCBConst2>:
 8005890:	2000055c 	.word	0x2000055c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop

08005898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005898:	4808      	ldr	r0, [pc, #32]	@ (80058bc <prvPortStartFirstTask+0x24>)
 800589a:	6800      	ldr	r0, [r0, #0]
 800589c:	6800      	ldr	r0, [r0, #0]
 800589e:	f380 8808 	msr	MSP, r0
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8814 	msr	CONTROL, r0
 80058aa:	b662      	cpsie	i
 80058ac:	b661      	cpsie	f
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	df00      	svc	0
 80058b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058ba:	bf00      	nop
 80058bc:	e000ed08 	.word	0xe000ed08

080058c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058c6:	4b47      	ldr	r3, [pc, #284]	@ (80059e4 <xPortStartScheduler+0x124>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a47      	ldr	r2, [pc, #284]	@ (80059e8 <xPortStartScheduler+0x128>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10b      	bne.n	80058e8 <xPortStartScheduler+0x28>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	613b      	str	r3, [r7, #16]
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	e7fd      	b.n	80058e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058e8:	4b3e      	ldr	r3, [pc, #248]	@ (80059e4 <xPortStartScheduler+0x124>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a3f      	ldr	r2, [pc, #252]	@ (80059ec <xPortStartScheduler+0x12c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d10b      	bne.n	800590a <xPortStartScheduler+0x4a>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	60fb      	str	r3, [r7, #12]
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	e7fd      	b.n	8005906 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800590a:	4b39      	ldr	r3, [pc, #228]	@ (80059f0 <xPortStartScheduler+0x130>)
 800590c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	22ff      	movs	r2, #255	@ 0xff
 800591a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800592c:	b2da      	uxtb	r2, r3
 800592e:	4b31      	ldr	r3, [pc, #196]	@ (80059f4 <xPortStartScheduler+0x134>)
 8005930:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005932:	4b31      	ldr	r3, [pc, #196]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005934:	2207      	movs	r2, #7
 8005936:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005938:	e009      	b.n	800594e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800593a:	4b2f      	ldr	r3, [pc, #188]	@ (80059f8 <xPortStartScheduler+0x138>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3b01      	subs	r3, #1
 8005940:	4a2d      	ldr	r2, [pc, #180]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005942:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	b2db      	uxtb	r3, r3
 800594c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005956:	2b80      	cmp	r3, #128	@ 0x80
 8005958:	d0ef      	beq.n	800593a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800595a:	4b27      	ldr	r3, [pc, #156]	@ (80059f8 <xPortStartScheduler+0x138>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1c3 0307 	rsb	r3, r3, #7
 8005962:	2b04      	cmp	r3, #4
 8005964:	d00b      	beq.n	800597e <xPortStartScheduler+0xbe>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	60bb      	str	r3, [r7, #8]
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	e7fd      	b.n	800597a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800597e:	4b1e      	ldr	r3, [pc, #120]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	4a1c      	ldr	r2, [pc, #112]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005986:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005988:	4b1b      	ldr	r3, [pc, #108]	@ (80059f8 <xPortStartScheduler+0x138>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005990:	4a19      	ldr	r2, [pc, #100]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005992:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800599c:	4b17      	ldr	r3, [pc, #92]	@ (80059fc <xPortStartScheduler+0x13c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a16      	ldr	r2, [pc, #88]	@ (80059fc <xPortStartScheduler+0x13c>)
 80059a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059a8:	4b14      	ldr	r3, [pc, #80]	@ (80059fc <xPortStartScheduler+0x13c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a13      	ldr	r2, [pc, #76]	@ (80059fc <xPortStartScheduler+0x13c>)
 80059ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80059b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059b4:	f000 f8da 	bl	8005b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <xPortStartScheduler+0x140>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059be:	f000 f8f9 	bl	8005bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059c2:	4b10      	ldr	r3, [pc, #64]	@ (8005a04 <xPortStartScheduler+0x144>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005a04 <xPortStartScheduler+0x144>)
 80059c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80059cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059ce:	f7ff ff63 	bl	8005898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059d2:	f7ff fb8f 	bl	80050f4 <vTaskSwitchContext>
	prvTaskExitError();
 80059d6:	f7ff ff1d 	bl	8005814 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	e000ed00 	.word	0xe000ed00
 80059e8:	410fc271 	.word	0x410fc271
 80059ec:	410fc270 	.word	0x410fc270
 80059f0:	e000e400 	.word	0xe000e400
 80059f4:	20000688 	.word	0x20000688
 80059f8:	2000068c 	.word	0x2000068c
 80059fc:	e000ed20 	.word	0xe000ed20
 8005a00:	2000000c 	.word	0x2000000c
 8005a04:	e000ef34 	.word	0xe000ef34

08005a08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	607b      	str	r3, [r7, #4]
}
 8005a20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a22:	4b10      	ldr	r3, [pc, #64]	@ (8005a64 <vPortEnterCritical+0x5c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3301      	adds	r3, #1
 8005a28:	4a0e      	ldr	r2, [pc, #56]	@ (8005a64 <vPortEnterCritical+0x5c>)
 8005a2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a64 <vPortEnterCritical+0x5c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d110      	bne.n	8005a56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a34:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <vPortEnterCritical+0x60>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <vPortEnterCritical+0x4e>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	603b      	str	r3, [r7, #0]
}
 8005a50:	bf00      	nop
 8005a52:	bf00      	nop
 8005a54:	e7fd      	b.n	8005a52 <vPortEnterCritical+0x4a>
	}
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	2000000c 	.word	0x2000000c
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a72:	4b12      	ldr	r3, [pc, #72]	@ (8005abc <vPortExitCritical+0x50>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <vPortExitCritical+0x26>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	607b      	str	r3, [r7, #4]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a92:	4b0a      	ldr	r3, [pc, #40]	@ (8005abc <vPortExitCritical+0x50>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	4a08      	ldr	r2, [pc, #32]	@ (8005abc <vPortExitCritical+0x50>)
 8005a9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a9c:	4b07      	ldr	r3, [pc, #28]	@ (8005abc <vPortExitCritical+0x50>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d105      	bne.n	8005ab0 <vPortExitCritical+0x44>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f383 8811 	msr	BASEPRI, r3
}
 8005aae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	2000000c 	.word	0x2000000c

08005ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ac0:	f3ef 8009 	mrs	r0, PSP
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	4b15      	ldr	r3, [pc, #84]	@ (8005b20 <pxCurrentTCBConst>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	f01e 0f10 	tst.w	lr, #16
 8005ad0:	bf08      	it	eq
 8005ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	6010      	str	r0, [r2, #0]
 8005adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ae0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ae4:	f380 8811 	msr	BASEPRI, r0
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f7ff fb00 	bl	80050f4 <vTaskSwitchContext>
 8005af4:	f04f 0000 	mov.w	r0, #0
 8005af8:	f380 8811 	msr	BASEPRI, r0
 8005afc:	bc09      	pop	{r0, r3}
 8005afe:	6819      	ldr	r1, [r3, #0]
 8005b00:	6808      	ldr	r0, [r1, #0]
 8005b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b06:	f01e 0f10 	tst.w	lr, #16
 8005b0a:	bf08      	it	eq
 8005b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b10:	f380 8809 	msr	PSP, r0
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	f3af 8000 	nop.w

08005b20 <pxCurrentTCBConst>:
 8005b20:	2000055c 	.word	0x2000055c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop

08005b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	607b      	str	r3, [r7, #4]
}
 8005b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b42:	f7ff fa1d 	bl	8004f80 <xTaskIncrementTick>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b4c:	4b06      	ldr	r3, [pc, #24]	@ (8005b68 <SysTick_Handler+0x40>)
 8005b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	2300      	movs	r3, #0
 8005b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	f383 8811 	msr	BASEPRI, r3
}
 8005b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <vPortSetupTimerInterrupt+0x34>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba4 <vPortSetupTimerInterrupt+0x38>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba8 <vPortSetupTimerInterrupt+0x3c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a0a      	ldr	r2, [pc, #40]	@ (8005bac <vPortSetupTimerInterrupt+0x40>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	099b      	lsrs	r3, r3, #6
 8005b88:	4a09      	ldr	r2, [pc, #36]	@ (8005bb0 <vPortSetupTimerInterrupt+0x44>)
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b8e:	4b04      	ldr	r3, [pc, #16]	@ (8005ba0 <vPortSetupTimerInterrupt+0x34>)
 8005b90:	2207      	movs	r2, #7
 8005b92:	601a      	str	r2, [r3, #0]
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	e000e010 	.word	0xe000e010
 8005ba4:	e000e018 	.word	0xe000e018
 8005ba8:	20000000 	.word	0x20000000
 8005bac:	10624dd3 	.word	0x10624dd3
 8005bb0:	e000e014 	.word	0xe000e014

08005bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005bc4 <vPortEnableVFP+0x10>
 8005bb8:	6801      	ldr	r1, [r0, #0]
 8005bba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005bbe:	6001      	str	r1, [r0, #0]
 8005bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bc2:	bf00      	nop
 8005bc4:	e000ed88 	.word	0xe000ed88

08005bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bce:	f3ef 8305 	mrs	r3, IPSR
 8005bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b0f      	cmp	r3, #15
 8005bd8:	d915      	bls.n	8005c06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bda:	4a18      	ldr	r2, [pc, #96]	@ (8005c3c <vPortValidateInterruptPriority+0x74>)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005be4:	4b16      	ldr	r3, [pc, #88]	@ (8005c40 <vPortValidateInterruptPriority+0x78>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	7afa      	ldrb	r2, [r7, #11]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d20b      	bcs.n	8005c06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	607b      	str	r3, [r7, #4]
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	e7fd      	b.n	8005c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c06:	4b0f      	ldr	r3, [pc, #60]	@ (8005c44 <vPortValidateInterruptPriority+0x7c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c48 <vPortValidateInterruptPriority+0x80>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d90b      	bls.n	8005c2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	603b      	str	r3, [r7, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	e7fd      	b.n	8005c2a <vPortValidateInterruptPriority+0x62>
	}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	e000e3f0 	.word	0xe000e3f0
 8005c40:	20000688 	.word	0x20000688
 8005c44:	e000ed0c 	.word	0xe000ed0c
 8005c48:	2000068c 	.word	0x2000068c

08005c4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	@ 0x28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c58:	f7ff f8e6 	bl	8004e28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c5c:	4b5c      	ldr	r3, [pc, #368]	@ (8005dd0 <pvPortMalloc+0x184>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c64:	f000 f924 	bl	8005eb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c68:	4b5a      	ldr	r3, [pc, #360]	@ (8005dd4 <pvPortMalloc+0x188>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f040 8095 	bne.w	8005da0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01e      	beq.n	8005cba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4413      	add	r3, r2
 8005c82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d015      	beq.n	8005cba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f023 0307 	bic.w	r3, r3, #7
 8005c94:	3308      	adds	r3, #8
 8005c96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00b      	beq.n	8005cba <pvPortMalloc+0x6e>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	617b      	str	r3, [r7, #20]
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop
 8005cb8:	e7fd      	b.n	8005cb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d06f      	beq.n	8005da0 <pvPortMalloc+0x154>
 8005cc0:	4b45      	ldr	r3, [pc, #276]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d86a      	bhi.n	8005da0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cca:	4b44      	ldr	r3, [pc, #272]	@ (8005ddc <pvPortMalloc+0x190>)
 8005ccc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cce:	4b43      	ldr	r3, [pc, #268]	@ (8005ddc <pvPortMalloc+0x190>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cd4:	e004      	b.n	8005ce0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d903      	bls.n	8005cf2 <pvPortMalloc+0xa6>
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f1      	bne.n	8005cd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cf2:	4b37      	ldr	r3, [pc, #220]	@ (8005dd0 <pvPortMalloc+0x184>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d051      	beq.n	8005da0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2208      	movs	r2, #8
 8005d02:	4413      	add	r3, r2
 8005d04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	1ad2      	subs	r2, r2, r3
 8005d16:	2308      	movs	r3, #8
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d920      	bls.n	8005d60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4413      	add	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00b      	beq.n	8005d48 <pvPortMalloc+0xfc>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	613b      	str	r3, [r7, #16]
}
 8005d42:	bf00      	nop
 8005d44:	bf00      	nop
 8005d46:	e7fd      	b.n	8005d44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	1ad2      	subs	r2, r2, r3
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d5a:	69b8      	ldr	r0, [r7, #24]
 8005d5c:	f000 f90a 	bl	8005f74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d60:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005d6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b1b      	ldr	r3, [pc, #108]	@ (8005de0 <pvPortMalloc+0x194>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d203      	bcs.n	8005d82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d7a:	4b17      	ldr	r3, [pc, #92]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a18      	ldr	r2, [pc, #96]	@ (8005de0 <pvPortMalloc+0x194>)
 8005d80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	4b13      	ldr	r3, [pc, #76]	@ (8005dd4 <pvPortMalloc+0x188>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d96:	4b13      	ldr	r3, [pc, #76]	@ (8005de4 <pvPortMalloc+0x198>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	4a11      	ldr	r2, [pc, #68]	@ (8005de4 <pvPortMalloc+0x198>)
 8005d9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005da0:	f7ff f850 	bl	8004e44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <pvPortMalloc+0x17a>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	60fb      	str	r3, [r7, #12]
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	e7fd      	b.n	8005dc2 <pvPortMalloc+0x176>
	return pvReturn;
 8005dc6:	69fb      	ldr	r3, [r7, #28]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3728      	adds	r7, #40	@ 0x28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	20004298 	.word	0x20004298
 8005dd4:	200042ac 	.word	0x200042ac
 8005dd8:	2000429c 	.word	0x2000429c
 8005ddc:	20004290 	.word	0x20004290
 8005de0:	200042a0 	.word	0x200042a0
 8005de4:	200042a4 	.word	0x200042a4

08005de8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d04f      	beq.n	8005e9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	425b      	negs	r3, r3
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4413      	add	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	4b25      	ldr	r3, [pc, #148]	@ (8005ea4 <vPortFree+0xbc>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <vPortFree+0x46>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	60fb      	str	r3, [r7, #12]
}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	e7fd      	b.n	8005e2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <vPortFree+0x66>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	60bb      	str	r3, [r7, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	e7fd      	b.n	8005e4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	4b14      	ldr	r3, [pc, #80]	@ (8005ea4 <vPortFree+0xbc>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4013      	ands	r3, r2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01e      	beq.n	8005e9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d11a      	bne.n	8005e9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea4 <vPortFree+0xbc>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	401a      	ands	r2, r3
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e74:	f7fe ffd8 	bl	8004e28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea8 <vPortFree+0xc0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4413      	add	r3, r2
 8005e82:	4a09      	ldr	r2, [pc, #36]	@ (8005ea8 <vPortFree+0xc0>)
 8005e84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e86:	6938      	ldr	r0, [r7, #16]
 8005e88:	f000 f874 	bl	8005f74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e8c:	4b07      	ldr	r3, [pc, #28]	@ (8005eac <vPortFree+0xc4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3301      	adds	r3, #1
 8005e92:	4a06      	ldr	r2, [pc, #24]	@ (8005eac <vPortFree+0xc4>)
 8005e94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e96:	f7fe ffd5 	bl	8004e44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e9a:	bf00      	nop
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200042ac 	.word	0x200042ac
 8005ea8:	2000429c 	.word	0x2000429c
 8005eac:	200042a8 	.word	0x200042a8

08005eb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005eba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ebc:	4b27      	ldr	r3, [pc, #156]	@ (8005f5c <prvHeapInit+0xac>)
 8005ebe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00c      	beq.n	8005ee4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3307      	adds	r3, #7
 8005ece:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0307 	bic.w	r3, r3, #7
 8005ed6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	4a1f      	ldr	r2, [pc, #124]	@ (8005f5c <prvHeapInit+0xac>)
 8005ee0:	4413      	add	r3, r2
 8005ee2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f60 <prvHeapInit+0xb0>)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005eee:	4b1c      	ldr	r3, [pc, #112]	@ (8005f60 <prvHeapInit+0xb0>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	4413      	add	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005efc:	2208      	movs	r2, #8
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1a9b      	subs	r3, r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0307 	bic.w	r3, r3, #7
 8005f0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4a15      	ldr	r2, [pc, #84]	@ (8005f64 <prvHeapInit+0xb4>)
 8005f10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f12:	4b14      	ldr	r3, [pc, #80]	@ (8005f64 <prvHeapInit+0xb4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2200      	movs	r2, #0
 8005f18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f1a:	4b12      	ldr	r3, [pc, #72]	@ (8005f64 <prvHeapInit+0xb4>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f30:	4b0c      	ldr	r3, [pc, #48]	@ (8005f64 <prvHeapInit+0xb4>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8005f68 <prvHeapInit+0xb8>)
 8005f3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4a09      	ldr	r2, [pc, #36]	@ (8005f6c <prvHeapInit+0xbc>)
 8005f46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f48:	4b09      	ldr	r3, [pc, #36]	@ (8005f70 <prvHeapInit+0xc0>)
 8005f4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f4e:	601a      	str	r2, [r3, #0]
}
 8005f50:	bf00      	nop
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	20000690 	.word	0x20000690
 8005f60:	20004290 	.word	0x20004290
 8005f64:	20004298 	.word	0x20004298
 8005f68:	200042a0 	.word	0x200042a0
 8005f6c:	2000429c 	.word	0x2000429c
 8005f70:	200042ac 	.word	0x200042ac

08005f74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f7c:	4b28      	ldr	r3, [pc, #160]	@ (8006020 <prvInsertBlockIntoFreeList+0xac>)
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	e002      	b.n	8005f88 <prvInsertBlockIntoFreeList+0x14>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d8f7      	bhi.n	8005f82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d108      	bne.n	8005fb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	441a      	add	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d118      	bne.n	8005ffc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4b15      	ldr	r3, [pc, #84]	@ (8006024 <prvInsertBlockIntoFreeList+0xb0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d00d      	beq.n	8005ff2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	441a      	add	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	e008      	b.n	8006004 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8006024 <prvInsertBlockIntoFreeList+0xb0>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	e003      	b.n	8006004 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d002      	beq.n	8006012 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	20004290 	.word	0x20004290
 8006024:	20004298 	.word	0x20004298

08006028 <__cvt>:
 8006028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800602c:	ec57 6b10 	vmov	r6, r7, d0
 8006030:	2f00      	cmp	r7, #0
 8006032:	460c      	mov	r4, r1
 8006034:	4619      	mov	r1, r3
 8006036:	463b      	mov	r3, r7
 8006038:	bfbb      	ittet	lt
 800603a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800603e:	461f      	movlt	r7, r3
 8006040:	2300      	movge	r3, #0
 8006042:	232d      	movlt	r3, #45	@ 0x2d
 8006044:	700b      	strb	r3, [r1, #0]
 8006046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006048:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800604c:	4691      	mov	r9, r2
 800604e:	f023 0820 	bic.w	r8, r3, #32
 8006052:	bfbc      	itt	lt
 8006054:	4632      	movlt	r2, r6
 8006056:	4616      	movlt	r6, r2
 8006058:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800605c:	d005      	beq.n	800606a <__cvt+0x42>
 800605e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006062:	d100      	bne.n	8006066 <__cvt+0x3e>
 8006064:	3401      	adds	r4, #1
 8006066:	2102      	movs	r1, #2
 8006068:	e000      	b.n	800606c <__cvt+0x44>
 800606a:	2103      	movs	r1, #3
 800606c:	ab03      	add	r3, sp, #12
 800606e:	9301      	str	r3, [sp, #4]
 8006070:	ab02      	add	r3, sp, #8
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	ec47 6b10 	vmov	d0, r6, r7
 8006078:	4653      	mov	r3, sl
 800607a:	4622      	mov	r2, r4
 800607c:	f000 fed4 	bl	8006e28 <_dtoa_r>
 8006080:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006084:	4605      	mov	r5, r0
 8006086:	d119      	bne.n	80060bc <__cvt+0x94>
 8006088:	f019 0f01 	tst.w	r9, #1
 800608c:	d00e      	beq.n	80060ac <__cvt+0x84>
 800608e:	eb00 0904 	add.w	r9, r0, r4
 8006092:	2200      	movs	r2, #0
 8006094:	2300      	movs	r3, #0
 8006096:	4630      	mov	r0, r6
 8006098:	4639      	mov	r1, r7
 800609a:	f7fa fd15 	bl	8000ac8 <__aeabi_dcmpeq>
 800609e:	b108      	cbz	r0, 80060a4 <__cvt+0x7c>
 80060a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80060a4:	2230      	movs	r2, #48	@ 0x30
 80060a6:	9b03      	ldr	r3, [sp, #12]
 80060a8:	454b      	cmp	r3, r9
 80060aa:	d31e      	bcc.n	80060ea <__cvt+0xc2>
 80060ac:	9b03      	ldr	r3, [sp, #12]
 80060ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060b0:	1b5b      	subs	r3, r3, r5
 80060b2:	4628      	mov	r0, r5
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	b004      	add	sp, #16
 80060b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80060c0:	eb00 0904 	add.w	r9, r0, r4
 80060c4:	d1e5      	bne.n	8006092 <__cvt+0x6a>
 80060c6:	7803      	ldrb	r3, [r0, #0]
 80060c8:	2b30      	cmp	r3, #48	@ 0x30
 80060ca:	d10a      	bne.n	80060e2 <__cvt+0xba>
 80060cc:	2200      	movs	r2, #0
 80060ce:	2300      	movs	r3, #0
 80060d0:	4630      	mov	r0, r6
 80060d2:	4639      	mov	r1, r7
 80060d4:	f7fa fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80060d8:	b918      	cbnz	r0, 80060e2 <__cvt+0xba>
 80060da:	f1c4 0401 	rsb	r4, r4, #1
 80060de:	f8ca 4000 	str.w	r4, [sl]
 80060e2:	f8da 3000 	ldr.w	r3, [sl]
 80060e6:	4499      	add	r9, r3
 80060e8:	e7d3      	b.n	8006092 <__cvt+0x6a>
 80060ea:	1c59      	adds	r1, r3, #1
 80060ec:	9103      	str	r1, [sp, #12]
 80060ee:	701a      	strb	r2, [r3, #0]
 80060f0:	e7d9      	b.n	80060a6 <__cvt+0x7e>

080060f2 <__exponent>:
 80060f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060f4:	2900      	cmp	r1, #0
 80060f6:	bfba      	itte	lt
 80060f8:	4249      	neglt	r1, r1
 80060fa:	232d      	movlt	r3, #45	@ 0x2d
 80060fc:	232b      	movge	r3, #43	@ 0x2b
 80060fe:	2909      	cmp	r1, #9
 8006100:	7002      	strb	r2, [r0, #0]
 8006102:	7043      	strb	r3, [r0, #1]
 8006104:	dd29      	ble.n	800615a <__exponent+0x68>
 8006106:	f10d 0307 	add.w	r3, sp, #7
 800610a:	461d      	mov	r5, r3
 800610c:	270a      	movs	r7, #10
 800610e:	461a      	mov	r2, r3
 8006110:	fbb1 f6f7 	udiv	r6, r1, r7
 8006114:	fb07 1416 	mls	r4, r7, r6, r1
 8006118:	3430      	adds	r4, #48	@ 0x30
 800611a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800611e:	460c      	mov	r4, r1
 8006120:	2c63      	cmp	r4, #99	@ 0x63
 8006122:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006126:	4631      	mov	r1, r6
 8006128:	dcf1      	bgt.n	800610e <__exponent+0x1c>
 800612a:	3130      	adds	r1, #48	@ 0x30
 800612c:	1e94      	subs	r4, r2, #2
 800612e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006132:	1c41      	adds	r1, r0, #1
 8006134:	4623      	mov	r3, r4
 8006136:	42ab      	cmp	r3, r5
 8006138:	d30a      	bcc.n	8006150 <__exponent+0x5e>
 800613a:	f10d 0309 	add.w	r3, sp, #9
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	42ac      	cmp	r4, r5
 8006142:	bf88      	it	hi
 8006144:	2300      	movhi	r3, #0
 8006146:	3302      	adds	r3, #2
 8006148:	4403      	add	r3, r0
 800614a:	1a18      	subs	r0, r3, r0
 800614c:	b003      	add	sp, #12
 800614e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006150:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006154:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006158:	e7ed      	b.n	8006136 <__exponent+0x44>
 800615a:	2330      	movs	r3, #48	@ 0x30
 800615c:	3130      	adds	r1, #48	@ 0x30
 800615e:	7083      	strb	r3, [r0, #2]
 8006160:	70c1      	strb	r1, [r0, #3]
 8006162:	1d03      	adds	r3, r0, #4
 8006164:	e7f1      	b.n	800614a <__exponent+0x58>
	...

08006168 <_printf_float>:
 8006168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	b08d      	sub	sp, #52	@ 0x34
 800616e:	460c      	mov	r4, r1
 8006170:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006174:	4616      	mov	r6, r2
 8006176:	461f      	mov	r7, r3
 8006178:	4605      	mov	r5, r0
 800617a:	f000 fcef 	bl	8006b5c <_localeconv_r>
 800617e:	6803      	ldr	r3, [r0, #0]
 8006180:	9304      	str	r3, [sp, #16]
 8006182:	4618      	mov	r0, r3
 8006184:	f7fa f874 	bl	8000270 <strlen>
 8006188:	2300      	movs	r3, #0
 800618a:	930a      	str	r3, [sp, #40]	@ 0x28
 800618c:	f8d8 3000 	ldr.w	r3, [r8]
 8006190:	9005      	str	r0, [sp, #20]
 8006192:	3307      	adds	r3, #7
 8006194:	f023 0307 	bic.w	r3, r3, #7
 8006198:	f103 0208 	add.w	r2, r3, #8
 800619c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80061a0:	f8d4 b000 	ldr.w	fp, [r4]
 80061a4:	f8c8 2000 	str.w	r2, [r8]
 80061a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80061b0:	9307      	str	r3, [sp, #28]
 80061b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80061b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80061ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061be:	4b9c      	ldr	r3, [pc, #624]	@ (8006430 <_printf_float+0x2c8>)
 80061c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061c4:	f7fa fcb2 	bl	8000b2c <__aeabi_dcmpun>
 80061c8:	bb70      	cbnz	r0, 8006228 <_printf_float+0xc0>
 80061ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061ce:	4b98      	ldr	r3, [pc, #608]	@ (8006430 <_printf_float+0x2c8>)
 80061d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061d4:	f7fa fc8c 	bl	8000af0 <__aeabi_dcmple>
 80061d8:	bb30      	cbnz	r0, 8006228 <_printf_float+0xc0>
 80061da:	2200      	movs	r2, #0
 80061dc:	2300      	movs	r3, #0
 80061de:	4640      	mov	r0, r8
 80061e0:	4649      	mov	r1, r9
 80061e2:	f7fa fc7b 	bl	8000adc <__aeabi_dcmplt>
 80061e6:	b110      	cbz	r0, 80061ee <_printf_float+0x86>
 80061e8:	232d      	movs	r3, #45	@ 0x2d
 80061ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061ee:	4a91      	ldr	r2, [pc, #580]	@ (8006434 <_printf_float+0x2cc>)
 80061f0:	4b91      	ldr	r3, [pc, #580]	@ (8006438 <_printf_float+0x2d0>)
 80061f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80061f6:	bf94      	ite	ls
 80061f8:	4690      	movls	r8, r2
 80061fa:	4698      	movhi	r8, r3
 80061fc:	2303      	movs	r3, #3
 80061fe:	6123      	str	r3, [r4, #16]
 8006200:	f02b 0304 	bic.w	r3, fp, #4
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	f04f 0900 	mov.w	r9, #0
 800620a:	9700      	str	r7, [sp, #0]
 800620c:	4633      	mov	r3, r6
 800620e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006210:	4621      	mov	r1, r4
 8006212:	4628      	mov	r0, r5
 8006214:	f000 f9d2 	bl	80065bc <_printf_common>
 8006218:	3001      	adds	r0, #1
 800621a:	f040 808d 	bne.w	8006338 <_printf_float+0x1d0>
 800621e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006222:	b00d      	add	sp, #52	@ 0x34
 8006224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006228:	4642      	mov	r2, r8
 800622a:	464b      	mov	r3, r9
 800622c:	4640      	mov	r0, r8
 800622e:	4649      	mov	r1, r9
 8006230:	f7fa fc7c 	bl	8000b2c <__aeabi_dcmpun>
 8006234:	b140      	cbz	r0, 8006248 <_printf_float+0xe0>
 8006236:	464b      	mov	r3, r9
 8006238:	2b00      	cmp	r3, #0
 800623a:	bfbc      	itt	lt
 800623c:	232d      	movlt	r3, #45	@ 0x2d
 800623e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006242:	4a7e      	ldr	r2, [pc, #504]	@ (800643c <_printf_float+0x2d4>)
 8006244:	4b7e      	ldr	r3, [pc, #504]	@ (8006440 <_printf_float+0x2d8>)
 8006246:	e7d4      	b.n	80061f2 <_printf_float+0x8a>
 8006248:	6863      	ldr	r3, [r4, #4]
 800624a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800624e:	9206      	str	r2, [sp, #24]
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	d13b      	bne.n	80062cc <_printf_float+0x164>
 8006254:	2306      	movs	r3, #6
 8006256:	6063      	str	r3, [r4, #4]
 8006258:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800625c:	2300      	movs	r3, #0
 800625e:	6022      	str	r2, [r4, #0]
 8006260:	9303      	str	r3, [sp, #12]
 8006262:	ab0a      	add	r3, sp, #40	@ 0x28
 8006264:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006268:	ab09      	add	r3, sp, #36	@ 0x24
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	6861      	ldr	r1, [r4, #4]
 800626e:	ec49 8b10 	vmov	d0, r8, r9
 8006272:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006276:	4628      	mov	r0, r5
 8006278:	f7ff fed6 	bl	8006028 <__cvt>
 800627c:	9b06      	ldr	r3, [sp, #24]
 800627e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006280:	2b47      	cmp	r3, #71	@ 0x47
 8006282:	4680      	mov	r8, r0
 8006284:	d129      	bne.n	80062da <_printf_float+0x172>
 8006286:	1cc8      	adds	r0, r1, #3
 8006288:	db02      	blt.n	8006290 <_printf_float+0x128>
 800628a:	6863      	ldr	r3, [r4, #4]
 800628c:	4299      	cmp	r1, r3
 800628e:	dd41      	ble.n	8006314 <_printf_float+0x1ac>
 8006290:	f1aa 0a02 	sub.w	sl, sl, #2
 8006294:	fa5f fa8a 	uxtb.w	sl, sl
 8006298:	3901      	subs	r1, #1
 800629a:	4652      	mov	r2, sl
 800629c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80062a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80062a2:	f7ff ff26 	bl	80060f2 <__exponent>
 80062a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062a8:	1813      	adds	r3, r2, r0
 80062aa:	2a01      	cmp	r2, #1
 80062ac:	4681      	mov	r9, r0
 80062ae:	6123      	str	r3, [r4, #16]
 80062b0:	dc02      	bgt.n	80062b8 <_printf_float+0x150>
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	07d2      	lsls	r2, r2, #31
 80062b6:	d501      	bpl.n	80062bc <_printf_float+0x154>
 80062b8:	3301      	adds	r3, #1
 80062ba:	6123      	str	r3, [r4, #16]
 80062bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0a2      	beq.n	800620a <_printf_float+0xa2>
 80062c4:	232d      	movs	r3, #45	@ 0x2d
 80062c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062ca:	e79e      	b.n	800620a <_printf_float+0xa2>
 80062cc:	9a06      	ldr	r2, [sp, #24]
 80062ce:	2a47      	cmp	r2, #71	@ 0x47
 80062d0:	d1c2      	bne.n	8006258 <_printf_float+0xf0>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1c0      	bne.n	8006258 <_printf_float+0xf0>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e7bd      	b.n	8006256 <_printf_float+0xee>
 80062da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062de:	d9db      	bls.n	8006298 <_printf_float+0x130>
 80062e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80062e4:	d118      	bne.n	8006318 <_printf_float+0x1b0>
 80062e6:	2900      	cmp	r1, #0
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	dd0b      	ble.n	8006304 <_printf_float+0x19c>
 80062ec:	6121      	str	r1, [r4, #16]
 80062ee:	b913      	cbnz	r3, 80062f6 <_printf_float+0x18e>
 80062f0:	6822      	ldr	r2, [r4, #0]
 80062f2:	07d0      	lsls	r0, r2, #31
 80062f4:	d502      	bpl.n	80062fc <_printf_float+0x194>
 80062f6:	3301      	adds	r3, #1
 80062f8:	440b      	add	r3, r1
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80062fe:	f04f 0900 	mov.w	r9, #0
 8006302:	e7db      	b.n	80062bc <_printf_float+0x154>
 8006304:	b913      	cbnz	r3, 800630c <_printf_float+0x1a4>
 8006306:	6822      	ldr	r2, [r4, #0]
 8006308:	07d2      	lsls	r2, r2, #31
 800630a:	d501      	bpl.n	8006310 <_printf_float+0x1a8>
 800630c:	3302      	adds	r3, #2
 800630e:	e7f4      	b.n	80062fa <_printf_float+0x192>
 8006310:	2301      	movs	r3, #1
 8006312:	e7f2      	b.n	80062fa <_printf_float+0x192>
 8006314:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800631a:	4299      	cmp	r1, r3
 800631c:	db05      	blt.n	800632a <_printf_float+0x1c2>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	6121      	str	r1, [r4, #16]
 8006322:	07d8      	lsls	r0, r3, #31
 8006324:	d5ea      	bpl.n	80062fc <_printf_float+0x194>
 8006326:	1c4b      	adds	r3, r1, #1
 8006328:	e7e7      	b.n	80062fa <_printf_float+0x192>
 800632a:	2900      	cmp	r1, #0
 800632c:	bfd4      	ite	le
 800632e:	f1c1 0202 	rsble	r2, r1, #2
 8006332:	2201      	movgt	r2, #1
 8006334:	4413      	add	r3, r2
 8006336:	e7e0      	b.n	80062fa <_printf_float+0x192>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	055a      	lsls	r2, r3, #21
 800633c:	d407      	bmi.n	800634e <_printf_float+0x1e6>
 800633e:	6923      	ldr	r3, [r4, #16]
 8006340:	4642      	mov	r2, r8
 8006342:	4631      	mov	r1, r6
 8006344:	4628      	mov	r0, r5
 8006346:	47b8      	blx	r7
 8006348:	3001      	adds	r0, #1
 800634a:	d12b      	bne.n	80063a4 <_printf_float+0x23c>
 800634c:	e767      	b.n	800621e <_printf_float+0xb6>
 800634e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006352:	f240 80dd 	bls.w	8006510 <_printf_float+0x3a8>
 8006356:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800635a:	2200      	movs	r2, #0
 800635c:	2300      	movs	r3, #0
 800635e:	f7fa fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006362:	2800      	cmp	r0, #0
 8006364:	d033      	beq.n	80063ce <_printf_float+0x266>
 8006366:	4a37      	ldr	r2, [pc, #220]	@ (8006444 <_printf_float+0x2dc>)
 8006368:	2301      	movs	r3, #1
 800636a:	4631      	mov	r1, r6
 800636c:	4628      	mov	r0, r5
 800636e:	47b8      	blx	r7
 8006370:	3001      	adds	r0, #1
 8006372:	f43f af54 	beq.w	800621e <_printf_float+0xb6>
 8006376:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800637a:	4543      	cmp	r3, r8
 800637c:	db02      	blt.n	8006384 <_printf_float+0x21c>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	07d8      	lsls	r0, r3, #31
 8006382:	d50f      	bpl.n	80063a4 <_printf_float+0x23c>
 8006384:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	47b8      	blx	r7
 800638e:	3001      	adds	r0, #1
 8006390:	f43f af45 	beq.w	800621e <_printf_float+0xb6>
 8006394:	f04f 0900 	mov.w	r9, #0
 8006398:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800639c:	f104 0a1a 	add.w	sl, r4, #26
 80063a0:	45c8      	cmp	r8, r9
 80063a2:	dc09      	bgt.n	80063b8 <_printf_float+0x250>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	079b      	lsls	r3, r3, #30
 80063a8:	f100 8103 	bmi.w	80065b2 <_printf_float+0x44a>
 80063ac:	68e0      	ldr	r0, [r4, #12]
 80063ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063b0:	4298      	cmp	r0, r3
 80063b2:	bfb8      	it	lt
 80063b4:	4618      	movlt	r0, r3
 80063b6:	e734      	b.n	8006222 <_printf_float+0xba>
 80063b8:	2301      	movs	r3, #1
 80063ba:	4652      	mov	r2, sl
 80063bc:	4631      	mov	r1, r6
 80063be:	4628      	mov	r0, r5
 80063c0:	47b8      	blx	r7
 80063c2:	3001      	adds	r0, #1
 80063c4:	f43f af2b 	beq.w	800621e <_printf_float+0xb6>
 80063c8:	f109 0901 	add.w	r9, r9, #1
 80063cc:	e7e8      	b.n	80063a0 <_printf_float+0x238>
 80063ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	dc39      	bgt.n	8006448 <_printf_float+0x2e0>
 80063d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006444 <_printf_float+0x2dc>)
 80063d6:	2301      	movs	r3, #1
 80063d8:	4631      	mov	r1, r6
 80063da:	4628      	mov	r0, r5
 80063dc:	47b8      	blx	r7
 80063de:	3001      	adds	r0, #1
 80063e0:	f43f af1d 	beq.w	800621e <_printf_float+0xb6>
 80063e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80063e8:	ea59 0303 	orrs.w	r3, r9, r3
 80063ec:	d102      	bne.n	80063f4 <_printf_float+0x28c>
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	07d9      	lsls	r1, r3, #31
 80063f2:	d5d7      	bpl.n	80063a4 <_printf_float+0x23c>
 80063f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063f8:	4631      	mov	r1, r6
 80063fa:	4628      	mov	r0, r5
 80063fc:	47b8      	blx	r7
 80063fe:	3001      	adds	r0, #1
 8006400:	f43f af0d 	beq.w	800621e <_printf_float+0xb6>
 8006404:	f04f 0a00 	mov.w	sl, #0
 8006408:	f104 0b1a 	add.w	fp, r4, #26
 800640c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800640e:	425b      	negs	r3, r3
 8006410:	4553      	cmp	r3, sl
 8006412:	dc01      	bgt.n	8006418 <_printf_float+0x2b0>
 8006414:	464b      	mov	r3, r9
 8006416:	e793      	b.n	8006340 <_printf_float+0x1d8>
 8006418:	2301      	movs	r3, #1
 800641a:	465a      	mov	r2, fp
 800641c:	4631      	mov	r1, r6
 800641e:	4628      	mov	r0, r5
 8006420:	47b8      	blx	r7
 8006422:	3001      	adds	r0, #1
 8006424:	f43f aefb 	beq.w	800621e <_printf_float+0xb6>
 8006428:	f10a 0a01 	add.w	sl, sl, #1
 800642c:	e7ee      	b.n	800640c <_printf_float+0x2a4>
 800642e:	bf00      	nop
 8006430:	7fefffff 	.word	0x7fefffff
 8006434:	08008e30 	.word	0x08008e30
 8006438:	08008e34 	.word	0x08008e34
 800643c:	08008e38 	.word	0x08008e38
 8006440:	08008e3c 	.word	0x08008e3c
 8006444:	08008e40 	.word	0x08008e40
 8006448:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800644a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800644e:	4553      	cmp	r3, sl
 8006450:	bfa8      	it	ge
 8006452:	4653      	movge	r3, sl
 8006454:	2b00      	cmp	r3, #0
 8006456:	4699      	mov	r9, r3
 8006458:	dc36      	bgt.n	80064c8 <_printf_float+0x360>
 800645a:	f04f 0b00 	mov.w	fp, #0
 800645e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006462:	f104 021a 	add.w	r2, r4, #26
 8006466:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006468:	9306      	str	r3, [sp, #24]
 800646a:	eba3 0309 	sub.w	r3, r3, r9
 800646e:	455b      	cmp	r3, fp
 8006470:	dc31      	bgt.n	80064d6 <_printf_float+0x36e>
 8006472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006474:	459a      	cmp	sl, r3
 8006476:	dc3a      	bgt.n	80064ee <_printf_float+0x386>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	07da      	lsls	r2, r3, #31
 800647c:	d437      	bmi.n	80064ee <_printf_float+0x386>
 800647e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006480:	ebaa 0903 	sub.w	r9, sl, r3
 8006484:	9b06      	ldr	r3, [sp, #24]
 8006486:	ebaa 0303 	sub.w	r3, sl, r3
 800648a:	4599      	cmp	r9, r3
 800648c:	bfa8      	it	ge
 800648e:	4699      	movge	r9, r3
 8006490:	f1b9 0f00 	cmp.w	r9, #0
 8006494:	dc33      	bgt.n	80064fe <_printf_float+0x396>
 8006496:	f04f 0800 	mov.w	r8, #0
 800649a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800649e:	f104 0b1a 	add.w	fp, r4, #26
 80064a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a4:	ebaa 0303 	sub.w	r3, sl, r3
 80064a8:	eba3 0309 	sub.w	r3, r3, r9
 80064ac:	4543      	cmp	r3, r8
 80064ae:	f77f af79 	ble.w	80063a4 <_printf_float+0x23c>
 80064b2:	2301      	movs	r3, #1
 80064b4:	465a      	mov	r2, fp
 80064b6:	4631      	mov	r1, r6
 80064b8:	4628      	mov	r0, r5
 80064ba:	47b8      	blx	r7
 80064bc:	3001      	adds	r0, #1
 80064be:	f43f aeae 	beq.w	800621e <_printf_float+0xb6>
 80064c2:	f108 0801 	add.w	r8, r8, #1
 80064c6:	e7ec      	b.n	80064a2 <_printf_float+0x33a>
 80064c8:	4642      	mov	r2, r8
 80064ca:	4631      	mov	r1, r6
 80064cc:	4628      	mov	r0, r5
 80064ce:	47b8      	blx	r7
 80064d0:	3001      	adds	r0, #1
 80064d2:	d1c2      	bne.n	800645a <_printf_float+0x2f2>
 80064d4:	e6a3      	b.n	800621e <_printf_float+0xb6>
 80064d6:	2301      	movs	r3, #1
 80064d8:	4631      	mov	r1, r6
 80064da:	4628      	mov	r0, r5
 80064dc:	9206      	str	r2, [sp, #24]
 80064de:	47b8      	blx	r7
 80064e0:	3001      	adds	r0, #1
 80064e2:	f43f ae9c 	beq.w	800621e <_printf_float+0xb6>
 80064e6:	9a06      	ldr	r2, [sp, #24]
 80064e8:	f10b 0b01 	add.w	fp, fp, #1
 80064ec:	e7bb      	b.n	8006466 <_printf_float+0x2fe>
 80064ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064f2:	4631      	mov	r1, r6
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b8      	blx	r7
 80064f8:	3001      	adds	r0, #1
 80064fa:	d1c0      	bne.n	800647e <_printf_float+0x316>
 80064fc:	e68f      	b.n	800621e <_printf_float+0xb6>
 80064fe:	9a06      	ldr	r2, [sp, #24]
 8006500:	464b      	mov	r3, r9
 8006502:	4442      	add	r2, r8
 8006504:	4631      	mov	r1, r6
 8006506:	4628      	mov	r0, r5
 8006508:	47b8      	blx	r7
 800650a:	3001      	adds	r0, #1
 800650c:	d1c3      	bne.n	8006496 <_printf_float+0x32e>
 800650e:	e686      	b.n	800621e <_printf_float+0xb6>
 8006510:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006514:	f1ba 0f01 	cmp.w	sl, #1
 8006518:	dc01      	bgt.n	800651e <_printf_float+0x3b6>
 800651a:	07db      	lsls	r3, r3, #31
 800651c:	d536      	bpl.n	800658c <_printf_float+0x424>
 800651e:	2301      	movs	r3, #1
 8006520:	4642      	mov	r2, r8
 8006522:	4631      	mov	r1, r6
 8006524:	4628      	mov	r0, r5
 8006526:	47b8      	blx	r7
 8006528:	3001      	adds	r0, #1
 800652a:	f43f ae78 	beq.w	800621e <_printf_float+0xb6>
 800652e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006532:	4631      	mov	r1, r6
 8006534:	4628      	mov	r0, r5
 8006536:	47b8      	blx	r7
 8006538:	3001      	adds	r0, #1
 800653a:	f43f ae70 	beq.w	800621e <_printf_float+0xb6>
 800653e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006542:	2200      	movs	r2, #0
 8006544:	2300      	movs	r3, #0
 8006546:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800654a:	f7fa fabd 	bl	8000ac8 <__aeabi_dcmpeq>
 800654e:	b9c0      	cbnz	r0, 8006582 <_printf_float+0x41a>
 8006550:	4653      	mov	r3, sl
 8006552:	f108 0201 	add.w	r2, r8, #1
 8006556:	4631      	mov	r1, r6
 8006558:	4628      	mov	r0, r5
 800655a:	47b8      	blx	r7
 800655c:	3001      	adds	r0, #1
 800655e:	d10c      	bne.n	800657a <_printf_float+0x412>
 8006560:	e65d      	b.n	800621e <_printf_float+0xb6>
 8006562:	2301      	movs	r3, #1
 8006564:	465a      	mov	r2, fp
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	f43f ae56 	beq.w	800621e <_printf_float+0xb6>
 8006572:	f108 0801 	add.w	r8, r8, #1
 8006576:	45d0      	cmp	r8, sl
 8006578:	dbf3      	blt.n	8006562 <_printf_float+0x3fa>
 800657a:	464b      	mov	r3, r9
 800657c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006580:	e6df      	b.n	8006342 <_printf_float+0x1da>
 8006582:	f04f 0800 	mov.w	r8, #0
 8006586:	f104 0b1a 	add.w	fp, r4, #26
 800658a:	e7f4      	b.n	8006576 <_printf_float+0x40e>
 800658c:	2301      	movs	r3, #1
 800658e:	4642      	mov	r2, r8
 8006590:	e7e1      	b.n	8006556 <_printf_float+0x3ee>
 8006592:	2301      	movs	r3, #1
 8006594:	464a      	mov	r2, r9
 8006596:	4631      	mov	r1, r6
 8006598:	4628      	mov	r0, r5
 800659a:	47b8      	blx	r7
 800659c:	3001      	adds	r0, #1
 800659e:	f43f ae3e 	beq.w	800621e <_printf_float+0xb6>
 80065a2:	f108 0801 	add.w	r8, r8, #1
 80065a6:	68e3      	ldr	r3, [r4, #12]
 80065a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065aa:	1a5b      	subs	r3, r3, r1
 80065ac:	4543      	cmp	r3, r8
 80065ae:	dcf0      	bgt.n	8006592 <_printf_float+0x42a>
 80065b0:	e6fc      	b.n	80063ac <_printf_float+0x244>
 80065b2:	f04f 0800 	mov.w	r8, #0
 80065b6:	f104 0919 	add.w	r9, r4, #25
 80065ba:	e7f4      	b.n	80065a6 <_printf_float+0x43e>

080065bc <_printf_common>:
 80065bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c0:	4616      	mov	r6, r2
 80065c2:	4698      	mov	r8, r3
 80065c4:	688a      	ldr	r2, [r1, #8]
 80065c6:	690b      	ldr	r3, [r1, #16]
 80065c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065cc:	4293      	cmp	r3, r2
 80065ce:	bfb8      	it	lt
 80065d0:	4613      	movlt	r3, r2
 80065d2:	6033      	str	r3, [r6, #0]
 80065d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065d8:	4607      	mov	r7, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	b10a      	cbz	r2, 80065e2 <_printf_common+0x26>
 80065de:	3301      	adds	r3, #1
 80065e0:	6033      	str	r3, [r6, #0]
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	0699      	lsls	r1, r3, #26
 80065e6:	bf42      	ittt	mi
 80065e8:	6833      	ldrmi	r3, [r6, #0]
 80065ea:	3302      	addmi	r3, #2
 80065ec:	6033      	strmi	r3, [r6, #0]
 80065ee:	6825      	ldr	r5, [r4, #0]
 80065f0:	f015 0506 	ands.w	r5, r5, #6
 80065f4:	d106      	bne.n	8006604 <_printf_common+0x48>
 80065f6:	f104 0a19 	add.w	sl, r4, #25
 80065fa:	68e3      	ldr	r3, [r4, #12]
 80065fc:	6832      	ldr	r2, [r6, #0]
 80065fe:	1a9b      	subs	r3, r3, r2
 8006600:	42ab      	cmp	r3, r5
 8006602:	dc26      	bgt.n	8006652 <_printf_common+0x96>
 8006604:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006608:	6822      	ldr	r2, [r4, #0]
 800660a:	3b00      	subs	r3, #0
 800660c:	bf18      	it	ne
 800660e:	2301      	movne	r3, #1
 8006610:	0692      	lsls	r2, r2, #26
 8006612:	d42b      	bmi.n	800666c <_printf_common+0xb0>
 8006614:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006618:	4641      	mov	r1, r8
 800661a:	4638      	mov	r0, r7
 800661c:	47c8      	blx	r9
 800661e:	3001      	adds	r0, #1
 8006620:	d01e      	beq.n	8006660 <_printf_common+0xa4>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	6922      	ldr	r2, [r4, #16]
 8006626:	f003 0306 	and.w	r3, r3, #6
 800662a:	2b04      	cmp	r3, #4
 800662c:	bf02      	ittt	eq
 800662e:	68e5      	ldreq	r5, [r4, #12]
 8006630:	6833      	ldreq	r3, [r6, #0]
 8006632:	1aed      	subeq	r5, r5, r3
 8006634:	68a3      	ldr	r3, [r4, #8]
 8006636:	bf0c      	ite	eq
 8006638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800663c:	2500      	movne	r5, #0
 800663e:	4293      	cmp	r3, r2
 8006640:	bfc4      	itt	gt
 8006642:	1a9b      	subgt	r3, r3, r2
 8006644:	18ed      	addgt	r5, r5, r3
 8006646:	2600      	movs	r6, #0
 8006648:	341a      	adds	r4, #26
 800664a:	42b5      	cmp	r5, r6
 800664c:	d11a      	bne.n	8006684 <_printf_common+0xc8>
 800664e:	2000      	movs	r0, #0
 8006650:	e008      	b.n	8006664 <_printf_common+0xa8>
 8006652:	2301      	movs	r3, #1
 8006654:	4652      	mov	r2, sl
 8006656:	4641      	mov	r1, r8
 8006658:	4638      	mov	r0, r7
 800665a:	47c8      	blx	r9
 800665c:	3001      	adds	r0, #1
 800665e:	d103      	bne.n	8006668 <_printf_common+0xac>
 8006660:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006668:	3501      	adds	r5, #1
 800666a:	e7c6      	b.n	80065fa <_printf_common+0x3e>
 800666c:	18e1      	adds	r1, r4, r3
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	2030      	movs	r0, #48	@ 0x30
 8006672:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006676:	4422      	add	r2, r4
 8006678:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800667c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006680:	3302      	adds	r3, #2
 8006682:	e7c7      	b.n	8006614 <_printf_common+0x58>
 8006684:	2301      	movs	r3, #1
 8006686:	4622      	mov	r2, r4
 8006688:	4641      	mov	r1, r8
 800668a:	4638      	mov	r0, r7
 800668c:	47c8      	blx	r9
 800668e:	3001      	adds	r0, #1
 8006690:	d0e6      	beq.n	8006660 <_printf_common+0xa4>
 8006692:	3601      	adds	r6, #1
 8006694:	e7d9      	b.n	800664a <_printf_common+0x8e>
	...

08006698 <_printf_i>:
 8006698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800669c:	7e0f      	ldrb	r7, [r1, #24]
 800669e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066a0:	2f78      	cmp	r7, #120	@ 0x78
 80066a2:	4691      	mov	r9, r2
 80066a4:	4680      	mov	r8, r0
 80066a6:	460c      	mov	r4, r1
 80066a8:	469a      	mov	sl, r3
 80066aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066ae:	d807      	bhi.n	80066c0 <_printf_i+0x28>
 80066b0:	2f62      	cmp	r7, #98	@ 0x62
 80066b2:	d80a      	bhi.n	80066ca <_printf_i+0x32>
 80066b4:	2f00      	cmp	r7, #0
 80066b6:	f000 80d2 	beq.w	800685e <_printf_i+0x1c6>
 80066ba:	2f58      	cmp	r7, #88	@ 0x58
 80066bc:	f000 80b9 	beq.w	8006832 <_printf_i+0x19a>
 80066c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066c8:	e03a      	b.n	8006740 <_printf_i+0xa8>
 80066ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066ce:	2b15      	cmp	r3, #21
 80066d0:	d8f6      	bhi.n	80066c0 <_printf_i+0x28>
 80066d2:	a101      	add	r1, pc, #4	@ (adr r1, 80066d8 <_printf_i+0x40>)
 80066d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066d8:	08006731 	.word	0x08006731
 80066dc:	08006745 	.word	0x08006745
 80066e0:	080066c1 	.word	0x080066c1
 80066e4:	080066c1 	.word	0x080066c1
 80066e8:	080066c1 	.word	0x080066c1
 80066ec:	080066c1 	.word	0x080066c1
 80066f0:	08006745 	.word	0x08006745
 80066f4:	080066c1 	.word	0x080066c1
 80066f8:	080066c1 	.word	0x080066c1
 80066fc:	080066c1 	.word	0x080066c1
 8006700:	080066c1 	.word	0x080066c1
 8006704:	08006845 	.word	0x08006845
 8006708:	0800676f 	.word	0x0800676f
 800670c:	080067ff 	.word	0x080067ff
 8006710:	080066c1 	.word	0x080066c1
 8006714:	080066c1 	.word	0x080066c1
 8006718:	08006867 	.word	0x08006867
 800671c:	080066c1 	.word	0x080066c1
 8006720:	0800676f 	.word	0x0800676f
 8006724:	080066c1 	.word	0x080066c1
 8006728:	080066c1 	.word	0x080066c1
 800672c:	08006807 	.word	0x08006807
 8006730:	6833      	ldr	r3, [r6, #0]
 8006732:	1d1a      	adds	r2, r3, #4
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6032      	str	r2, [r6, #0]
 8006738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800673c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006740:	2301      	movs	r3, #1
 8006742:	e09d      	b.n	8006880 <_printf_i+0x1e8>
 8006744:	6833      	ldr	r3, [r6, #0]
 8006746:	6820      	ldr	r0, [r4, #0]
 8006748:	1d19      	adds	r1, r3, #4
 800674a:	6031      	str	r1, [r6, #0]
 800674c:	0606      	lsls	r6, r0, #24
 800674e:	d501      	bpl.n	8006754 <_printf_i+0xbc>
 8006750:	681d      	ldr	r5, [r3, #0]
 8006752:	e003      	b.n	800675c <_printf_i+0xc4>
 8006754:	0645      	lsls	r5, r0, #25
 8006756:	d5fb      	bpl.n	8006750 <_printf_i+0xb8>
 8006758:	f9b3 5000 	ldrsh.w	r5, [r3]
 800675c:	2d00      	cmp	r5, #0
 800675e:	da03      	bge.n	8006768 <_printf_i+0xd0>
 8006760:	232d      	movs	r3, #45	@ 0x2d
 8006762:	426d      	negs	r5, r5
 8006764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006768:	4859      	ldr	r0, [pc, #356]	@ (80068d0 <_printf_i+0x238>)
 800676a:	230a      	movs	r3, #10
 800676c:	e011      	b.n	8006792 <_printf_i+0xfa>
 800676e:	6821      	ldr	r1, [r4, #0]
 8006770:	6833      	ldr	r3, [r6, #0]
 8006772:	0608      	lsls	r0, r1, #24
 8006774:	f853 5b04 	ldr.w	r5, [r3], #4
 8006778:	d402      	bmi.n	8006780 <_printf_i+0xe8>
 800677a:	0649      	lsls	r1, r1, #25
 800677c:	bf48      	it	mi
 800677e:	b2ad      	uxthmi	r5, r5
 8006780:	2f6f      	cmp	r7, #111	@ 0x6f
 8006782:	4853      	ldr	r0, [pc, #332]	@ (80068d0 <_printf_i+0x238>)
 8006784:	6033      	str	r3, [r6, #0]
 8006786:	bf14      	ite	ne
 8006788:	230a      	movne	r3, #10
 800678a:	2308      	moveq	r3, #8
 800678c:	2100      	movs	r1, #0
 800678e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006792:	6866      	ldr	r6, [r4, #4]
 8006794:	60a6      	str	r6, [r4, #8]
 8006796:	2e00      	cmp	r6, #0
 8006798:	bfa2      	ittt	ge
 800679a:	6821      	ldrge	r1, [r4, #0]
 800679c:	f021 0104 	bicge.w	r1, r1, #4
 80067a0:	6021      	strge	r1, [r4, #0]
 80067a2:	b90d      	cbnz	r5, 80067a8 <_printf_i+0x110>
 80067a4:	2e00      	cmp	r6, #0
 80067a6:	d04b      	beq.n	8006840 <_printf_i+0x1a8>
 80067a8:	4616      	mov	r6, r2
 80067aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80067ae:	fb03 5711 	mls	r7, r3, r1, r5
 80067b2:	5dc7      	ldrb	r7, [r0, r7]
 80067b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067b8:	462f      	mov	r7, r5
 80067ba:	42bb      	cmp	r3, r7
 80067bc:	460d      	mov	r5, r1
 80067be:	d9f4      	bls.n	80067aa <_printf_i+0x112>
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d10b      	bne.n	80067dc <_printf_i+0x144>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	07df      	lsls	r7, r3, #31
 80067c8:	d508      	bpl.n	80067dc <_printf_i+0x144>
 80067ca:	6923      	ldr	r3, [r4, #16]
 80067cc:	6861      	ldr	r1, [r4, #4]
 80067ce:	4299      	cmp	r1, r3
 80067d0:	bfde      	ittt	le
 80067d2:	2330      	movle	r3, #48	@ 0x30
 80067d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067d8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80067dc:	1b92      	subs	r2, r2, r6
 80067de:	6122      	str	r2, [r4, #16]
 80067e0:	f8cd a000 	str.w	sl, [sp]
 80067e4:	464b      	mov	r3, r9
 80067e6:	aa03      	add	r2, sp, #12
 80067e8:	4621      	mov	r1, r4
 80067ea:	4640      	mov	r0, r8
 80067ec:	f7ff fee6 	bl	80065bc <_printf_common>
 80067f0:	3001      	adds	r0, #1
 80067f2:	d14a      	bne.n	800688a <_printf_i+0x1f2>
 80067f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067f8:	b004      	add	sp, #16
 80067fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	f043 0320 	orr.w	r3, r3, #32
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	4833      	ldr	r0, [pc, #204]	@ (80068d4 <_printf_i+0x23c>)
 8006808:	2778      	movs	r7, #120	@ 0x78
 800680a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	6831      	ldr	r1, [r6, #0]
 8006812:	061f      	lsls	r7, r3, #24
 8006814:	f851 5b04 	ldr.w	r5, [r1], #4
 8006818:	d402      	bmi.n	8006820 <_printf_i+0x188>
 800681a:	065f      	lsls	r7, r3, #25
 800681c:	bf48      	it	mi
 800681e:	b2ad      	uxthmi	r5, r5
 8006820:	6031      	str	r1, [r6, #0]
 8006822:	07d9      	lsls	r1, r3, #31
 8006824:	bf44      	itt	mi
 8006826:	f043 0320 	orrmi.w	r3, r3, #32
 800682a:	6023      	strmi	r3, [r4, #0]
 800682c:	b11d      	cbz	r5, 8006836 <_printf_i+0x19e>
 800682e:	2310      	movs	r3, #16
 8006830:	e7ac      	b.n	800678c <_printf_i+0xf4>
 8006832:	4827      	ldr	r0, [pc, #156]	@ (80068d0 <_printf_i+0x238>)
 8006834:	e7e9      	b.n	800680a <_printf_i+0x172>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	f023 0320 	bic.w	r3, r3, #32
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	e7f6      	b.n	800682e <_printf_i+0x196>
 8006840:	4616      	mov	r6, r2
 8006842:	e7bd      	b.n	80067c0 <_printf_i+0x128>
 8006844:	6833      	ldr	r3, [r6, #0]
 8006846:	6825      	ldr	r5, [r4, #0]
 8006848:	6961      	ldr	r1, [r4, #20]
 800684a:	1d18      	adds	r0, r3, #4
 800684c:	6030      	str	r0, [r6, #0]
 800684e:	062e      	lsls	r6, r5, #24
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	d501      	bpl.n	8006858 <_printf_i+0x1c0>
 8006854:	6019      	str	r1, [r3, #0]
 8006856:	e002      	b.n	800685e <_printf_i+0x1c6>
 8006858:	0668      	lsls	r0, r5, #25
 800685a:	d5fb      	bpl.n	8006854 <_printf_i+0x1bc>
 800685c:	8019      	strh	r1, [r3, #0]
 800685e:	2300      	movs	r3, #0
 8006860:	6123      	str	r3, [r4, #16]
 8006862:	4616      	mov	r6, r2
 8006864:	e7bc      	b.n	80067e0 <_printf_i+0x148>
 8006866:	6833      	ldr	r3, [r6, #0]
 8006868:	1d1a      	adds	r2, r3, #4
 800686a:	6032      	str	r2, [r6, #0]
 800686c:	681e      	ldr	r6, [r3, #0]
 800686e:	6862      	ldr	r2, [r4, #4]
 8006870:	2100      	movs	r1, #0
 8006872:	4630      	mov	r0, r6
 8006874:	f7f9 fcac 	bl	80001d0 <memchr>
 8006878:	b108      	cbz	r0, 800687e <_printf_i+0x1e6>
 800687a:	1b80      	subs	r0, r0, r6
 800687c:	6060      	str	r0, [r4, #4]
 800687e:	6863      	ldr	r3, [r4, #4]
 8006880:	6123      	str	r3, [r4, #16]
 8006882:	2300      	movs	r3, #0
 8006884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006888:	e7aa      	b.n	80067e0 <_printf_i+0x148>
 800688a:	6923      	ldr	r3, [r4, #16]
 800688c:	4632      	mov	r2, r6
 800688e:	4649      	mov	r1, r9
 8006890:	4640      	mov	r0, r8
 8006892:	47d0      	blx	sl
 8006894:	3001      	adds	r0, #1
 8006896:	d0ad      	beq.n	80067f4 <_printf_i+0x15c>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	079b      	lsls	r3, r3, #30
 800689c:	d413      	bmi.n	80068c6 <_printf_i+0x22e>
 800689e:	68e0      	ldr	r0, [r4, #12]
 80068a0:	9b03      	ldr	r3, [sp, #12]
 80068a2:	4298      	cmp	r0, r3
 80068a4:	bfb8      	it	lt
 80068a6:	4618      	movlt	r0, r3
 80068a8:	e7a6      	b.n	80067f8 <_printf_i+0x160>
 80068aa:	2301      	movs	r3, #1
 80068ac:	4632      	mov	r2, r6
 80068ae:	4649      	mov	r1, r9
 80068b0:	4640      	mov	r0, r8
 80068b2:	47d0      	blx	sl
 80068b4:	3001      	adds	r0, #1
 80068b6:	d09d      	beq.n	80067f4 <_printf_i+0x15c>
 80068b8:	3501      	adds	r5, #1
 80068ba:	68e3      	ldr	r3, [r4, #12]
 80068bc:	9903      	ldr	r1, [sp, #12]
 80068be:	1a5b      	subs	r3, r3, r1
 80068c0:	42ab      	cmp	r3, r5
 80068c2:	dcf2      	bgt.n	80068aa <_printf_i+0x212>
 80068c4:	e7eb      	b.n	800689e <_printf_i+0x206>
 80068c6:	2500      	movs	r5, #0
 80068c8:	f104 0619 	add.w	r6, r4, #25
 80068cc:	e7f5      	b.n	80068ba <_printf_i+0x222>
 80068ce:	bf00      	nop
 80068d0:	08008e42 	.word	0x08008e42
 80068d4:	08008e53 	.word	0x08008e53

080068d8 <std>:
 80068d8:	2300      	movs	r3, #0
 80068da:	b510      	push	{r4, lr}
 80068dc:	4604      	mov	r4, r0
 80068de:	e9c0 3300 	strd	r3, r3, [r0]
 80068e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068e6:	6083      	str	r3, [r0, #8]
 80068e8:	8181      	strh	r1, [r0, #12]
 80068ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80068ec:	81c2      	strh	r2, [r0, #14]
 80068ee:	6183      	str	r3, [r0, #24]
 80068f0:	4619      	mov	r1, r3
 80068f2:	2208      	movs	r2, #8
 80068f4:	305c      	adds	r0, #92	@ 0x5c
 80068f6:	f000 f928 	bl	8006b4a <memset>
 80068fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006930 <std+0x58>)
 80068fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80068fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006934 <std+0x5c>)
 8006900:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006902:	4b0d      	ldr	r3, [pc, #52]	@ (8006938 <std+0x60>)
 8006904:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006906:	4b0d      	ldr	r3, [pc, #52]	@ (800693c <std+0x64>)
 8006908:	6323      	str	r3, [r4, #48]	@ 0x30
 800690a:	4b0d      	ldr	r3, [pc, #52]	@ (8006940 <std+0x68>)
 800690c:	6224      	str	r4, [r4, #32]
 800690e:	429c      	cmp	r4, r3
 8006910:	d006      	beq.n	8006920 <std+0x48>
 8006912:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006916:	4294      	cmp	r4, r2
 8006918:	d002      	beq.n	8006920 <std+0x48>
 800691a:	33d0      	adds	r3, #208	@ 0xd0
 800691c:	429c      	cmp	r4, r3
 800691e:	d105      	bne.n	800692c <std+0x54>
 8006920:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006928:	f000 b9e2 	b.w	8006cf0 <__retarget_lock_init_recursive>
 800692c:	bd10      	pop	{r4, pc}
 800692e:	bf00      	nop
 8006930:	08006ac5 	.word	0x08006ac5
 8006934:	08006ae7 	.word	0x08006ae7
 8006938:	08006b1f 	.word	0x08006b1f
 800693c:	08006b43 	.word	0x08006b43
 8006940:	200042b0 	.word	0x200042b0

08006944 <stdio_exit_handler>:
 8006944:	4a02      	ldr	r2, [pc, #8]	@ (8006950 <stdio_exit_handler+0xc>)
 8006946:	4903      	ldr	r1, [pc, #12]	@ (8006954 <stdio_exit_handler+0x10>)
 8006948:	4803      	ldr	r0, [pc, #12]	@ (8006958 <stdio_exit_handler+0x14>)
 800694a:	f000 b869 	b.w	8006a20 <_fwalk_sglue>
 800694e:	bf00      	nop
 8006950:	20000010 	.word	0x20000010
 8006954:	0800866d 	.word	0x0800866d
 8006958:	20000020 	.word	0x20000020

0800695c <cleanup_stdio>:
 800695c:	6841      	ldr	r1, [r0, #4]
 800695e:	4b0c      	ldr	r3, [pc, #48]	@ (8006990 <cleanup_stdio+0x34>)
 8006960:	4299      	cmp	r1, r3
 8006962:	b510      	push	{r4, lr}
 8006964:	4604      	mov	r4, r0
 8006966:	d001      	beq.n	800696c <cleanup_stdio+0x10>
 8006968:	f001 fe80 	bl	800866c <_fflush_r>
 800696c:	68a1      	ldr	r1, [r4, #8]
 800696e:	4b09      	ldr	r3, [pc, #36]	@ (8006994 <cleanup_stdio+0x38>)
 8006970:	4299      	cmp	r1, r3
 8006972:	d002      	beq.n	800697a <cleanup_stdio+0x1e>
 8006974:	4620      	mov	r0, r4
 8006976:	f001 fe79 	bl	800866c <_fflush_r>
 800697a:	68e1      	ldr	r1, [r4, #12]
 800697c:	4b06      	ldr	r3, [pc, #24]	@ (8006998 <cleanup_stdio+0x3c>)
 800697e:	4299      	cmp	r1, r3
 8006980:	d004      	beq.n	800698c <cleanup_stdio+0x30>
 8006982:	4620      	mov	r0, r4
 8006984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006988:	f001 be70 	b.w	800866c <_fflush_r>
 800698c:	bd10      	pop	{r4, pc}
 800698e:	bf00      	nop
 8006990:	200042b0 	.word	0x200042b0
 8006994:	20004318 	.word	0x20004318
 8006998:	20004380 	.word	0x20004380

0800699c <global_stdio_init.part.0>:
 800699c:	b510      	push	{r4, lr}
 800699e:	4b0b      	ldr	r3, [pc, #44]	@ (80069cc <global_stdio_init.part.0+0x30>)
 80069a0:	4c0b      	ldr	r4, [pc, #44]	@ (80069d0 <global_stdio_init.part.0+0x34>)
 80069a2:	4a0c      	ldr	r2, [pc, #48]	@ (80069d4 <global_stdio_init.part.0+0x38>)
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	4620      	mov	r0, r4
 80069a8:	2200      	movs	r2, #0
 80069aa:	2104      	movs	r1, #4
 80069ac:	f7ff ff94 	bl	80068d8 <std>
 80069b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069b4:	2201      	movs	r2, #1
 80069b6:	2109      	movs	r1, #9
 80069b8:	f7ff ff8e 	bl	80068d8 <std>
 80069bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069c0:	2202      	movs	r2, #2
 80069c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c6:	2112      	movs	r1, #18
 80069c8:	f7ff bf86 	b.w	80068d8 <std>
 80069cc:	200043e8 	.word	0x200043e8
 80069d0:	200042b0 	.word	0x200042b0
 80069d4:	08006945 	.word	0x08006945

080069d8 <__sfp_lock_acquire>:
 80069d8:	4801      	ldr	r0, [pc, #4]	@ (80069e0 <__sfp_lock_acquire+0x8>)
 80069da:	f000 b98a 	b.w	8006cf2 <__retarget_lock_acquire_recursive>
 80069de:	bf00      	nop
 80069e0:	200043f1 	.word	0x200043f1

080069e4 <__sfp_lock_release>:
 80069e4:	4801      	ldr	r0, [pc, #4]	@ (80069ec <__sfp_lock_release+0x8>)
 80069e6:	f000 b985 	b.w	8006cf4 <__retarget_lock_release_recursive>
 80069ea:	bf00      	nop
 80069ec:	200043f1 	.word	0x200043f1

080069f0 <__sinit>:
 80069f0:	b510      	push	{r4, lr}
 80069f2:	4604      	mov	r4, r0
 80069f4:	f7ff fff0 	bl	80069d8 <__sfp_lock_acquire>
 80069f8:	6a23      	ldr	r3, [r4, #32]
 80069fa:	b11b      	cbz	r3, 8006a04 <__sinit+0x14>
 80069fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a00:	f7ff bff0 	b.w	80069e4 <__sfp_lock_release>
 8006a04:	4b04      	ldr	r3, [pc, #16]	@ (8006a18 <__sinit+0x28>)
 8006a06:	6223      	str	r3, [r4, #32]
 8006a08:	4b04      	ldr	r3, [pc, #16]	@ (8006a1c <__sinit+0x2c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1f5      	bne.n	80069fc <__sinit+0xc>
 8006a10:	f7ff ffc4 	bl	800699c <global_stdio_init.part.0>
 8006a14:	e7f2      	b.n	80069fc <__sinit+0xc>
 8006a16:	bf00      	nop
 8006a18:	0800695d 	.word	0x0800695d
 8006a1c:	200043e8 	.word	0x200043e8

08006a20 <_fwalk_sglue>:
 8006a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a24:	4607      	mov	r7, r0
 8006a26:	4688      	mov	r8, r1
 8006a28:	4614      	mov	r4, r2
 8006a2a:	2600      	movs	r6, #0
 8006a2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a30:	f1b9 0901 	subs.w	r9, r9, #1
 8006a34:	d505      	bpl.n	8006a42 <_fwalk_sglue+0x22>
 8006a36:	6824      	ldr	r4, [r4, #0]
 8006a38:	2c00      	cmp	r4, #0
 8006a3a:	d1f7      	bne.n	8006a2c <_fwalk_sglue+0xc>
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a42:	89ab      	ldrh	r3, [r5, #12]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d907      	bls.n	8006a58 <_fwalk_sglue+0x38>
 8006a48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	d003      	beq.n	8006a58 <_fwalk_sglue+0x38>
 8006a50:	4629      	mov	r1, r5
 8006a52:	4638      	mov	r0, r7
 8006a54:	47c0      	blx	r8
 8006a56:	4306      	orrs	r6, r0
 8006a58:	3568      	adds	r5, #104	@ 0x68
 8006a5a:	e7e9      	b.n	8006a30 <_fwalk_sglue+0x10>

08006a5c <sniprintf>:
 8006a5c:	b40c      	push	{r2, r3}
 8006a5e:	b530      	push	{r4, r5, lr}
 8006a60:	4b17      	ldr	r3, [pc, #92]	@ (8006ac0 <sniprintf+0x64>)
 8006a62:	1e0c      	subs	r4, r1, #0
 8006a64:	681d      	ldr	r5, [r3, #0]
 8006a66:	b09d      	sub	sp, #116	@ 0x74
 8006a68:	da08      	bge.n	8006a7c <sniprintf+0x20>
 8006a6a:	238b      	movs	r3, #139	@ 0x8b
 8006a6c:	602b      	str	r3, [r5, #0]
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a72:	b01d      	add	sp, #116	@ 0x74
 8006a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a78:	b002      	add	sp, #8
 8006a7a:	4770      	bx	lr
 8006a7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006a80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006a84:	bf14      	ite	ne
 8006a86:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006a8a:	4623      	moveq	r3, r4
 8006a8c:	9304      	str	r3, [sp, #16]
 8006a8e:	9307      	str	r3, [sp, #28]
 8006a90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a94:	9002      	str	r0, [sp, #8]
 8006a96:	9006      	str	r0, [sp, #24]
 8006a98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a9c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006a9e:	ab21      	add	r3, sp, #132	@ 0x84
 8006aa0:	a902      	add	r1, sp, #8
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	f001 fc61 	bl	800836c <_svfiprintf_r>
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	bfbc      	itt	lt
 8006aae:	238b      	movlt	r3, #139	@ 0x8b
 8006ab0:	602b      	strlt	r3, [r5, #0]
 8006ab2:	2c00      	cmp	r4, #0
 8006ab4:	d0dd      	beq.n	8006a72 <sniprintf+0x16>
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	e7d9      	b.n	8006a72 <sniprintf+0x16>
 8006abe:	bf00      	nop
 8006ac0:	2000001c 	.word	0x2000001c

08006ac4 <__sread>:
 8006ac4:	b510      	push	{r4, lr}
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006acc:	f000 f8c2 	bl	8006c54 <_read_r>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	bfab      	itete	ge
 8006ad4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ad8:	181b      	addge	r3, r3, r0
 8006ada:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ade:	bfac      	ite	ge
 8006ae0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ae2:	81a3      	strhlt	r3, [r4, #12]
 8006ae4:	bd10      	pop	{r4, pc}

08006ae6 <__swrite>:
 8006ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aea:	461f      	mov	r7, r3
 8006aec:	898b      	ldrh	r3, [r1, #12]
 8006aee:	05db      	lsls	r3, r3, #23
 8006af0:	4605      	mov	r5, r0
 8006af2:	460c      	mov	r4, r1
 8006af4:	4616      	mov	r6, r2
 8006af6:	d505      	bpl.n	8006b04 <__swrite+0x1e>
 8006af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afc:	2302      	movs	r3, #2
 8006afe:	2200      	movs	r2, #0
 8006b00:	f000 f896 	bl	8006c30 <_lseek_r>
 8006b04:	89a3      	ldrh	r3, [r4, #12]
 8006b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b0e:	81a3      	strh	r3, [r4, #12]
 8006b10:	4632      	mov	r2, r6
 8006b12:	463b      	mov	r3, r7
 8006b14:	4628      	mov	r0, r5
 8006b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1a:	f000 b8ad 	b.w	8006c78 <_write_r>

08006b1e <__sseek>:
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	460c      	mov	r4, r1
 8006b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b26:	f000 f883 	bl	8006c30 <_lseek_r>
 8006b2a:	1c43      	adds	r3, r0, #1
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	bf15      	itete	ne
 8006b30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b3a:	81a3      	strheq	r3, [r4, #12]
 8006b3c:	bf18      	it	ne
 8006b3e:	81a3      	strhne	r3, [r4, #12]
 8006b40:	bd10      	pop	{r4, pc}

08006b42 <__sclose>:
 8006b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b46:	f000 b80d 	b.w	8006b64 <_close_r>

08006b4a <memset>:
 8006b4a:	4402      	add	r2, r0
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d100      	bne.n	8006b54 <memset+0xa>
 8006b52:	4770      	bx	lr
 8006b54:	f803 1b01 	strb.w	r1, [r3], #1
 8006b58:	e7f9      	b.n	8006b4e <memset+0x4>
	...

08006b5c <_localeconv_r>:
 8006b5c:	4800      	ldr	r0, [pc, #0]	@ (8006b60 <_localeconv_r+0x4>)
 8006b5e:	4770      	bx	lr
 8006b60:	2000015c 	.word	0x2000015c

08006b64 <_close_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4d06      	ldr	r5, [pc, #24]	@ (8006b80 <_close_r+0x1c>)
 8006b68:	2300      	movs	r3, #0
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	4608      	mov	r0, r1
 8006b6e:	602b      	str	r3, [r5, #0]
 8006b70:	f7fa fe20 	bl	80017b4 <_close>
 8006b74:	1c43      	adds	r3, r0, #1
 8006b76:	d102      	bne.n	8006b7e <_close_r+0x1a>
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	b103      	cbz	r3, 8006b7e <_close_r+0x1a>
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	200043ec 	.word	0x200043ec

08006b84 <_reclaim_reent>:
 8006b84:	4b29      	ldr	r3, [pc, #164]	@ (8006c2c <_reclaim_reent+0xa8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4283      	cmp	r3, r0
 8006b8a:	b570      	push	{r4, r5, r6, lr}
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	d04b      	beq.n	8006c28 <_reclaim_reent+0xa4>
 8006b90:	69c3      	ldr	r3, [r0, #28]
 8006b92:	b1ab      	cbz	r3, 8006bc0 <_reclaim_reent+0x3c>
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	b16b      	cbz	r3, 8006bb4 <_reclaim_reent+0x30>
 8006b98:	2500      	movs	r5, #0
 8006b9a:	69e3      	ldr	r3, [r4, #28]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	5959      	ldr	r1, [r3, r5]
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	d13b      	bne.n	8006c1c <_reclaim_reent+0x98>
 8006ba4:	3504      	adds	r5, #4
 8006ba6:	2d80      	cmp	r5, #128	@ 0x80
 8006ba8:	d1f7      	bne.n	8006b9a <_reclaim_reent+0x16>
 8006baa:	69e3      	ldr	r3, [r4, #28]
 8006bac:	4620      	mov	r0, r4
 8006bae:	68d9      	ldr	r1, [r3, #12]
 8006bb0:	f000 fefe 	bl	80079b0 <_free_r>
 8006bb4:	69e3      	ldr	r3, [r4, #28]
 8006bb6:	6819      	ldr	r1, [r3, #0]
 8006bb8:	b111      	cbz	r1, 8006bc0 <_reclaim_reent+0x3c>
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 fef8 	bl	80079b0 <_free_r>
 8006bc0:	6961      	ldr	r1, [r4, #20]
 8006bc2:	b111      	cbz	r1, 8006bca <_reclaim_reent+0x46>
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 fef3 	bl	80079b0 <_free_r>
 8006bca:	69e1      	ldr	r1, [r4, #28]
 8006bcc:	b111      	cbz	r1, 8006bd4 <_reclaim_reent+0x50>
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 feee 	bl	80079b0 <_free_r>
 8006bd4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006bd6:	b111      	cbz	r1, 8006bde <_reclaim_reent+0x5a>
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f000 fee9 	bl	80079b0 <_free_r>
 8006bde:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006be0:	b111      	cbz	r1, 8006be8 <_reclaim_reent+0x64>
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 fee4 	bl	80079b0 <_free_r>
 8006be8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006bea:	b111      	cbz	r1, 8006bf2 <_reclaim_reent+0x6e>
 8006bec:	4620      	mov	r0, r4
 8006bee:	f000 fedf 	bl	80079b0 <_free_r>
 8006bf2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006bf4:	b111      	cbz	r1, 8006bfc <_reclaim_reent+0x78>
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f000 feda 	bl	80079b0 <_free_r>
 8006bfc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006bfe:	b111      	cbz	r1, 8006c06 <_reclaim_reent+0x82>
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 fed5 	bl	80079b0 <_free_r>
 8006c06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006c08:	b111      	cbz	r1, 8006c10 <_reclaim_reent+0x8c>
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f000 fed0 	bl	80079b0 <_free_r>
 8006c10:	6a23      	ldr	r3, [r4, #32]
 8006c12:	b14b      	cbz	r3, 8006c28 <_reclaim_reent+0xa4>
 8006c14:	4620      	mov	r0, r4
 8006c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c1a:	4718      	bx	r3
 8006c1c:	680e      	ldr	r6, [r1, #0]
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f000 fec6 	bl	80079b0 <_free_r>
 8006c24:	4631      	mov	r1, r6
 8006c26:	e7bb      	b.n	8006ba0 <_reclaim_reent+0x1c>
 8006c28:	bd70      	pop	{r4, r5, r6, pc}
 8006c2a:	bf00      	nop
 8006c2c:	2000001c 	.word	0x2000001c

08006c30 <_lseek_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	4d07      	ldr	r5, [pc, #28]	@ (8006c50 <_lseek_r+0x20>)
 8006c34:	4604      	mov	r4, r0
 8006c36:	4608      	mov	r0, r1
 8006c38:	4611      	mov	r1, r2
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	602a      	str	r2, [r5, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f7fa fddf 	bl	8001802 <_lseek>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d102      	bne.n	8006c4e <_lseek_r+0x1e>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	b103      	cbz	r3, 8006c4e <_lseek_r+0x1e>
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	200043ec 	.word	0x200043ec

08006c54 <_read_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	4d07      	ldr	r5, [pc, #28]	@ (8006c74 <_read_r+0x20>)
 8006c58:	4604      	mov	r4, r0
 8006c5a:	4608      	mov	r0, r1
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	2200      	movs	r2, #0
 8006c60:	602a      	str	r2, [r5, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	f7fa fd6d 	bl	8001742 <_read>
 8006c68:	1c43      	adds	r3, r0, #1
 8006c6a:	d102      	bne.n	8006c72 <_read_r+0x1e>
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	b103      	cbz	r3, 8006c72 <_read_r+0x1e>
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	200043ec 	.word	0x200043ec

08006c78 <_write_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4d07      	ldr	r5, [pc, #28]	@ (8006c98 <_write_r+0x20>)
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	4608      	mov	r0, r1
 8006c80:	4611      	mov	r1, r2
 8006c82:	2200      	movs	r2, #0
 8006c84:	602a      	str	r2, [r5, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	f7fa fd78 	bl	800177c <_write>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	d102      	bne.n	8006c96 <_write_r+0x1e>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	b103      	cbz	r3, 8006c96 <_write_r+0x1e>
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	200043ec 	.word	0x200043ec

08006c9c <__errno>:
 8006c9c:	4b01      	ldr	r3, [pc, #4]	@ (8006ca4 <__errno+0x8>)
 8006c9e:	6818      	ldr	r0, [r3, #0]
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	2000001c 	.word	0x2000001c

08006ca8 <__libc_init_array>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	4d0d      	ldr	r5, [pc, #52]	@ (8006ce0 <__libc_init_array+0x38>)
 8006cac:	4c0d      	ldr	r4, [pc, #52]	@ (8006ce4 <__libc_init_array+0x3c>)
 8006cae:	1b64      	subs	r4, r4, r5
 8006cb0:	10a4      	asrs	r4, r4, #2
 8006cb2:	2600      	movs	r6, #0
 8006cb4:	42a6      	cmp	r6, r4
 8006cb6:	d109      	bne.n	8006ccc <__libc_init_array+0x24>
 8006cb8:	4d0b      	ldr	r5, [pc, #44]	@ (8006ce8 <__libc_init_array+0x40>)
 8006cba:	4c0c      	ldr	r4, [pc, #48]	@ (8006cec <__libc_init_array+0x44>)
 8006cbc:	f002 f866 	bl	8008d8c <_init>
 8006cc0:	1b64      	subs	r4, r4, r5
 8006cc2:	10a4      	asrs	r4, r4, #2
 8006cc4:	2600      	movs	r6, #0
 8006cc6:	42a6      	cmp	r6, r4
 8006cc8:	d105      	bne.n	8006cd6 <__libc_init_array+0x2e>
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd0:	4798      	blx	r3
 8006cd2:	3601      	adds	r6, #1
 8006cd4:	e7ee      	b.n	8006cb4 <__libc_init_array+0xc>
 8006cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cda:	4798      	blx	r3
 8006cdc:	3601      	adds	r6, #1
 8006cde:	e7f2      	b.n	8006cc6 <__libc_init_array+0x1e>
 8006ce0:	080091a8 	.word	0x080091a8
 8006ce4:	080091a8 	.word	0x080091a8
 8006ce8:	080091a8 	.word	0x080091a8
 8006cec:	080091ac 	.word	0x080091ac

08006cf0 <__retarget_lock_init_recursive>:
 8006cf0:	4770      	bx	lr

08006cf2 <__retarget_lock_acquire_recursive>:
 8006cf2:	4770      	bx	lr

08006cf4 <__retarget_lock_release_recursive>:
 8006cf4:	4770      	bx	lr

08006cf6 <memcpy>:
 8006cf6:	440a      	add	r2, r1
 8006cf8:	4291      	cmp	r1, r2
 8006cfa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006cfe:	d100      	bne.n	8006d02 <memcpy+0xc>
 8006d00:	4770      	bx	lr
 8006d02:	b510      	push	{r4, lr}
 8006d04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d0c:	4291      	cmp	r1, r2
 8006d0e:	d1f9      	bne.n	8006d04 <memcpy+0xe>
 8006d10:	bd10      	pop	{r4, pc}

08006d12 <quorem>:
 8006d12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d16:	6903      	ldr	r3, [r0, #16]
 8006d18:	690c      	ldr	r4, [r1, #16]
 8006d1a:	42a3      	cmp	r3, r4
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	db7e      	blt.n	8006e1e <quorem+0x10c>
 8006d20:	3c01      	subs	r4, #1
 8006d22:	f101 0814 	add.w	r8, r1, #20
 8006d26:	00a3      	lsls	r3, r4, #2
 8006d28:	f100 0514 	add.w	r5, r0, #20
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d44:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d48:	d32e      	bcc.n	8006da8 <quorem+0x96>
 8006d4a:	f04f 0a00 	mov.w	sl, #0
 8006d4e:	46c4      	mov	ip, r8
 8006d50:	46ae      	mov	lr, r5
 8006d52:	46d3      	mov	fp, sl
 8006d54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d58:	b298      	uxth	r0, r3
 8006d5a:	fb06 a000 	mla	r0, r6, r0, sl
 8006d5e:	0c02      	lsrs	r2, r0, #16
 8006d60:	0c1b      	lsrs	r3, r3, #16
 8006d62:	fb06 2303 	mla	r3, r6, r3, r2
 8006d66:	f8de 2000 	ldr.w	r2, [lr]
 8006d6a:	b280      	uxth	r0, r0
 8006d6c:	b292      	uxth	r2, r2
 8006d6e:	1a12      	subs	r2, r2, r0
 8006d70:	445a      	add	r2, fp
 8006d72:	f8de 0000 	ldr.w	r0, [lr]
 8006d76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d84:	b292      	uxth	r2, r2
 8006d86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d8a:	45e1      	cmp	r9, ip
 8006d8c:	f84e 2b04 	str.w	r2, [lr], #4
 8006d90:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d94:	d2de      	bcs.n	8006d54 <quorem+0x42>
 8006d96:	9b00      	ldr	r3, [sp, #0]
 8006d98:	58eb      	ldr	r3, [r5, r3]
 8006d9a:	b92b      	cbnz	r3, 8006da8 <quorem+0x96>
 8006d9c:	9b01      	ldr	r3, [sp, #4]
 8006d9e:	3b04      	subs	r3, #4
 8006da0:	429d      	cmp	r5, r3
 8006da2:	461a      	mov	r2, r3
 8006da4:	d32f      	bcc.n	8006e06 <quorem+0xf4>
 8006da6:	613c      	str	r4, [r7, #16]
 8006da8:	4638      	mov	r0, r7
 8006daa:	f001 f97b 	bl	80080a4 <__mcmp>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	db25      	blt.n	8006dfe <quorem+0xec>
 8006db2:	4629      	mov	r1, r5
 8006db4:	2000      	movs	r0, #0
 8006db6:	f858 2b04 	ldr.w	r2, [r8], #4
 8006dba:	f8d1 c000 	ldr.w	ip, [r1]
 8006dbe:	fa1f fe82 	uxth.w	lr, r2
 8006dc2:	fa1f f38c 	uxth.w	r3, ip
 8006dc6:	eba3 030e 	sub.w	r3, r3, lr
 8006dca:	4403      	add	r3, r0
 8006dcc:	0c12      	lsrs	r2, r2, #16
 8006dce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006dd2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ddc:	45c1      	cmp	r9, r8
 8006dde:	f841 3b04 	str.w	r3, [r1], #4
 8006de2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006de6:	d2e6      	bcs.n	8006db6 <quorem+0xa4>
 8006de8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006df0:	b922      	cbnz	r2, 8006dfc <quorem+0xea>
 8006df2:	3b04      	subs	r3, #4
 8006df4:	429d      	cmp	r5, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	d30b      	bcc.n	8006e12 <quorem+0x100>
 8006dfa:	613c      	str	r4, [r7, #16]
 8006dfc:	3601      	adds	r6, #1
 8006dfe:	4630      	mov	r0, r6
 8006e00:	b003      	add	sp, #12
 8006e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e06:	6812      	ldr	r2, [r2, #0]
 8006e08:	3b04      	subs	r3, #4
 8006e0a:	2a00      	cmp	r2, #0
 8006e0c:	d1cb      	bne.n	8006da6 <quorem+0x94>
 8006e0e:	3c01      	subs	r4, #1
 8006e10:	e7c6      	b.n	8006da0 <quorem+0x8e>
 8006e12:	6812      	ldr	r2, [r2, #0]
 8006e14:	3b04      	subs	r3, #4
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	d1ef      	bne.n	8006dfa <quorem+0xe8>
 8006e1a:	3c01      	subs	r4, #1
 8006e1c:	e7ea      	b.n	8006df4 <quorem+0xe2>
 8006e1e:	2000      	movs	r0, #0
 8006e20:	e7ee      	b.n	8006e00 <quorem+0xee>
 8006e22:	0000      	movs	r0, r0
 8006e24:	0000      	movs	r0, r0
	...

08006e28 <_dtoa_r>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	69c7      	ldr	r7, [r0, #28]
 8006e2e:	b099      	sub	sp, #100	@ 0x64
 8006e30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e34:	ec55 4b10 	vmov	r4, r5, d0
 8006e38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006e3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e3c:	4683      	mov	fp, r0
 8006e3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e42:	b97f      	cbnz	r7, 8006e64 <_dtoa_r+0x3c>
 8006e44:	2010      	movs	r0, #16
 8006e46:	f000 fdfd 	bl	8007a44 <malloc>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006e50:	b920      	cbnz	r0, 8006e5c <_dtoa_r+0x34>
 8006e52:	4ba7      	ldr	r3, [pc, #668]	@ (80070f0 <_dtoa_r+0x2c8>)
 8006e54:	21ef      	movs	r1, #239	@ 0xef
 8006e56:	48a7      	ldr	r0, [pc, #668]	@ (80070f4 <_dtoa_r+0x2cc>)
 8006e58:	f001 fc5a 	bl	8008710 <__assert_func>
 8006e5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e60:	6007      	str	r7, [r0, #0]
 8006e62:	60c7      	str	r7, [r0, #12]
 8006e64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e68:	6819      	ldr	r1, [r3, #0]
 8006e6a:	b159      	cbz	r1, 8006e84 <_dtoa_r+0x5c>
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	604a      	str	r2, [r1, #4]
 8006e70:	2301      	movs	r3, #1
 8006e72:	4093      	lsls	r3, r2
 8006e74:	608b      	str	r3, [r1, #8]
 8006e76:	4658      	mov	r0, fp
 8006e78:	f000 feda 	bl	8007c30 <_Bfree>
 8006e7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e80:	2200      	movs	r2, #0
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	1e2b      	subs	r3, r5, #0
 8006e86:	bfb9      	ittee	lt
 8006e88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e8c:	9303      	strlt	r3, [sp, #12]
 8006e8e:	2300      	movge	r3, #0
 8006e90:	6033      	strge	r3, [r6, #0]
 8006e92:	9f03      	ldr	r7, [sp, #12]
 8006e94:	4b98      	ldr	r3, [pc, #608]	@ (80070f8 <_dtoa_r+0x2d0>)
 8006e96:	bfbc      	itt	lt
 8006e98:	2201      	movlt	r2, #1
 8006e9a:	6032      	strlt	r2, [r6, #0]
 8006e9c:	43bb      	bics	r3, r7
 8006e9e:	d112      	bne.n	8006ec6 <_dtoa_r+0x9e>
 8006ea0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ea2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006eac:	4323      	orrs	r3, r4
 8006eae:	f000 854d 	beq.w	800794c <_dtoa_r+0xb24>
 8006eb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006eb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800710c <_dtoa_r+0x2e4>
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 854f 	beq.w	800795c <_dtoa_r+0xb34>
 8006ebe:	f10a 0303 	add.w	r3, sl, #3
 8006ec2:	f000 bd49 	b.w	8007958 <_dtoa_r+0xb30>
 8006ec6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	ec51 0b17 	vmov	r0, r1, d7
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006ed6:	f7f9 fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006eda:	4680      	mov	r8, r0
 8006edc:	b158      	cbz	r0, 8006ef6 <_dtoa_r+0xce>
 8006ede:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ee6:	b113      	cbz	r3, 8006eee <_dtoa_r+0xc6>
 8006ee8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006eea:	4b84      	ldr	r3, [pc, #528]	@ (80070fc <_dtoa_r+0x2d4>)
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007110 <_dtoa_r+0x2e8>
 8006ef2:	f000 bd33 	b.w	800795c <_dtoa_r+0xb34>
 8006ef6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006efa:	aa16      	add	r2, sp, #88	@ 0x58
 8006efc:	a917      	add	r1, sp, #92	@ 0x5c
 8006efe:	4658      	mov	r0, fp
 8006f00:	f001 f980 	bl	8008204 <__d2b>
 8006f04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f08:	4681      	mov	r9, r0
 8006f0a:	2e00      	cmp	r6, #0
 8006f0c:	d077      	beq.n	8006ffe <_dtoa_r+0x1d6>
 8006f0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f28:	4619      	mov	r1, r3
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	4b74      	ldr	r3, [pc, #464]	@ (8007100 <_dtoa_r+0x2d8>)
 8006f2e:	f7f9 f9ab 	bl	8000288 <__aeabi_dsub>
 8006f32:	a369      	add	r3, pc, #420	@ (adr r3, 80070d8 <_dtoa_r+0x2b0>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f7f9 fb5e 	bl	80005f8 <__aeabi_dmul>
 8006f3c:	a368      	add	r3, pc, #416	@ (adr r3, 80070e0 <_dtoa_r+0x2b8>)
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f7f9 f9a3 	bl	800028c <__adddf3>
 8006f46:	4604      	mov	r4, r0
 8006f48:	4630      	mov	r0, r6
 8006f4a:	460d      	mov	r5, r1
 8006f4c:	f7f9 faea 	bl	8000524 <__aeabi_i2d>
 8006f50:	a365      	add	r3, pc, #404	@ (adr r3, 80070e8 <_dtoa_r+0x2c0>)
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	f7f9 fb4f 	bl	80005f8 <__aeabi_dmul>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4629      	mov	r1, r5
 8006f62:	f7f9 f993 	bl	800028c <__adddf3>
 8006f66:	4604      	mov	r4, r0
 8006f68:	460d      	mov	r5, r1
 8006f6a:	f7f9 fdf5 	bl	8000b58 <__aeabi_d2iz>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	4607      	mov	r7, r0
 8006f72:	2300      	movs	r3, #0
 8006f74:	4620      	mov	r0, r4
 8006f76:	4629      	mov	r1, r5
 8006f78:	f7f9 fdb0 	bl	8000adc <__aeabi_dcmplt>
 8006f7c:	b140      	cbz	r0, 8006f90 <_dtoa_r+0x168>
 8006f7e:	4638      	mov	r0, r7
 8006f80:	f7f9 fad0 	bl	8000524 <__aeabi_i2d>
 8006f84:	4622      	mov	r2, r4
 8006f86:	462b      	mov	r3, r5
 8006f88:	f7f9 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f8c:	b900      	cbnz	r0, 8006f90 <_dtoa_r+0x168>
 8006f8e:	3f01      	subs	r7, #1
 8006f90:	2f16      	cmp	r7, #22
 8006f92:	d851      	bhi.n	8007038 <_dtoa_r+0x210>
 8006f94:	4b5b      	ldr	r3, [pc, #364]	@ (8007104 <_dtoa_r+0x2dc>)
 8006f96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fa2:	f7f9 fd9b 	bl	8000adc <__aeabi_dcmplt>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d048      	beq.n	800703c <_dtoa_r+0x214>
 8006faa:	3f01      	subs	r7, #1
 8006fac:	2300      	movs	r3, #0
 8006fae:	9312      	str	r3, [sp, #72]	@ 0x48
 8006fb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006fb2:	1b9b      	subs	r3, r3, r6
 8006fb4:	1e5a      	subs	r2, r3, #1
 8006fb6:	bf44      	itt	mi
 8006fb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006fbc:	2300      	movmi	r3, #0
 8006fbe:	9208      	str	r2, [sp, #32]
 8006fc0:	bf54      	ite	pl
 8006fc2:	f04f 0800 	movpl.w	r8, #0
 8006fc6:	9308      	strmi	r3, [sp, #32]
 8006fc8:	2f00      	cmp	r7, #0
 8006fca:	db39      	blt.n	8007040 <_dtoa_r+0x218>
 8006fcc:	9b08      	ldr	r3, [sp, #32]
 8006fce:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006fd0:	443b      	add	r3, r7
 8006fd2:	9308      	str	r3, [sp, #32]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fda:	2b09      	cmp	r3, #9
 8006fdc:	d864      	bhi.n	80070a8 <_dtoa_r+0x280>
 8006fde:	2b05      	cmp	r3, #5
 8006fe0:	bfc4      	itt	gt
 8006fe2:	3b04      	subgt	r3, #4
 8006fe4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe8:	f1a3 0302 	sub.w	r3, r3, #2
 8006fec:	bfcc      	ite	gt
 8006fee:	2400      	movgt	r4, #0
 8006ff0:	2401      	movle	r4, #1
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d863      	bhi.n	80070be <_dtoa_r+0x296>
 8006ff6:	e8df f003 	tbb	[pc, r3]
 8006ffa:	372a      	.short	0x372a
 8006ffc:	5535      	.short	0x5535
 8006ffe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007002:	441e      	add	r6, r3
 8007004:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007008:	2b20      	cmp	r3, #32
 800700a:	bfc1      	itttt	gt
 800700c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007010:	409f      	lslgt	r7, r3
 8007012:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007016:	fa24 f303 	lsrgt.w	r3, r4, r3
 800701a:	bfd6      	itet	le
 800701c:	f1c3 0320 	rsble	r3, r3, #32
 8007020:	ea47 0003 	orrgt.w	r0, r7, r3
 8007024:	fa04 f003 	lslle.w	r0, r4, r3
 8007028:	f7f9 fa6c 	bl	8000504 <__aeabi_ui2d>
 800702c:	2201      	movs	r2, #1
 800702e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007032:	3e01      	subs	r6, #1
 8007034:	9214      	str	r2, [sp, #80]	@ 0x50
 8007036:	e777      	b.n	8006f28 <_dtoa_r+0x100>
 8007038:	2301      	movs	r3, #1
 800703a:	e7b8      	b.n	8006fae <_dtoa_r+0x186>
 800703c:	9012      	str	r0, [sp, #72]	@ 0x48
 800703e:	e7b7      	b.n	8006fb0 <_dtoa_r+0x188>
 8007040:	427b      	negs	r3, r7
 8007042:	930a      	str	r3, [sp, #40]	@ 0x28
 8007044:	2300      	movs	r3, #0
 8007046:	eba8 0807 	sub.w	r8, r8, r7
 800704a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800704c:	e7c4      	b.n	8006fd8 <_dtoa_r+0x1b0>
 800704e:	2300      	movs	r3, #0
 8007050:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007054:	2b00      	cmp	r3, #0
 8007056:	dc35      	bgt.n	80070c4 <_dtoa_r+0x29c>
 8007058:	2301      	movs	r3, #1
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	9307      	str	r3, [sp, #28]
 800705e:	461a      	mov	r2, r3
 8007060:	920e      	str	r2, [sp, #56]	@ 0x38
 8007062:	e00b      	b.n	800707c <_dtoa_r+0x254>
 8007064:	2301      	movs	r3, #1
 8007066:	e7f3      	b.n	8007050 <_dtoa_r+0x228>
 8007068:	2300      	movs	r3, #0
 800706a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800706c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800706e:	18fb      	adds	r3, r7, r3
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	3301      	adds	r3, #1
 8007074:	2b01      	cmp	r3, #1
 8007076:	9307      	str	r3, [sp, #28]
 8007078:	bfb8      	it	lt
 800707a:	2301      	movlt	r3, #1
 800707c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007080:	2100      	movs	r1, #0
 8007082:	2204      	movs	r2, #4
 8007084:	f102 0514 	add.w	r5, r2, #20
 8007088:	429d      	cmp	r5, r3
 800708a:	d91f      	bls.n	80070cc <_dtoa_r+0x2a4>
 800708c:	6041      	str	r1, [r0, #4]
 800708e:	4658      	mov	r0, fp
 8007090:	f000 fd8e 	bl	8007bb0 <_Balloc>
 8007094:	4682      	mov	sl, r0
 8007096:	2800      	cmp	r0, #0
 8007098:	d13c      	bne.n	8007114 <_dtoa_r+0x2ec>
 800709a:	4b1b      	ldr	r3, [pc, #108]	@ (8007108 <_dtoa_r+0x2e0>)
 800709c:	4602      	mov	r2, r0
 800709e:	f240 11af 	movw	r1, #431	@ 0x1af
 80070a2:	e6d8      	b.n	8006e56 <_dtoa_r+0x2e>
 80070a4:	2301      	movs	r3, #1
 80070a6:	e7e0      	b.n	800706a <_dtoa_r+0x242>
 80070a8:	2401      	movs	r4, #1
 80070aa:	2300      	movs	r3, #0
 80070ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80070ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80070b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	9307      	str	r3, [sp, #28]
 80070b8:	2200      	movs	r2, #0
 80070ba:	2312      	movs	r3, #18
 80070bc:	e7d0      	b.n	8007060 <_dtoa_r+0x238>
 80070be:	2301      	movs	r3, #1
 80070c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070c2:	e7f5      	b.n	80070b0 <_dtoa_r+0x288>
 80070c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	9307      	str	r3, [sp, #28]
 80070ca:	e7d7      	b.n	800707c <_dtoa_r+0x254>
 80070cc:	3101      	adds	r1, #1
 80070ce:	0052      	lsls	r2, r2, #1
 80070d0:	e7d8      	b.n	8007084 <_dtoa_r+0x25c>
 80070d2:	bf00      	nop
 80070d4:	f3af 8000 	nop.w
 80070d8:	636f4361 	.word	0x636f4361
 80070dc:	3fd287a7 	.word	0x3fd287a7
 80070e0:	8b60c8b3 	.word	0x8b60c8b3
 80070e4:	3fc68a28 	.word	0x3fc68a28
 80070e8:	509f79fb 	.word	0x509f79fb
 80070ec:	3fd34413 	.word	0x3fd34413
 80070f0:	08008e71 	.word	0x08008e71
 80070f4:	08008e88 	.word	0x08008e88
 80070f8:	7ff00000 	.word	0x7ff00000
 80070fc:	08008e41 	.word	0x08008e41
 8007100:	3ff80000 	.word	0x3ff80000
 8007104:	08008f80 	.word	0x08008f80
 8007108:	08008ee0 	.word	0x08008ee0
 800710c:	08008e6d 	.word	0x08008e6d
 8007110:	08008e40 	.word	0x08008e40
 8007114:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007118:	6018      	str	r0, [r3, #0]
 800711a:	9b07      	ldr	r3, [sp, #28]
 800711c:	2b0e      	cmp	r3, #14
 800711e:	f200 80a4 	bhi.w	800726a <_dtoa_r+0x442>
 8007122:	2c00      	cmp	r4, #0
 8007124:	f000 80a1 	beq.w	800726a <_dtoa_r+0x442>
 8007128:	2f00      	cmp	r7, #0
 800712a:	dd33      	ble.n	8007194 <_dtoa_r+0x36c>
 800712c:	4bad      	ldr	r3, [pc, #692]	@ (80073e4 <_dtoa_r+0x5bc>)
 800712e:	f007 020f 	and.w	r2, r7, #15
 8007132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007136:	ed93 7b00 	vldr	d7, [r3]
 800713a:	05f8      	lsls	r0, r7, #23
 800713c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007140:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007144:	d516      	bpl.n	8007174 <_dtoa_r+0x34c>
 8007146:	4ba8      	ldr	r3, [pc, #672]	@ (80073e8 <_dtoa_r+0x5c0>)
 8007148:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800714c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007150:	f7f9 fb7c 	bl	800084c <__aeabi_ddiv>
 8007154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007158:	f004 040f 	and.w	r4, r4, #15
 800715c:	2603      	movs	r6, #3
 800715e:	4da2      	ldr	r5, [pc, #648]	@ (80073e8 <_dtoa_r+0x5c0>)
 8007160:	b954      	cbnz	r4, 8007178 <_dtoa_r+0x350>
 8007162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800716a:	f7f9 fb6f 	bl	800084c <__aeabi_ddiv>
 800716e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007172:	e028      	b.n	80071c6 <_dtoa_r+0x39e>
 8007174:	2602      	movs	r6, #2
 8007176:	e7f2      	b.n	800715e <_dtoa_r+0x336>
 8007178:	07e1      	lsls	r1, r4, #31
 800717a:	d508      	bpl.n	800718e <_dtoa_r+0x366>
 800717c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007180:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007184:	f7f9 fa38 	bl	80005f8 <__aeabi_dmul>
 8007188:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800718c:	3601      	adds	r6, #1
 800718e:	1064      	asrs	r4, r4, #1
 8007190:	3508      	adds	r5, #8
 8007192:	e7e5      	b.n	8007160 <_dtoa_r+0x338>
 8007194:	f000 80d2 	beq.w	800733c <_dtoa_r+0x514>
 8007198:	427c      	negs	r4, r7
 800719a:	4b92      	ldr	r3, [pc, #584]	@ (80073e4 <_dtoa_r+0x5bc>)
 800719c:	4d92      	ldr	r5, [pc, #584]	@ (80073e8 <_dtoa_r+0x5c0>)
 800719e:	f004 020f 	and.w	r2, r4, #15
 80071a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071ae:	f7f9 fa23 	bl	80005f8 <__aeabi_dmul>
 80071b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b6:	1124      	asrs	r4, r4, #4
 80071b8:	2300      	movs	r3, #0
 80071ba:	2602      	movs	r6, #2
 80071bc:	2c00      	cmp	r4, #0
 80071be:	f040 80b2 	bne.w	8007326 <_dtoa_r+0x4fe>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1d3      	bne.n	800716e <_dtoa_r+0x346>
 80071c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 80b7 	beq.w	8007340 <_dtoa_r+0x518>
 80071d2:	4b86      	ldr	r3, [pc, #536]	@ (80073ec <_dtoa_r+0x5c4>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	4620      	mov	r0, r4
 80071d8:	4629      	mov	r1, r5
 80071da:	f7f9 fc7f 	bl	8000adc <__aeabi_dcmplt>
 80071de:	2800      	cmp	r0, #0
 80071e0:	f000 80ae 	beq.w	8007340 <_dtoa_r+0x518>
 80071e4:	9b07      	ldr	r3, [sp, #28]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 80aa 	beq.w	8007340 <_dtoa_r+0x518>
 80071ec:	9b00      	ldr	r3, [sp, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	dd37      	ble.n	8007262 <_dtoa_r+0x43a>
 80071f2:	1e7b      	subs	r3, r7, #1
 80071f4:	9304      	str	r3, [sp, #16]
 80071f6:	4620      	mov	r0, r4
 80071f8:	4b7d      	ldr	r3, [pc, #500]	@ (80073f0 <_dtoa_r+0x5c8>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	4629      	mov	r1, r5
 80071fe:	f7f9 f9fb 	bl	80005f8 <__aeabi_dmul>
 8007202:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007206:	9c00      	ldr	r4, [sp, #0]
 8007208:	3601      	adds	r6, #1
 800720a:	4630      	mov	r0, r6
 800720c:	f7f9 f98a 	bl	8000524 <__aeabi_i2d>
 8007210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007214:	f7f9 f9f0 	bl	80005f8 <__aeabi_dmul>
 8007218:	4b76      	ldr	r3, [pc, #472]	@ (80073f4 <_dtoa_r+0x5cc>)
 800721a:	2200      	movs	r2, #0
 800721c:	f7f9 f836 	bl	800028c <__adddf3>
 8007220:	4605      	mov	r5, r0
 8007222:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007226:	2c00      	cmp	r4, #0
 8007228:	f040 808d 	bne.w	8007346 <_dtoa_r+0x51e>
 800722c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007230:	4b71      	ldr	r3, [pc, #452]	@ (80073f8 <_dtoa_r+0x5d0>)
 8007232:	2200      	movs	r2, #0
 8007234:	f7f9 f828 	bl	8000288 <__aeabi_dsub>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007240:	462a      	mov	r2, r5
 8007242:	4633      	mov	r3, r6
 8007244:	f7f9 fc68 	bl	8000b18 <__aeabi_dcmpgt>
 8007248:	2800      	cmp	r0, #0
 800724a:	f040 828b 	bne.w	8007764 <_dtoa_r+0x93c>
 800724e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007252:	462a      	mov	r2, r5
 8007254:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007258:	f7f9 fc40 	bl	8000adc <__aeabi_dcmplt>
 800725c:	2800      	cmp	r0, #0
 800725e:	f040 8128 	bne.w	80074b2 <_dtoa_r+0x68a>
 8007262:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007266:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800726a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800726c:	2b00      	cmp	r3, #0
 800726e:	f2c0 815a 	blt.w	8007526 <_dtoa_r+0x6fe>
 8007272:	2f0e      	cmp	r7, #14
 8007274:	f300 8157 	bgt.w	8007526 <_dtoa_r+0x6fe>
 8007278:	4b5a      	ldr	r3, [pc, #360]	@ (80073e4 <_dtoa_r+0x5bc>)
 800727a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800727e:	ed93 7b00 	vldr	d7, [r3]
 8007282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007284:	2b00      	cmp	r3, #0
 8007286:	ed8d 7b00 	vstr	d7, [sp]
 800728a:	da03      	bge.n	8007294 <_dtoa_r+0x46c>
 800728c:	9b07      	ldr	r3, [sp, #28]
 800728e:	2b00      	cmp	r3, #0
 8007290:	f340 8101 	ble.w	8007496 <_dtoa_r+0x66e>
 8007294:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007298:	4656      	mov	r6, sl
 800729a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800729e:	4620      	mov	r0, r4
 80072a0:	4629      	mov	r1, r5
 80072a2:	f7f9 fad3 	bl	800084c <__aeabi_ddiv>
 80072a6:	f7f9 fc57 	bl	8000b58 <__aeabi_d2iz>
 80072aa:	4680      	mov	r8, r0
 80072ac:	f7f9 f93a 	bl	8000524 <__aeabi_i2d>
 80072b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072b4:	f7f9 f9a0 	bl	80005f8 <__aeabi_dmul>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4620      	mov	r0, r4
 80072be:	4629      	mov	r1, r5
 80072c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80072c4:	f7f8 ffe0 	bl	8000288 <__aeabi_dsub>
 80072c8:	f806 4b01 	strb.w	r4, [r6], #1
 80072cc:	9d07      	ldr	r5, [sp, #28]
 80072ce:	eba6 040a 	sub.w	r4, r6, sl
 80072d2:	42a5      	cmp	r5, r4
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	f040 8117 	bne.w	800750a <_dtoa_r+0x6e2>
 80072dc:	f7f8 ffd6 	bl	800028c <__adddf3>
 80072e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072e4:	4604      	mov	r4, r0
 80072e6:	460d      	mov	r5, r1
 80072e8:	f7f9 fc16 	bl	8000b18 <__aeabi_dcmpgt>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	f040 80f9 	bne.w	80074e4 <_dtoa_r+0x6bc>
 80072f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072f6:	4620      	mov	r0, r4
 80072f8:	4629      	mov	r1, r5
 80072fa:	f7f9 fbe5 	bl	8000ac8 <__aeabi_dcmpeq>
 80072fe:	b118      	cbz	r0, 8007308 <_dtoa_r+0x4e0>
 8007300:	f018 0f01 	tst.w	r8, #1
 8007304:	f040 80ee 	bne.w	80074e4 <_dtoa_r+0x6bc>
 8007308:	4649      	mov	r1, r9
 800730a:	4658      	mov	r0, fp
 800730c:	f000 fc90 	bl	8007c30 <_Bfree>
 8007310:	2300      	movs	r3, #0
 8007312:	7033      	strb	r3, [r6, #0]
 8007314:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007316:	3701      	adds	r7, #1
 8007318:	601f      	str	r7, [r3, #0]
 800731a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 831d 	beq.w	800795c <_dtoa_r+0xb34>
 8007322:	601e      	str	r6, [r3, #0]
 8007324:	e31a      	b.n	800795c <_dtoa_r+0xb34>
 8007326:	07e2      	lsls	r2, r4, #31
 8007328:	d505      	bpl.n	8007336 <_dtoa_r+0x50e>
 800732a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800732e:	f7f9 f963 	bl	80005f8 <__aeabi_dmul>
 8007332:	3601      	adds	r6, #1
 8007334:	2301      	movs	r3, #1
 8007336:	1064      	asrs	r4, r4, #1
 8007338:	3508      	adds	r5, #8
 800733a:	e73f      	b.n	80071bc <_dtoa_r+0x394>
 800733c:	2602      	movs	r6, #2
 800733e:	e742      	b.n	80071c6 <_dtoa_r+0x39e>
 8007340:	9c07      	ldr	r4, [sp, #28]
 8007342:	9704      	str	r7, [sp, #16]
 8007344:	e761      	b.n	800720a <_dtoa_r+0x3e2>
 8007346:	4b27      	ldr	r3, [pc, #156]	@ (80073e4 <_dtoa_r+0x5bc>)
 8007348:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800734a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800734e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007352:	4454      	add	r4, sl
 8007354:	2900      	cmp	r1, #0
 8007356:	d053      	beq.n	8007400 <_dtoa_r+0x5d8>
 8007358:	4928      	ldr	r1, [pc, #160]	@ (80073fc <_dtoa_r+0x5d4>)
 800735a:	2000      	movs	r0, #0
 800735c:	f7f9 fa76 	bl	800084c <__aeabi_ddiv>
 8007360:	4633      	mov	r3, r6
 8007362:	462a      	mov	r2, r5
 8007364:	f7f8 ff90 	bl	8000288 <__aeabi_dsub>
 8007368:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800736c:	4656      	mov	r6, sl
 800736e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007372:	f7f9 fbf1 	bl	8000b58 <__aeabi_d2iz>
 8007376:	4605      	mov	r5, r0
 8007378:	f7f9 f8d4 	bl	8000524 <__aeabi_i2d>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007384:	f7f8 ff80 	bl	8000288 <__aeabi_dsub>
 8007388:	3530      	adds	r5, #48	@ 0x30
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007392:	f806 5b01 	strb.w	r5, [r6], #1
 8007396:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800739a:	f7f9 fb9f 	bl	8000adc <__aeabi_dcmplt>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d171      	bne.n	8007486 <_dtoa_r+0x65e>
 80073a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073a6:	4911      	ldr	r1, [pc, #68]	@ (80073ec <_dtoa_r+0x5c4>)
 80073a8:	2000      	movs	r0, #0
 80073aa:	f7f8 ff6d 	bl	8000288 <__aeabi_dsub>
 80073ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073b2:	f7f9 fb93 	bl	8000adc <__aeabi_dcmplt>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	f040 8095 	bne.w	80074e6 <_dtoa_r+0x6be>
 80073bc:	42a6      	cmp	r6, r4
 80073be:	f43f af50 	beq.w	8007262 <_dtoa_r+0x43a>
 80073c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073c6:	4b0a      	ldr	r3, [pc, #40]	@ (80073f0 <_dtoa_r+0x5c8>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	f7f9 f915 	bl	80005f8 <__aeabi_dmul>
 80073ce:	4b08      	ldr	r3, [pc, #32]	@ (80073f0 <_dtoa_r+0x5c8>)
 80073d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073d4:	2200      	movs	r2, #0
 80073d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073da:	f7f9 f90d 	bl	80005f8 <__aeabi_dmul>
 80073de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073e2:	e7c4      	b.n	800736e <_dtoa_r+0x546>
 80073e4:	08008f80 	.word	0x08008f80
 80073e8:	08008f58 	.word	0x08008f58
 80073ec:	3ff00000 	.word	0x3ff00000
 80073f0:	40240000 	.word	0x40240000
 80073f4:	401c0000 	.word	0x401c0000
 80073f8:	40140000 	.word	0x40140000
 80073fc:	3fe00000 	.word	0x3fe00000
 8007400:	4631      	mov	r1, r6
 8007402:	4628      	mov	r0, r5
 8007404:	f7f9 f8f8 	bl	80005f8 <__aeabi_dmul>
 8007408:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800740c:	9415      	str	r4, [sp, #84]	@ 0x54
 800740e:	4656      	mov	r6, sl
 8007410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007414:	f7f9 fba0 	bl	8000b58 <__aeabi_d2iz>
 8007418:	4605      	mov	r5, r0
 800741a:	f7f9 f883 	bl	8000524 <__aeabi_i2d>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007426:	f7f8 ff2f 	bl	8000288 <__aeabi_dsub>
 800742a:	3530      	adds	r5, #48	@ 0x30
 800742c:	f806 5b01 	strb.w	r5, [r6], #1
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	42a6      	cmp	r6, r4
 8007436:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	d124      	bne.n	800748a <_dtoa_r+0x662>
 8007440:	4bac      	ldr	r3, [pc, #688]	@ (80076f4 <_dtoa_r+0x8cc>)
 8007442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007446:	f7f8 ff21 	bl	800028c <__adddf3>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007452:	f7f9 fb61 	bl	8000b18 <__aeabi_dcmpgt>
 8007456:	2800      	cmp	r0, #0
 8007458:	d145      	bne.n	80074e6 <_dtoa_r+0x6be>
 800745a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800745e:	49a5      	ldr	r1, [pc, #660]	@ (80076f4 <_dtoa_r+0x8cc>)
 8007460:	2000      	movs	r0, #0
 8007462:	f7f8 ff11 	bl	8000288 <__aeabi_dsub>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800746e:	f7f9 fb35 	bl	8000adc <__aeabi_dcmplt>
 8007472:	2800      	cmp	r0, #0
 8007474:	f43f aef5 	beq.w	8007262 <_dtoa_r+0x43a>
 8007478:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800747a:	1e73      	subs	r3, r6, #1
 800747c:	9315      	str	r3, [sp, #84]	@ 0x54
 800747e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007482:	2b30      	cmp	r3, #48	@ 0x30
 8007484:	d0f8      	beq.n	8007478 <_dtoa_r+0x650>
 8007486:	9f04      	ldr	r7, [sp, #16]
 8007488:	e73e      	b.n	8007308 <_dtoa_r+0x4e0>
 800748a:	4b9b      	ldr	r3, [pc, #620]	@ (80076f8 <_dtoa_r+0x8d0>)
 800748c:	f7f9 f8b4 	bl	80005f8 <__aeabi_dmul>
 8007490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007494:	e7bc      	b.n	8007410 <_dtoa_r+0x5e8>
 8007496:	d10c      	bne.n	80074b2 <_dtoa_r+0x68a>
 8007498:	4b98      	ldr	r3, [pc, #608]	@ (80076fc <_dtoa_r+0x8d4>)
 800749a:	2200      	movs	r2, #0
 800749c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074a0:	f7f9 f8aa 	bl	80005f8 <__aeabi_dmul>
 80074a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074a8:	f7f9 fb2c 	bl	8000b04 <__aeabi_dcmpge>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	f000 8157 	beq.w	8007760 <_dtoa_r+0x938>
 80074b2:	2400      	movs	r4, #0
 80074b4:	4625      	mov	r5, r4
 80074b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074b8:	43db      	mvns	r3, r3
 80074ba:	9304      	str	r3, [sp, #16]
 80074bc:	4656      	mov	r6, sl
 80074be:	2700      	movs	r7, #0
 80074c0:	4621      	mov	r1, r4
 80074c2:	4658      	mov	r0, fp
 80074c4:	f000 fbb4 	bl	8007c30 <_Bfree>
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	d0dc      	beq.n	8007486 <_dtoa_r+0x65e>
 80074cc:	b12f      	cbz	r7, 80074da <_dtoa_r+0x6b2>
 80074ce:	42af      	cmp	r7, r5
 80074d0:	d003      	beq.n	80074da <_dtoa_r+0x6b2>
 80074d2:	4639      	mov	r1, r7
 80074d4:	4658      	mov	r0, fp
 80074d6:	f000 fbab 	bl	8007c30 <_Bfree>
 80074da:	4629      	mov	r1, r5
 80074dc:	4658      	mov	r0, fp
 80074de:	f000 fba7 	bl	8007c30 <_Bfree>
 80074e2:	e7d0      	b.n	8007486 <_dtoa_r+0x65e>
 80074e4:	9704      	str	r7, [sp, #16]
 80074e6:	4633      	mov	r3, r6
 80074e8:	461e      	mov	r6, r3
 80074ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074ee:	2a39      	cmp	r2, #57	@ 0x39
 80074f0:	d107      	bne.n	8007502 <_dtoa_r+0x6da>
 80074f2:	459a      	cmp	sl, r3
 80074f4:	d1f8      	bne.n	80074e8 <_dtoa_r+0x6c0>
 80074f6:	9a04      	ldr	r2, [sp, #16]
 80074f8:	3201      	adds	r2, #1
 80074fa:	9204      	str	r2, [sp, #16]
 80074fc:	2230      	movs	r2, #48	@ 0x30
 80074fe:	f88a 2000 	strb.w	r2, [sl]
 8007502:	781a      	ldrb	r2, [r3, #0]
 8007504:	3201      	adds	r2, #1
 8007506:	701a      	strb	r2, [r3, #0]
 8007508:	e7bd      	b.n	8007486 <_dtoa_r+0x65e>
 800750a:	4b7b      	ldr	r3, [pc, #492]	@ (80076f8 <_dtoa_r+0x8d0>)
 800750c:	2200      	movs	r2, #0
 800750e:	f7f9 f873 	bl	80005f8 <__aeabi_dmul>
 8007512:	2200      	movs	r2, #0
 8007514:	2300      	movs	r3, #0
 8007516:	4604      	mov	r4, r0
 8007518:	460d      	mov	r5, r1
 800751a:	f7f9 fad5 	bl	8000ac8 <__aeabi_dcmpeq>
 800751e:	2800      	cmp	r0, #0
 8007520:	f43f aebb 	beq.w	800729a <_dtoa_r+0x472>
 8007524:	e6f0      	b.n	8007308 <_dtoa_r+0x4e0>
 8007526:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007528:	2a00      	cmp	r2, #0
 800752a:	f000 80db 	beq.w	80076e4 <_dtoa_r+0x8bc>
 800752e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007530:	2a01      	cmp	r2, #1
 8007532:	f300 80bf 	bgt.w	80076b4 <_dtoa_r+0x88c>
 8007536:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007538:	2a00      	cmp	r2, #0
 800753a:	f000 80b7 	beq.w	80076ac <_dtoa_r+0x884>
 800753e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007542:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007544:	4646      	mov	r6, r8
 8007546:	9a08      	ldr	r2, [sp, #32]
 8007548:	2101      	movs	r1, #1
 800754a:	441a      	add	r2, r3
 800754c:	4658      	mov	r0, fp
 800754e:	4498      	add	r8, r3
 8007550:	9208      	str	r2, [sp, #32]
 8007552:	f000 fc21 	bl	8007d98 <__i2b>
 8007556:	4605      	mov	r5, r0
 8007558:	b15e      	cbz	r6, 8007572 <_dtoa_r+0x74a>
 800755a:	9b08      	ldr	r3, [sp, #32]
 800755c:	2b00      	cmp	r3, #0
 800755e:	dd08      	ble.n	8007572 <_dtoa_r+0x74a>
 8007560:	42b3      	cmp	r3, r6
 8007562:	9a08      	ldr	r2, [sp, #32]
 8007564:	bfa8      	it	ge
 8007566:	4633      	movge	r3, r6
 8007568:	eba8 0803 	sub.w	r8, r8, r3
 800756c:	1af6      	subs	r6, r6, r3
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	9308      	str	r3, [sp, #32]
 8007572:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007574:	b1f3      	cbz	r3, 80075b4 <_dtoa_r+0x78c>
 8007576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 80b7 	beq.w	80076ec <_dtoa_r+0x8c4>
 800757e:	b18c      	cbz	r4, 80075a4 <_dtoa_r+0x77c>
 8007580:	4629      	mov	r1, r5
 8007582:	4622      	mov	r2, r4
 8007584:	4658      	mov	r0, fp
 8007586:	f000 fcc7 	bl	8007f18 <__pow5mult>
 800758a:	464a      	mov	r2, r9
 800758c:	4601      	mov	r1, r0
 800758e:	4605      	mov	r5, r0
 8007590:	4658      	mov	r0, fp
 8007592:	f000 fc17 	bl	8007dc4 <__multiply>
 8007596:	4649      	mov	r1, r9
 8007598:	9004      	str	r0, [sp, #16]
 800759a:	4658      	mov	r0, fp
 800759c:	f000 fb48 	bl	8007c30 <_Bfree>
 80075a0:	9b04      	ldr	r3, [sp, #16]
 80075a2:	4699      	mov	r9, r3
 80075a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075a6:	1b1a      	subs	r2, r3, r4
 80075a8:	d004      	beq.n	80075b4 <_dtoa_r+0x78c>
 80075aa:	4649      	mov	r1, r9
 80075ac:	4658      	mov	r0, fp
 80075ae:	f000 fcb3 	bl	8007f18 <__pow5mult>
 80075b2:	4681      	mov	r9, r0
 80075b4:	2101      	movs	r1, #1
 80075b6:	4658      	mov	r0, fp
 80075b8:	f000 fbee 	bl	8007d98 <__i2b>
 80075bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075be:	4604      	mov	r4, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 81cf 	beq.w	8007964 <_dtoa_r+0xb3c>
 80075c6:	461a      	mov	r2, r3
 80075c8:	4601      	mov	r1, r0
 80075ca:	4658      	mov	r0, fp
 80075cc:	f000 fca4 	bl	8007f18 <__pow5mult>
 80075d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	4604      	mov	r4, r0
 80075d6:	f300 8095 	bgt.w	8007704 <_dtoa_r+0x8dc>
 80075da:	9b02      	ldr	r3, [sp, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f040 8087 	bne.w	80076f0 <_dtoa_r+0x8c8>
 80075e2:	9b03      	ldr	r3, [sp, #12]
 80075e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f040 8089 	bne.w	8007700 <_dtoa_r+0x8d8>
 80075ee:	9b03      	ldr	r3, [sp, #12]
 80075f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075f4:	0d1b      	lsrs	r3, r3, #20
 80075f6:	051b      	lsls	r3, r3, #20
 80075f8:	b12b      	cbz	r3, 8007606 <_dtoa_r+0x7de>
 80075fa:	9b08      	ldr	r3, [sp, #32]
 80075fc:	3301      	adds	r3, #1
 80075fe:	9308      	str	r3, [sp, #32]
 8007600:	f108 0801 	add.w	r8, r8, #1
 8007604:	2301      	movs	r3, #1
 8007606:	930a      	str	r3, [sp, #40]	@ 0x28
 8007608:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800760a:	2b00      	cmp	r3, #0
 800760c:	f000 81b0 	beq.w	8007970 <_dtoa_r+0xb48>
 8007610:	6923      	ldr	r3, [r4, #16]
 8007612:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007616:	6918      	ldr	r0, [r3, #16]
 8007618:	f000 fb72 	bl	8007d00 <__hi0bits>
 800761c:	f1c0 0020 	rsb	r0, r0, #32
 8007620:	9b08      	ldr	r3, [sp, #32]
 8007622:	4418      	add	r0, r3
 8007624:	f010 001f 	ands.w	r0, r0, #31
 8007628:	d077      	beq.n	800771a <_dtoa_r+0x8f2>
 800762a:	f1c0 0320 	rsb	r3, r0, #32
 800762e:	2b04      	cmp	r3, #4
 8007630:	dd6b      	ble.n	800770a <_dtoa_r+0x8e2>
 8007632:	9b08      	ldr	r3, [sp, #32]
 8007634:	f1c0 001c 	rsb	r0, r0, #28
 8007638:	4403      	add	r3, r0
 800763a:	4480      	add	r8, r0
 800763c:	4406      	add	r6, r0
 800763e:	9308      	str	r3, [sp, #32]
 8007640:	f1b8 0f00 	cmp.w	r8, #0
 8007644:	dd05      	ble.n	8007652 <_dtoa_r+0x82a>
 8007646:	4649      	mov	r1, r9
 8007648:	4642      	mov	r2, r8
 800764a:	4658      	mov	r0, fp
 800764c:	f000 fcbe 	bl	8007fcc <__lshift>
 8007650:	4681      	mov	r9, r0
 8007652:	9b08      	ldr	r3, [sp, #32]
 8007654:	2b00      	cmp	r3, #0
 8007656:	dd05      	ble.n	8007664 <_dtoa_r+0x83c>
 8007658:	4621      	mov	r1, r4
 800765a:	461a      	mov	r2, r3
 800765c:	4658      	mov	r0, fp
 800765e:	f000 fcb5 	bl	8007fcc <__lshift>
 8007662:	4604      	mov	r4, r0
 8007664:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007666:	2b00      	cmp	r3, #0
 8007668:	d059      	beq.n	800771e <_dtoa_r+0x8f6>
 800766a:	4621      	mov	r1, r4
 800766c:	4648      	mov	r0, r9
 800766e:	f000 fd19 	bl	80080a4 <__mcmp>
 8007672:	2800      	cmp	r0, #0
 8007674:	da53      	bge.n	800771e <_dtoa_r+0x8f6>
 8007676:	1e7b      	subs	r3, r7, #1
 8007678:	9304      	str	r3, [sp, #16]
 800767a:	4649      	mov	r1, r9
 800767c:	2300      	movs	r3, #0
 800767e:	220a      	movs	r2, #10
 8007680:	4658      	mov	r0, fp
 8007682:	f000 faf7 	bl	8007c74 <__multadd>
 8007686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007688:	4681      	mov	r9, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 8172 	beq.w	8007974 <_dtoa_r+0xb4c>
 8007690:	2300      	movs	r3, #0
 8007692:	4629      	mov	r1, r5
 8007694:	220a      	movs	r2, #10
 8007696:	4658      	mov	r0, fp
 8007698:	f000 faec 	bl	8007c74 <__multadd>
 800769c:	9b00      	ldr	r3, [sp, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	4605      	mov	r5, r0
 80076a2:	dc67      	bgt.n	8007774 <_dtoa_r+0x94c>
 80076a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	dc41      	bgt.n	800772e <_dtoa_r+0x906>
 80076aa:	e063      	b.n	8007774 <_dtoa_r+0x94c>
 80076ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80076b2:	e746      	b.n	8007542 <_dtoa_r+0x71a>
 80076b4:	9b07      	ldr	r3, [sp, #28]
 80076b6:	1e5c      	subs	r4, r3, #1
 80076b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076ba:	42a3      	cmp	r3, r4
 80076bc:	bfbf      	itttt	lt
 80076be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80076c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80076c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80076c4:	1ae3      	sublt	r3, r4, r3
 80076c6:	bfb4      	ite	lt
 80076c8:	18d2      	addlt	r2, r2, r3
 80076ca:	1b1c      	subge	r4, r3, r4
 80076cc:	9b07      	ldr	r3, [sp, #28]
 80076ce:	bfbc      	itt	lt
 80076d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80076d2:	2400      	movlt	r4, #0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	bfb5      	itete	lt
 80076d8:	eba8 0603 	sublt.w	r6, r8, r3
 80076dc:	9b07      	ldrge	r3, [sp, #28]
 80076de:	2300      	movlt	r3, #0
 80076e0:	4646      	movge	r6, r8
 80076e2:	e730      	b.n	8007546 <_dtoa_r+0x71e>
 80076e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80076e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80076e8:	4646      	mov	r6, r8
 80076ea:	e735      	b.n	8007558 <_dtoa_r+0x730>
 80076ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076ee:	e75c      	b.n	80075aa <_dtoa_r+0x782>
 80076f0:	2300      	movs	r3, #0
 80076f2:	e788      	b.n	8007606 <_dtoa_r+0x7de>
 80076f4:	3fe00000 	.word	0x3fe00000
 80076f8:	40240000 	.word	0x40240000
 80076fc:	40140000 	.word	0x40140000
 8007700:	9b02      	ldr	r3, [sp, #8]
 8007702:	e780      	b.n	8007606 <_dtoa_r+0x7de>
 8007704:	2300      	movs	r3, #0
 8007706:	930a      	str	r3, [sp, #40]	@ 0x28
 8007708:	e782      	b.n	8007610 <_dtoa_r+0x7e8>
 800770a:	d099      	beq.n	8007640 <_dtoa_r+0x818>
 800770c:	9a08      	ldr	r2, [sp, #32]
 800770e:	331c      	adds	r3, #28
 8007710:	441a      	add	r2, r3
 8007712:	4498      	add	r8, r3
 8007714:	441e      	add	r6, r3
 8007716:	9208      	str	r2, [sp, #32]
 8007718:	e792      	b.n	8007640 <_dtoa_r+0x818>
 800771a:	4603      	mov	r3, r0
 800771c:	e7f6      	b.n	800770c <_dtoa_r+0x8e4>
 800771e:	9b07      	ldr	r3, [sp, #28]
 8007720:	9704      	str	r7, [sp, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	dc20      	bgt.n	8007768 <_dtoa_r+0x940>
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800772a:	2b02      	cmp	r3, #2
 800772c:	dd1e      	ble.n	800776c <_dtoa_r+0x944>
 800772e:	9b00      	ldr	r3, [sp, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	f47f aec0 	bne.w	80074b6 <_dtoa_r+0x68e>
 8007736:	4621      	mov	r1, r4
 8007738:	2205      	movs	r2, #5
 800773a:	4658      	mov	r0, fp
 800773c:	f000 fa9a 	bl	8007c74 <__multadd>
 8007740:	4601      	mov	r1, r0
 8007742:	4604      	mov	r4, r0
 8007744:	4648      	mov	r0, r9
 8007746:	f000 fcad 	bl	80080a4 <__mcmp>
 800774a:	2800      	cmp	r0, #0
 800774c:	f77f aeb3 	ble.w	80074b6 <_dtoa_r+0x68e>
 8007750:	4656      	mov	r6, sl
 8007752:	2331      	movs	r3, #49	@ 0x31
 8007754:	f806 3b01 	strb.w	r3, [r6], #1
 8007758:	9b04      	ldr	r3, [sp, #16]
 800775a:	3301      	adds	r3, #1
 800775c:	9304      	str	r3, [sp, #16]
 800775e:	e6ae      	b.n	80074be <_dtoa_r+0x696>
 8007760:	9c07      	ldr	r4, [sp, #28]
 8007762:	9704      	str	r7, [sp, #16]
 8007764:	4625      	mov	r5, r4
 8007766:	e7f3      	b.n	8007750 <_dtoa_r+0x928>
 8007768:	9b07      	ldr	r3, [sp, #28]
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 8104 	beq.w	800797c <_dtoa_r+0xb54>
 8007774:	2e00      	cmp	r6, #0
 8007776:	dd05      	ble.n	8007784 <_dtoa_r+0x95c>
 8007778:	4629      	mov	r1, r5
 800777a:	4632      	mov	r2, r6
 800777c:	4658      	mov	r0, fp
 800777e:	f000 fc25 	bl	8007fcc <__lshift>
 8007782:	4605      	mov	r5, r0
 8007784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007786:	2b00      	cmp	r3, #0
 8007788:	d05a      	beq.n	8007840 <_dtoa_r+0xa18>
 800778a:	6869      	ldr	r1, [r5, #4]
 800778c:	4658      	mov	r0, fp
 800778e:	f000 fa0f 	bl	8007bb0 <_Balloc>
 8007792:	4606      	mov	r6, r0
 8007794:	b928      	cbnz	r0, 80077a2 <_dtoa_r+0x97a>
 8007796:	4b84      	ldr	r3, [pc, #528]	@ (80079a8 <_dtoa_r+0xb80>)
 8007798:	4602      	mov	r2, r0
 800779a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800779e:	f7ff bb5a 	b.w	8006e56 <_dtoa_r+0x2e>
 80077a2:	692a      	ldr	r2, [r5, #16]
 80077a4:	3202      	adds	r2, #2
 80077a6:	0092      	lsls	r2, r2, #2
 80077a8:	f105 010c 	add.w	r1, r5, #12
 80077ac:	300c      	adds	r0, #12
 80077ae:	f7ff faa2 	bl	8006cf6 <memcpy>
 80077b2:	2201      	movs	r2, #1
 80077b4:	4631      	mov	r1, r6
 80077b6:	4658      	mov	r0, fp
 80077b8:	f000 fc08 	bl	8007fcc <__lshift>
 80077bc:	f10a 0301 	add.w	r3, sl, #1
 80077c0:	9307      	str	r3, [sp, #28]
 80077c2:	9b00      	ldr	r3, [sp, #0]
 80077c4:	4453      	add	r3, sl
 80077c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077c8:	9b02      	ldr	r3, [sp, #8]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	462f      	mov	r7, r5
 80077d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80077d2:	4605      	mov	r5, r0
 80077d4:	9b07      	ldr	r3, [sp, #28]
 80077d6:	4621      	mov	r1, r4
 80077d8:	3b01      	subs	r3, #1
 80077da:	4648      	mov	r0, r9
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	f7ff fa98 	bl	8006d12 <quorem>
 80077e2:	4639      	mov	r1, r7
 80077e4:	9002      	str	r0, [sp, #8]
 80077e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077ea:	4648      	mov	r0, r9
 80077ec:	f000 fc5a 	bl	80080a4 <__mcmp>
 80077f0:	462a      	mov	r2, r5
 80077f2:	9008      	str	r0, [sp, #32]
 80077f4:	4621      	mov	r1, r4
 80077f6:	4658      	mov	r0, fp
 80077f8:	f000 fc70 	bl	80080dc <__mdiff>
 80077fc:	68c2      	ldr	r2, [r0, #12]
 80077fe:	4606      	mov	r6, r0
 8007800:	bb02      	cbnz	r2, 8007844 <_dtoa_r+0xa1c>
 8007802:	4601      	mov	r1, r0
 8007804:	4648      	mov	r0, r9
 8007806:	f000 fc4d 	bl	80080a4 <__mcmp>
 800780a:	4602      	mov	r2, r0
 800780c:	4631      	mov	r1, r6
 800780e:	4658      	mov	r0, fp
 8007810:	920e      	str	r2, [sp, #56]	@ 0x38
 8007812:	f000 fa0d 	bl	8007c30 <_Bfree>
 8007816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007818:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800781a:	9e07      	ldr	r6, [sp, #28]
 800781c:	ea43 0102 	orr.w	r1, r3, r2
 8007820:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007822:	4319      	orrs	r1, r3
 8007824:	d110      	bne.n	8007848 <_dtoa_r+0xa20>
 8007826:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800782a:	d029      	beq.n	8007880 <_dtoa_r+0xa58>
 800782c:	9b08      	ldr	r3, [sp, #32]
 800782e:	2b00      	cmp	r3, #0
 8007830:	dd02      	ble.n	8007838 <_dtoa_r+0xa10>
 8007832:	9b02      	ldr	r3, [sp, #8]
 8007834:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007838:	9b00      	ldr	r3, [sp, #0]
 800783a:	f883 8000 	strb.w	r8, [r3]
 800783e:	e63f      	b.n	80074c0 <_dtoa_r+0x698>
 8007840:	4628      	mov	r0, r5
 8007842:	e7bb      	b.n	80077bc <_dtoa_r+0x994>
 8007844:	2201      	movs	r2, #1
 8007846:	e7e1      	b.n	800780c <_dtoa_r+0x9e4>
 8007848:	9b08      	ldr	r3, [sp, #32]
 800784a:	2b00      	cmp	r3, #0
 800784c:	db04      	blt.n	8007858 <_dtoa_r+0xa30>
 800784e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007850:	430b      	orrs	r3, r1
 8007852:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007854:	430b      	orrs	r3, r1
 8007856:	d120      	bne.n	800789a <_dtoa_r+0xa72>
 8007858:	2a00      	cmp	r2, #0
 800785a:	dded      	ble.n	8007838 <_dtoa_r+0xa10>
 800785c:	4649      	mov	r1, r9
 800785e:	2201      	movs	r2, #1
 8007860:	4658      	mov	r0, fp
 8007862:	f000 fbb3 	bl	8007fcc <__lshift>
 8007866:	4621      	mov	r1, r4
 8007868:	4681      	mov	r9, r0
 800786a:	f000 fc1b 	bl	80080a4 <__mcmp>
 800786e:	2800      	cmp	r0, #0
 8007870:	dc03      	bgt.n	800787a <_dtoa_r+0xa52>
 8007872:	d1e1      	bne.n	8007838 <_dtoa_r+0xa10>
 8007874:	f018 0f01 	tst.w	r8, #1
 8007878:	d0de      	beq.n	8007838 <_dtoa_r+0xa10>
 800787a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800787e:	d1d8      	bne.n	8007832 <_dtoa_r+0xa0a>
 8007880:	9a00      	ldr	r2, [sp, #0]
 8007882:	2339      	movs	r3, #57	@ 0x39
 8007884:	7013      	strb	r3, [r2, #0]
 8007886:	4633      	mov	r3, r6
 8007888:	461e      	mov	r6, r3
 800788a:	3b01      	subs	r3, #1
 800788c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007890:	2a39      	cmp	r2, #57	@ 0x39
 8007892:	d052      	beq.n	800793a <_dtoa_r+0xb12>
 8007894:	3201      	adds	r2, #1
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	e612      	b.n	80074c0 <_dtoa_r+0x698>
 800789a:	2a00      	cmp	r2, #0
 800789c:	dd07      	ble.n	80078ae <_dtoa_r+0xa86>
 800789e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078a2:	d0ed      	beq.n	8007880 <_dtoa_r+0xa58>
 80078a4:	9a00      	ldr	r2, [sp, #0]
 80078a6:	f108 0301 	add.w	r3, r8, #1
 80078aa:	7013      	strb	r3, [r2, #0]
 80078ac:	e608      	b.n	80074c0 <_dtoa_r+0x698>
 80078ae:	9b07      	ldr	r3, [sp, #28]
 80078b0:	9a07      	ldr	r2, [sp, #28]
 80078b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80078b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d028      	beq.n	800790e <_dtoa_r+0xae6>
 80078bc:	4649      	mov	r1, r9
 80078be:	2300      	movs	r3, #0
 80078c0:	220a      	movs	r2, #10
 80078c2:	4658      	mov	r0, fp
 80078c4:	f000 f9d6 	bl	8007c74 <__multadd>
 80078c8:	42af      	cmp	r7, r5
 80078ca:	4681      	mov	r9, r0
 80078cc:	f04f 0300 	mov.w	r3, #0
 80078d0:	f04f 020a 	mov.w	r2, #10
 80078d4:	4639      	mov	r1, r7
 80078d6:	4658      	mov	r0, fp
 80078d8:	d107      	bne.n	80078ea <_dtoa_r+0xac2>
 80078da:	f000 f9cb 	bl	8007c74 <__multadd>
 80078de:	4607      	mov	r7, r0
 80078e0:	4605      	mov	r5, r0
 80078e2:	9b07      	ldr	r3, [sp, #28]
 80078e4:	3301      	adds	r3, #1
 80078e6:	9307      	str	r3, [sp, #28]
 80078e8:	e774      	b.n	80077d4 <_dtoa_r+0x9ac>
 80078ea:	f000 f9c3 	bl	8007c74 <__multadd>
 80078ee:	4629      	mov	r1, r5
 80078f0:	4607      	mov	r7, r0
 80078f2:	2300      	movs	r3, #0
 80078f4:	220a      	movs	r2, #10
 80078f6:	4658      	mov	r0, fp
 80078f8:	f000 f9bc 	bl	8007c74 <__multadd>
 80078fc:	4605      	mov	r5, r0
 80078fe:	e7f0      	b.n	80078e2 <_dtoa_r+0xaba>
 8007900:	9b00      	ldr	r3, [sp, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	bfcc      	ite	gt
 8007906:	461e      	movgt	r6, r3
 8007908:	2601      	movle	r6, #1
 800790a:	4456      	add	r6, sl
 800790c:	2700      	movs	r7, #0
 800790e:	4649      	mov	r1, r9
 8007910:	2201      	movs	r2, #1
 8007912:	4658      	mov	r0, fp
 8007914:	f000 fb5a 	bl	8007fcc <__lshift>
 8007918:	4621      	mov	r1, r4
 800791a:	4681      	mov	r9, r0
 800791c:	f000 fbc2 	bl	80080a4 <__mcmp>
 8007920:	2800      	cmp	r0, #0
 8007922:	dcb0      	bgt.n	8007886 <_dtoa_r+0xa5e>
 8007924:	d102      	bne.n	800792c <_dtoa_r+0xb04>
 8007926:	f018 0f01 	tst.w	r8, #1
 800792a:	d1ac      	bne.n	8007886 <_dtoa_r+0xa5e>
 800792c:	4633      	mov	r3, r6
 800792e:	461e      	mov	r6, r3
 8007930:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007934:	2a30      	cmp	r2, #48	@ 0x30
 8007936:	d0fa      	beq.n	800792e <_dtoa_r+0xb06>
 8007938:	e5c2      	b.n	80074c0 <_dtoa_r+0x698>
 800793a:	459a      	cmp	sl, r3
 800793c:	d1a4      	bne.n	8007888 <_dtoa_r+0xa60>
 800793e:	9b04      	ldr	r3, [sp, #16]
 8007940:	3301      	adds	r3, #1
 8007942:	9304      	str	r3, [sp, #16]
 8007944:	2331      	movs	r3, #49	@ 0x31
 8007946:	f88a 3000 	strb.w	r3, [sl]
 800794a:	e5b9      	b.n	80074c0 <_dtoa_r+0x698>
 800794c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800794e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80079ac <_dtoa_r+0xb84>
 8007952:	b11b      	cbz	r3, 800795c <_dtoa_r+0xb34>
 8007954:	f10a 0308 	add.w	r3, sl, #8
 8007958:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800795a:	6013      	str	r3, [r2, #0]
 800795c:	4650      	mov	r0, sl
 800795e:	b019      	add	sp, #100	@ 0x64
 8007960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007966:	2b01      	cmp	r3, #1
 8007968:	f77f ae37 	ble.w	80075da <_dtoa_r+0x7b2>
 800796c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800796e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007970:	2001      	movs	r0, #1
 8007972:	e655      	b.n	8007620 <_dtoa_r+0x7f8>
 8007974:	9b00      	ldr	r3, [sp, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	f77f aed6 	ble.w	8007728 <_dtoa_r+0x900>
 800797c:	4656      	mov	r6, sl
 800797e:	4621      	mov	r1, r4
 8007980:	4648      	mov	r0, r9
 8007982:	f7ff f9c6 	bl	8006d12 <quorem>
 8007986:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800798a:	f806 8b01 	strb.w	r8, [r6], #1
 800798e:	9b00      	ldr	r3, [sp, #0]
 8007990:	eba6 020a 	sub.w	r2, r6, sl
 8007994:	4293      	cmp	r3, r2
 8007996:	ddb3      	ble.n	8007900 <_dtoa_r+0xad8>
 8007998:	4649      	mov	r1, r9
 800799a:	2300      	movs	r3, #0
 800799c:	220a      	movs	r2, #10
 800799e:	4658      	mov	r0, fp
 80079a0:	f000 f968 	bl	8007c74 <__multadd>
 80079a4:	4681      	mov	r9, r0
 80079a6:	e7ea      	b.n	800797e <_dtoa_r+0xb56>
 80079a8:	08008ee0 	.word	0x08008ee0
 80079ac:	08008e64 	.word	0x08008e64

080079b0 <_free_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	4605      	mov	r5, r0
 80079b4:	2900      	cmp	r1, #0
 80079b6:	d041      	beq.n	8007a3c <_free_r+0x8c>
 80079b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079bc:	1f0c      	subs	r4, r1, #4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	bfb8      	it	lt
 80079c2:	18e4      	addlt	r4, r4, r3
 80079c4:	f000 f8e8 	bl	8007b98 <__malloc_lock>
 80079c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a40 <_free_r+0x90>)
 80079ca:	6813      	ldr	r3, [r2, #0]
 80079cc:	b933      	cbnz	r3, 80079dc <_free_r+0x2c>
 80079ce:	6063      	str	r3, [r4, #4]
 80079d0:	6014      	str	r4, [r2, #0]
 80079d2:	4628      	mov	r0, r5
 80079d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079d8:	f000 b8e4 	b.w	8007ba4 <__malloc_unlock>
 80079dc:	42a3      	cmp	r3, r4
 80079de:	d908      	bls.n	80079f2 <_free_r+0x42>
 80079e0:	6820      	ldr	r0, [r4, #0]
 80079e2:	1821      	adds	r1, r4, r0
 80079e4:	428b      	cmp	r3, r1
 80079e6:	bf01      	itttt	eq
 80079e8:	6819      	ldreq	r1, [r3, #0]
 80079ea:	685b      	ldreq	r3, [r3, #4]
 80079ec:	1809      	addeq	r1, r1, r0
 80079ee:	6021      	streq	r1, [r4, #0]
 80079f0:	e7ed      	b.n	80079ce <_free_r+0x1e>
 80079f2:	461a      	mov	r2, r3
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	b10b      	cbz	r3, 80079fc <_free_r+0x4c>
 80079f8:	42a3      	cmp	r3, r4
 80079fa:	d9fa      	bls.n	80079f2 <_free_r+0x42>
 80079fc:	6811      	ldr	r1, [r2, #0]
 80079fe:	1850      	adds	r0, r2, r1
 8007a00:	42a0      	cmp	r0, r4
 8007a02:	d10b      	bne.n	8007a1c <_free_r+0x6c>
 8007a04:	6820      	ldr	r0, [r4, #0]
 8007a06:	4401      	add	r1, r0
 8007a08:	1850      	adds	r0, r2, r1
 8007a0a:	4283      	cmp	r3, r0
 8007a0c:	6011      	str	r1, [r2, #0]
 8007a0e:	d1e0      	bne.n	80079d2 <_free_r+0x22>
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	6053      	str	r3, [r2, #4]
 8007a16:	4408      	add	r0, r1
 8007a18:	6010      	str	r0, [r2, #0]
 8007a1a:	e7da      	b.n	80079d2 <_free_r+0x22>
 8007a1c:	d902      	bls.n	8007a24 <_free_r+0x74>
 8007a1e:	230c      	movs	r3, #12
 8007a20:	602b      	str	r3, [r5, #0]
 8007a22:	e7d6      	b.n	80079d2 <_free_r+0x22>
 8007a24:	6820      	ldr	r0, [r4, #0]
 8007a26:	1821      	adds	r1, r4, r0
 8007a28:	428b      	cmp	r3, r1
 8007a2a:	bf04      	itt	eq
 8007a2c:	6819      	ldreq	r1, [r3, #0]
 8007a2e:	685b      	ldreq	r3, [r3, #4]
 8007a30:	6063      	str	r3, [r4, #4]
 8007a32:	bf04      	itt	eq
 8007a34:	1809      	addeq	r1, r1, r0
 8007a36:	6021      	streq	r1, [r4, #0]
 8007a38:	6054      	str	r4, [r2, #4]
 8007a3a:	e7ca      	b.n	80079d2 <_free_r+0x22>
 8007a3c:	bd38      	pop	{r3, r4, r5, pc}
 8007a3e:	bf00      	nop
 8007a40:	200043f8 	.word	0x200043f8

08007a44 <malloc>:
 8007a44:	4b02      	ldr	r3, [pc, #8]	@ (8007a50 <malloc+0xc>)
 8007a46:	4601      	mov	r1, r0
 8007a48:	6818      	ldr	r0, [r3, #0]
 8007a4a:	f000 b825 	b.w	8007a98 <_malloc_r>
 8007a4e:	bf00      	nop
 8007a50:	2000001c 	.word	0x2000001c

08007a54 <sbrk_aligned>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	4e0f      	ldr	r6, [pc, #60]	@ (8007a94 <sbrk_aligned+0x40>)
 8007a58:	460c      	mov	r4, r1
 8007a5a:	6831      	ldr	r1, [r6, #0]
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	b911      	cbnz	r1, 8007a66 <sbrk_aligned+0x12>
 8007a60:	f000 fe46 	bl	80086f0 <_sbrk_r>
 8007a64:	6030      	str	r0, [r6, #0]
 8007a66:	4621      	mov	r1, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 fe41 	bl	80086f0 <_sbrk_r>
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	d103      	bne.n	8007a7a <sbrk_aligned+0x26>
 8007a72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007a76:	4620      	mov	r0, r4
 8007a78:	bd70      	pop	{r4, r5, r6, pc}
 8007a7a:	1cc4      	adds	r4, r0, #3
 8007a7c:	f024 0403 	bic.w	r4, r4, #3
 8007a80:	42a0      	cmp	r0, r4
 8007a82:	d0f8      	beq.n	8007a76 <sbrk_aligned+0x22>
 8007a84:	1a21      	subs	r1, r4, r0
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 fe32 	bl	80086f0 <_sbrk_r>
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	d1f2      	bne.n	8007a76 <sbrk_aligned+0x22>
 8007a90:	e7ef      	b.n	8007a72 <sbrk_aligned+0x1e>
 8007a92:	bf00      	nop
 8007a94:	200043f4 	.word	0x200043f4

08007a98 <_malloc_r>:
 8007a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a9c:	1ccd      	adds	r5, r1, #3
 8007a9e:	f025 0503 	bic.w	r5, r5, #3
 8007aa2:	3508      	adds	r5, #8
 8007aa4:	2d0c      	cmp	r5, #12
 8007aa6:	bf38      	it	cc
 8007aa8:	250c      	movcc	r5, #12
 8007aaa:	2d00      	cmp	r5, #0
 8007aac:	4606      	mov	r6, r0
 8007aae:	db01      	blt.n	8007ab4 <_malloc_r+0x1c>
 8007ab0:	42a9      	cmp	r1, r5
 8007ab2:	d904      	bls.n	8007abe <_malloc_r+0x26>
 8007ab4:	230c      	movs	r3, #12
 8007ab6:	6033      	str	r3, [r6, #0]
 8007ab8:	2000      	movs	r0, #0
 8007aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007abe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b94 <_malloc_r+0xfc>
 8007ac2:	f000 f869 	bl	8007b98 <__malloc_lock>
 8007ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8007aca:	461c      	mov	r4, r3
 8007acc:	bb44      	cbnz	r4, 8007b20 <_malloc_r+0x88>
 8007ace:	4629      	mov	r1, r5
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f7ff ffbf 	bl	8007a54 <sbrk_aligned>
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	4604      	mov	r4, r0
 8007ada:	d158      	bne.n	8007b8e <_malloc_r+0xf6>
 8007adc:	f8d8 4000 	ldr.w	r4, [r8]
 8007ae0:	4627      	mov	r7, r4
 8007ae2:	2f00      	cmp	r7, #0
 8007ae4:	d143      	bne.n	8007b6e <_malloc_r+0xd6>
 8007ae6:	2c00      	cmp	r4, #0
 8007ae8:	d04b      	beq.n	8007b82 <_malloc_r+0xea>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	4639      	mov	r1, r7
 8007aee:	4630      	mov	r0, r6
 8007af0:	eb04 0903 	add.w	r9, r4, r3
 8007af4:	f000 fdfc 	bl	80086f0 <_sbrk_r>
 8007af8:	4581      	cmp	r9, r0
 8007afa:	d142      	bne.n	8007b82 <_malloc_r+0xea>
 8007afc:	6821      	ldr	r1, [r4, #0]
 8007afe:	1a6d      	subs	r5, r5, r1
 8007b00:	4629      	mov	r1, r5
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7ff ffa6 	bl	8007a54 <sbrk_aligned>
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d03a      	beq.n	8007b82 <_malloc_r+0xea>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	442b      	add	r3, r5
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	f8d8 3000 	ldr.w	r3, [r8]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	bb62      	cbnz	r2, 8007b74 <_malloc_r+0xdc>
 8007b1a:	f8c8 7000 	str.w	r7, [r8]
 8007b1e:	e00f      	b.n	8007b40 <_malloc_r+0xa8>
 8007b20:	6822      	ldr	r2, [r4, #0]
 8007b22:	1b52      	subs	r2, r2, r5
 8007b24:	d420      	bmi.n	8007b68 <_malloc_r+0xd0>
 8007b26:	2a0b      	cmp	r2, #11
 8007b28:	d917      	bls.n	8007b5a <_malloc_r+0xc2>
 8007b2a:	1961      	adds	r1, r4, r5
 8007b2c:	42a3      	cmp	r3, r4
 8007b2e:	6025      	str	r5, [r4, #0]
 8007b30:	bf18      	it	ne
 8007b32:	6059      	strne	r1, [r3, #4]
 8007b34:	6863      	ldr	r3, [r4, #4]
 8007b36:	bf08      	it	eq
 8007b38:	f8c8 1000 	streq.w	r1, [r8]
 8007b3c:	5162      	str	r2, [r4, r5]
 8007b3e:	604b      	str	r3, [r1, #4]
 8007b40:	4630      	mov	r0, r6
 8007b42:	f000 f82f 	bl	8007ba4 <__malloc_unlock>
 8007b46:	f104 000b 	add.w	r0, r4, #11
 8007b4a:	1d23      	adds	r3, r4, #4
 8007b4c:	f020 0007 	bic.w	r0, r0, #7
 8007b50:	1ac2      	subs	r2, r0, r3
 8007b52:	bf1c      	itt	ne
 8007b54:	1a1b      	subne	r3, r3, r0
 8007b56:	50a3      	strne	r3, [r4, r2]
 8007b58:	e7af      	b.n	8007aba <_malloc_r+0x22>
 8007b5a:	6862      	ldr	r2, [r4, #4]
 8007b5c:	42a3      	cmp	r3, r4
 8007b5e:	bf0c      	ite	eq
 8007b60:	f8c8 2000 	streq.w	r2, [r8]
 8007b64:	605a      	strne	r2, [r3, #4]
 8007b66:	e7eb      	b.n	8007b40 <_malloc_r+0xa8>
 8007b68:	4623      	mov	r3, r4
 8007b6a:	6864      	ldr	r4, [r4, #4]
 8007b6c:	e7ae      	b.n	8007acc <_malloc_r+0x34>
 8007b6e:	463c      	mov	r4, r7
 8007b70:	687f      	ldr	r7, [r7, #4]
 8007b72:	e7b6      	b.n	8007ae2 <_malloc_r+0x4a>
 8007b74:	461a      	mov	r2, r3
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	d1fb      	bne.n	8007b74 <_malloc_r+0xdc>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	6053      	str	r3, [r2, #4]
 8007b80:	e7de      	b.n	8007b40 <_malloc_r+0xa8>
 8007b82:	230c      	movs	r3, #12
 8007b84:	6033      	str	r3, [r6, #0]
 8007b86:	4630      	mov	r0, r6
 8007b88:	f000 f80c 	bl	8007ba4 <__malloc_unlock>
 8007b8c:	e794      	b.n	8007ab8 <_malloc_r+0x20>
 8007b8e:	6005      	str	r5, [r0, #0]
 8007b90:	e7d6      	b.n	8007b40 <_malloc_r+0xa8>
 8007b92:	bf00      	nop
 8007b94:	200043f8 	.word	0x200043f8

08007b98 <__malloc_lock>:
 8007b98:	4801      	ldr	r0, [pc, #4]	@ (8007ba0 <__malloc_lock+0x8>)
 8007b9a:	f7ff b8aa 	b.w	8006cf2 <__retarget_lock_acquire_recursive>
 8007b9e:	bf00      	nop
 8007ba0:	200043f0 	.word	0x200043f0

08007ba4 <__malloc_unlock>:
 8007ba4:	4801      	ldr	r0, [pc, #4]	@ (8007bac <__malloc_unlock+0x8>)
 8007ba6:	f7ff b8a5 	b.w	8006cf4 <__retarget_lock_release_recursive>
 8007baa:	bf00      	nop
 8007bac:	200043f0 	.word	0x200043f0

08007bb0 <_Balloc>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	69c6      	ldr	r6, [r0, #28]
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	460d      	mov	r5, r1
 8007bb8:	b976      	cbnz	r6, 8007bd8 <_Balloc+0x28>
 8007bba:	2010      	movs	r0, #16
 8007bbc:	f7ff ff42 	bl	8007a44 <malloc>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	61e0      	str	r0, [r4, #28]
 8007bc4:	b920      	cbnz	r0, 8007bd0 <_Balloc+0x20>
 8007bc6:	4b18      	ldr	r3, [pc, #96]	@ (8007c28 <_Balloc+0x78>)
 8007bc8:	4818      	ldr	r0, [pc, #96]	@ (8007c2c <_Balloc+0x7c>)
 8007bca:	216b      	movs	r1, #107	@ 0x6b
 8007bcc:	f000 fda0 	bl	8008710 <__assert_func>
 8007bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bd4:	6006      	str	r6, [r0, #0]
 8007bd6:	60c6      	str	r6, [r0, #12]
 8007bd8:	69e6      	ldr	r6, [r4, #28]
 8007bda:	68f3      	ldr	r3, [r6, #12]
 8007bdc:	b183      	cbz	r3, 8007c00 <_Balloc+0x50>
 8007bde:	69e3      	ldr	r3, [r4, #28]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007be6:	b9b8      	cbnz	r0, 8007c18 <_Balloc+0x68>
 8007be8:	2101      	movs	r1, #1
 8007bea:	fa01 f605 	lsl.w	r6, r1, r5
 8007bee:	1d72      	adds	r2, r6, #5
 8007bf0:	0092      	lsls	r2, r2, #2
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f000 fdaa 	bl	800874c <_calloc_r>
 8007bf8:	b160      	cbz	r0, 8007c14 <_Balloc+0x64>
 8007bfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bfe:	e00e      	b.n	8007c1e <_Balloc+0x6e>
 8007c00:	2221      	movs	r2, #33	@ 0x21
 8007c02:	2104      	movs	r1, #4
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 fda1 	bl	800874c <_calloc_r>
 8007c0a:	69e3      	ldr	r3, [r4, #28]
 8007c0c:	60f0      	str	r0, [r6, #12]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e4      	bne.n	8007bde <_Balloc+0x2e>
 8007c14:	2000      	movs	r0, #0
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	6802      	ldr	r2, [r0, #0]
 8007c1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c24:	e7f7      	b.n	8007c16 <_Balloc+0x66>
 8007c26:	bf00      	nop
 8007c28:	08008e71 	.word	0x08008e71
 8007c2c:	08008ef1 	.word	0x08008ef1

08007c30 <_Bfree>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	69c6      	ldr	r6, [r0, #28]
 8007c34:	4605      	mov	r5, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	b976      	cbnz	r6, 8007c58 <_Bfree+0x28>
 8007c3a:	2010      	movs	r0, #16
 8007c3c:	f7ff ff02 	bl	8007a44 <malloc>
 8007c40:	4602      	mov	r2, r0
 8007c42:	61e8      	str	r0, [r5, #28]
 8007c44:	b920      	cbnz	r0, 8007c50 <_Bfree+0x20>
 8007c46:	4b09      	ldr	r3, [pc, #36]	@ (8007c6c <_Bfree+0x3c>)
 8007c48:	4809      	ldr	r0, [pc, #36]	@ (8007c70 <_Bfree+0x40>)
 8007c4a:	218f      	movs	r1, #143	@ 0x8f
 8007c4c:	f000 fd60 	bl	8008710 <__assert_func>
 8007c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c54:	6006      	str	r6, [r0, #0]
 8007c56:	60c6      	str	r6, [r0, #12]
 8007c58:	b13c      	cbz	r4, 8007c6a <_Bfree+0x3a>
 8007c5a:	69eb      	ldr	r3, [r5, #28]
 8007c5c:	6862      	ldr	r2, [r4, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c64:	6021      	str	r1, [r4, #0]
 8007c66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	08008e71 	.word	0x08008e71
 8007c70:	08008ef1 	.word	0x08008ef1

08007c74 <__multadd>:
 8007c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c78:	690d      	ldr	r5, [r1, #16]
 8007c7a:	4607      	mov	r7, r0
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	461e      	mov	r6, r3
 8007c80:	f101 0c14 	add.w	ip, r1, #20
 8007c84:	2000      	movs	r0, #0
 8007c86:	f8dc 3000 	ldr.w	r3, [ip]
 8007c8a:	b299      	uxth	r1, r3
 8007c8c:	fb02 6101 	mla	r1, r2, r1, r6
 8007c90:	0c1e      	lsrs	r6, r3, #16
 8007c92:	0c0b      	lsrs	r3, r1, #16
 8007c94:	fb02 3306 	mla	r3, r2, r6, r3
 8007c98:	b289      	uxth	r1, r1
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ca0:	4285      	cmp	r5, r0
 8007ca2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ca6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007caa:	dcec      	bgt.n	8007c86 <__multadd+0x12>
 8007cac:	b30e      	cbz	r6, 8007cf2 <__multadd+0x7e>
 8007cae:	68a3      	ldr	r3, [r4, #8]
 8007cb0:	42ab      	cmp	r3, r5
 8007cb2:	dc19      	bgt.n	8007ce8 <__multadd+0x74>
 8007cb4:	6861      	ldr	r1, [r4, #4]
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	3101      	adds	r1, #1
 8007cba:	f7ff ff79 	bl	8007bb0 <_Balloc>
 8007cbe:	4680      	mov	r8, r0
 8007cc0:	b928      	cbnz	r0, 8007cce <__multadd+0x5a>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf8 <__multadd+0x84>)
 8007cc6:	480d      	ldr	r0, [pc, #52]	@ (8007cfc <__multadd+0x88>)
 8007cc8:	21ba      	movs	r1, #186	@ 0xba
 8007cca:	f000 fd21 	bl	8008710 <__assert_func>
 8007cce:	6922      	ldr	r2, [r4, #16]
 8007cd0:	3202      	adds	r2, #2
 8007cd2:	f104 010c 	add.w	r1, r4, #12
 8007cd6:	0092      	lsls	r2, r2, #2
 8007cd8:	300c      	adds	r0, #12
 8007cda:	f7ff f80c 	bl	8006cf6 <memcpy>
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4638      	mov	r0, r7
 8007ce2:	f7ff ffa5 	bl	8007c30 <_Bfree>
 8007ce6:	4644      	mov	r4, r8
 8007ce8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cec:	3501      	adds	r5, #1
 8007cee:	615e      	str	r6, [r3, #20]
 8007cf0:	6125      	str	r5, [r4, #16]
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cf8:	08008ee0 	.word	0x08008ee0
 8007cfc:	08008ef1 	.word	0x08008ef1

08007d00 <__hi0bits>:
 8007d00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d04:	4603      	mov	r3, r0
 8007d06:	bf36      	itet	cc
 8007d08:	0403      	lslcc	r3, r0, #16
 8007d0a:	2000      	movcs	r0, #0
 8007d0c:	2010      	movcc	r0, #16
 8007d0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d12:	bf3c      	itt	cc
 8007d14:	021b      	lslcc	r3, r3, #8
 8007d16:	3008      	addcc	r0, #8
 8007d18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d1c:	bf3c      	itt	cc
 8007d1e:	011b      	lslcc	r3, r3, #4
 8007d20:	3004      	addcc	r0, #4
 8007d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d26:	bf3c      	itt	cc
 8007d28:	009b      	lslcc	r3, r3, #2
 8007d2a:	3002      	addcc	r0, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	db05      	blt.n	8007d3c <__hi0bits+0x3c>
 8007d30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007d34:	f100 0001 	add.w	r0, r0, #1
 8007d38:	bf08      	it	eq
 8007d3a:	2020      	moveq	r0, #32
 8007d3c:	4770      	bx	lr

08007d3e <__lo0bits>:
 8007d3e:	6803      	ldr	r3, [r0, #0]
 8007d40:	4602      	mov	r2, r0
 8007d42:	f013 0007 	ands.w	r0, r3, #7
 8007d46:	d00b      	beq.n	8007d60 <__lo0bits+0x22>
 8007d48:	07d9      	lsls	r1, r3, #31
 8007d4a:	d421      	bmi.n	8007d90 <__lo0bits+0x52>
 8007d4c:	0798      	lsls	r0, r3, #30
 8007d4e:	bf49      	itett	mi
 8007d50:	085b      	lsrmi	r3, r3, #1
 8007d52:	089b      	lsrpl	r3, r3, #2
 8007d54:	2001      	movmi	r0, #1
 8007d56:	6013      	strmi	r3, [r2, #0]
 8007d58:	bf5c      	itt	pl
 8007d5a:	6013      	strpl	r3, [r2, #0]
 8007d5c:	2002      	movpl	r0, #2
 8007d5e:	4770      	bx	lr
 8007d60:	b299      	uxth	r1, r3
 8007d62:	b909      	cbnz	r1, 8007d68 <__lo0bits+0x2a>
 8007d64:	0c1b      	lsrs	r3, r3, #16
 8007d66:	2010      	movs	r0, #16
 8007d68:	b2d9      	uxtb	r1, r3
 8007d6a:	b909      	cbnz	r1, 8007d70 <__lo0bits+0x32>
 8007d6c:	3008      	adds	r0, #8
 8007d6e:	0a1b      	lsrs	r3, r3, #8
 8007d70:	0719      	lsls	r1, r3, #28
 8007d72:	bf04      	itt	eq
 8007d74:	091b      	lsreq	r3, r3, #4
 8007d76:	3004      	addeq	r0, #4
 8007d78:	0799      	lsls	r1, r3, #30
 8007d7a:	bf04      	itt	eq
 8007d7c:	089b      	lsreq	r3, r3, #2
 8007d7e:	3002      	addeq	r0, #2
 8007d80:	07d9      	lsls	r1, r3, #31
 8007d82:	d403      	bmi.n	8007d8c <__lo0bits+0x4e>
 8007d84:	085b      	lsrs	r3, r3, #1
 8007d86:	f100 0001 	add.w	r0, r0, #1
 8007d8a:	d003      	beq.n	8007d94 <__lo0bits+0x56>
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	4770      	bx	lr
 8007d90:	2000      	movs	r0, #0
 8007d92:	4770      	bx	lr
 8007d94:	2020      	movs	r0, #32
 8007d96:	4770      	bx	lr

08007d98 <__i2b>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	f7ff ff07 	bl	8007bb0 <_Balloc>
 8007da2:	4602      	mov	r2, r0
 8007da4:	b928      	cbnz	r0, 8007db2 <__i2b+0x1a>
 8007da6:	4b05      	ldr	r3, [pc, #20]	@ (8007dbc <__i2b+0x24>)
 8007da8:	4805      	ldr	r0, [pc, #20]	@ (8007dc0 <__i2b+0x28>)
 8007daa:	f240 1145 	movw	r1, #325	@ 0x145
 8007dae:	f000 fcaf 	bl	8008710 <__assert_func>
 8007db2:	2301      	movs	r3, #1
 8007db4:	6144      	str	r4, [r0, #20]
 8007db6:	6103      	str	r3, [r0, #16]
 8007db8:	bd10      	pop	{r4, pc}
 8007dba:	bf00      	nop
 8007dbc:	08008ee0 	.word	0x08008ee0
 8007dc0:	08008ef1 	.word	0x08008ef1

08007dc4 <__multiply>:
 8007dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc8:	4614      	mov	r4, r2
 8007dca:	690a      	ldr	r2, [r1, #16]
 8007dcc:	6923      	ldr	r3, [r4, #16]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	bfa8      	it	ge
 8007dd2:	4623      	movge	r3, r4
 8007dd4:	460f      	mov	r7, r1
 8007dd6:	bfa4      	itt	ge
 8007dd8:	460c      	movge	r4, r1
 8007dda:	461f      	movge	r7, r3
 8007ddc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007de0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007de4:	68a3      	ldr	r3, [r4, #8]
 8007de6:	6861      	ldr	r1, [r4, #4]
 8007de8:	eb0a 0609 	add.w	r6, sl, r9
 8007dec:	42b3      	cmp	r3, r6
 8007dee:	b085      	sub	sp, #20
 8007df0:	bfb8      	it	lt
 8007df2:	3101      	addlt	r1, #1
 8007df4:	f7ff fedc 	bl	8007bb0 <_Balloc>
 8007df8:	b930      	cbnz	r0, 8007e08 <__multiply+0x44>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	4b44      	ldr	r3, [pc, #272]	@ (8007f10 <__multiply+0x14c>)
 8007dfe:	4845      	ldr	r0, [pc, #276]	@ (8007f14 <__multiply+0x150>)
 8007e00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e04:	f000 fc84 	bl	8008710 <__assert_func>
 8007e08:	f100 0514 	add.w	r5, r0, #20
 8007e0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e10:	462b      	mov	r3, r5
 8007e12:	2200      	movs	r2, #0
 8007e14:	4543      	cmp	r3, r8
 8007e16:	d321      	bcc.n	8007e5c <__multiply+0x98>
 8007e18:	f107 0114 	add.w	r1, r7, #20
 8007e1c:	f104 0214 	add.w	r2, r4, #20
 8007e20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007e24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007e28:	9302      	str	r3, [sp, #8]
 8007e2a:	1b13      	subs	r3, r2, r4
 8007e2c:	3b15      	subs	r3, #21
 8007e2e:	f023 0303 	bic.w	r3, r3, #3
 8007e32:	3304      	adds	r3, #4
 8007e34:	f104 0715 	add.w	r7, r4, #21
 8007e38:	42ba      	cmp	r2, r7
 8007e3a:	bf38      	it	cc
 8007e3c:	2304      	movcc	r3, #4
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	9b02      	ldr	r3, [sp, #8]
 8007e42:	9103      	str	r1, [sp, #12]
 8007e44:	428b      	cmp	r3, r1
 8007e46:	d80c      	bhi.n	8007e62 <__multiply+0x9e>
 8007e48:	2e00      	cmp	r6, #0
 8007e4a:	dd03      	ble.n	8007e54 <__multiply+0x90>
 8007e4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d05b      	beq.n	8007f0c <__multiply+0x148>
 8007e54:	6106      	str	r6, [r0, #16]
 8007e56:	b005      	add	sp, #20
 8007e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5c:	f843 2b04 	str.w	r2, [r3], #4
 8007e60:	e7d8      	b.n	8007e14 <__multiply+0x50>
 8007e62:	f8b1 a000 	ldrh.w	sl, [r1]
 8007e66:	f1ba 0f00 	cmp.w	sl, #0
 8007e6a:	d024      	beq.n	8007eb6 <__multiply+0xf2>
 8007e6c:	f104 0e14 	add.w	lr, r4, #20
 8007e70:	46a9      	mov	r9, r5
 8007e72:	f04f 0c00 	mov.w	ip, #0
 8007e76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e7a:	f8d9 3000 	ldr.w	r3, [r9]
 8007e7e:	fa1f fb87 	uxth.w	fp, r7
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	fb0a 330b 	mla	r3, sl, fp, r3
 8007e88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007e8c:	f8d9 7000 	ldr.w	r7, [r9]
 8007e90:	4463      	add	r3, ip
 8007e92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e96:	fb0a c70b 	mla	r7, sl, fp, ip
 8007e9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ea4:	4572      	cmp	r2, lr
 8007ea6:	f849 3b04 	str.w	r3, [r9], #4
 8007eaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007eae:	d8e2      	bhi.n	8007e76 <__multiply+0xb2>
 8007eb0:	9b01      	ldr	r3, [sp, #4]
 8007eb2:	f845 c003 	str.w	ip, [r5, r3]
 8007eb6:	9b03      	ldr	r3, [sp, #12]
 8007eb8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ebc:	3104      	adds	r1, #4
 8007ebe:	f1b9 0f00 	cmp.w	r9, #0
 8007ec2:	d021      	beq.n	8007f08 <__multiply+0x144>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	f104 0c14 	add.w	ip, r4, #20
 8007eca:	46ae      	mov	lr, r5
 8007ecc:	f04f 0a00 	mov.w	sl, #0
 8007ed0:	f8bc b000 	ldrh.w	fp, [ip]
 8007ed4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007ed8:	fb09 770b 	mla	r7, r9, fp, r7
 8007edc:	4457      	add	r7, sl
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ee4:	f84e 3b04 	str.w	r3, [lr], #4
 8007ee8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007eec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ef0:	f8be 3000 	ldrh.w	r3, [lr]
 8007ef4:	fb09 330a 	mla	r3, r9, sl, r3
 8007ef8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007efc:	4562      	cmp	r2, ip
 8007efe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f02:	d8e5      	bhi.n	8007ed0 <__multiply+0x10c>
 8007f04:	9f01      	ldr	r7, [sp, #4]
 8007f06:	51eb      	str	r3, [r5, r7]
 8007f08:	3504      	adds	r5, #4
 8007f0a:	e799      	b.n	8007e40 <__multiply+0x7c>
 8007f0c:	3e01      	subs	r6, #1
 8007f0e:	e79b      	b.n	8007e48 <__multiply+0x84>
 8007f10:	08008ee0 	.word	0x08008ee0
 8007f14:	08008ef1 	.word	0x08008ef1

08007f18 <__pow5mult>:
 8007f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f1c:	4615      	mov	r5, r2
 8007f1e:	f012 0203 	ands.w	r2, r2, #3
 8007f22:	4607      	mov	r7, r0
 8007f24:	460e      	mov	r6, r1
 8007f26:	d007      	beq.n	8007f38 <__pow5mult+0x20>
 8007f28:	4c25      	ldr	r4, [pc, #148]	@ (8007fc0 <__pow5mult+0xa8>)
 8007f2a:	3a01      	subs	r2, #1
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f32:	f7ff fe9f 	bl	8007c74 <__multadd>
 8007f36:	4606      	mov	r6, r0
 8007f38:	10ad      	asrs	r5, r5, #2
 8007f3a:	d03d      	beq.n	8007fb8 <__pow5mult+0xa0>
 8007f3c:	69fc      	ldr	r4, [r7, #28]
 8007f3e:	b97c      	cbnz	r4, 8007f60 <__pow5mult+0x48>
 8007f40:	2010      	movs	r0, #16
 8007f42:	f7ff fd7f 	bl	8007a44 <malloc>
 8007f46:	4602      	mov	r2, r0
 8007f48:	61f8      	str	r0, [r7, #28]
 8007f4a:	b928      	cbnz	r0, 8007f58 <__pow5mult+0x40>
 8007f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007fc4 <__pow5mult+0xac>)
 8007f4e:	481e      	ldr	r0, [pc, #120]	@ (8007fc8 <__pow5mult+0xb0>)
 8007f50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f54:	f000 fbdc 	bl	8008710 <__assert_func>
 8007f58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f5c:	6004      	str	r4, [r0, #0]
 8007f5e:	60c4      	str	r4, [r0, #12]
 8007f60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007f64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f68:	b94c      	cbnz	r4, 8007f7e <__pow5mult+0x66>
 8007f6a:	f240 2171 	movw	r1, #625	@ 0x271
 8007f6e:	4638      	mov	r0, r7
 8007f70:	f7ff ff12 	bl	8007d98 <__i2b>
 8007f74:	2300      	movs	r3, #0
 8007f76:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	6003      	str	r3, [r0, #0]
 8007f7e:	f04f 0900 	mov.w	r9, #0
 8007f82:	07eb      	lsls	r3, r5, #31
 8007f84:	d50a      	bpl.n	8007f9c <__pow5mult+0x84>
 8007f86:	4631      	mov	r1, r6
 8007f88:	4622      	mov	r2, r4
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	f7ff ff1a 	bl	8007dc4 <__multiply>
 8007f90:	4631      	mov	r1, r6
 8007f92:	4680      	mov	r8, r0
 8007f94:	4638      	mov	r0, r7
 8007f96:	f7ff fe4b 	bl	8007c30 <_Bfree>
 8007f9a:	4646      	mov	r6, r8
 8007f9c:	106d      	asrs	r5, r5, #1
 8007f9e:	d00b      	beq.n	8007fb8 <__pow5mult+0xa0>
 8007fa0:	6820      	ldr	r0, [r4, #0]
 8007fa2:	b938      	cbnz	r0, 8007fb4 <__pow5mult+0x9c>
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	4638      	mov	r0, r7
 8007faa:	f7ff ff0b 	bl	8007dc4 <__multiply>
 8007fae:	6020      	str	r0, [r4, #0]
 8007fb0:	f8c0 9000 	str.w	r9, [r0]
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	e7e4      	b.n	8007f82 <__pow5mult+0x6a>
 8007fb8:	4630      	mov	r0, r6
 8007fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fbe:	bf00      	nop
 8007fc0:	08008f4c 	.word	0x08008f4c
 8007fc4:	08008e71 	.word	0x08008e71
 8007fc8:	08008ef1 	.word	0x08008ef1

08007fcc <__lshift>:
 8007fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd0:	460c      	mov	r4, r1
 8007fd2:	6849      	ldr	r1, [r1, #4]
 8007fd4:	6923      	ldr	r3, [r4, #16]
 8007fd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007fda:	68a3      	ldr	r3, [r4, #8]
 8007fdc:	4607      	mov	r7, r0
 8007fde:	4691      	mov	r9, r2
 8007fe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fe4:	f108 0601 	add.w	r6, r8, #1
 8007fe8:	42b3      	cmp	r3, r6
 8007fea:	db0b      	blt.n	8008004 <__lshift+0x38>
 8007fec:	4638      	mov	r0, r7
 8007fee:	f7ff fddf 	bl	8007bb0 <_Balloc>
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	b948      	cbnz	r0, 800800a <__lshift+0x3e>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	4b28      	ldr	r3, [pc, #160]	@ (800809c <__lshift+0xd0>)
 8007ffa:	4829      	ldr	r0, [pc, #164]	@ (80080a0 <__lshift+0xd4>)
 8007ffc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008000:	f000 fb86 	bl	8008710 <__assert_func>
 8008004:	3101      	adds	r1, #1
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	e7ee      	b.n	8007fe8 <__lshift+0x1c>
 800800a:	2300      	movs	r3, #0
 800800c:	f100 0114 	add.w	r1, r0, #20
 8008010:	f100 0210 	add.w	r2, r0, #16
 8008014:	4618      	mov	r0, r3
 8008016:	4553      	cmp	r3, sl
 8008018:	db33      	blt.n	8008082 <__lshift+0xb6>
 800801a:	6920      	ldr	r0, [r4, #16]
 800801c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008020:	f104 0314 	add.w	r3, r4, #20
 8008024:	f019 091f 	ands.w	r9, r9, #31
 8008028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800802c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008030:	d02b      	beq.n	800808a <__lshift+0xbe>
 8008032:	f1c9 0e20 	rsb	lr, r9, #32
 8008036:	468a      	mov	sl, r1
 8008038:	2200      	movs	r2, #0
 800803a:	6818      	ldr	r0, [r3, #0]
 800803c:	fa00 f009 	lsl.w	r0, r0, r9
 8008040:	4310      	orrs	r0, r2
 8008042:	f84a 0b04 	str.w	r0, [sl], #4
 8008046:	f853 2b04 	ldr.w	r2, [r3], #4
 800804a:	459c      	cmp	ip, r3
 800804c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008050:	d8f3      	bhi.n	800803a <__lshift+0x6e>
 8008052:	ebac 0304 	sub.w	r3, ip, r4
 8008056:	3b15      	subs	r3, #21
 8008058:	f023 0303 	bic.w	r3, r3, #3
 800805c:	3304      	adds	r3, #4
 800805e:	f104 0015 	add.w	r0, r4, #21
 8008062:	4584      	cmp	ip, r0
 8008064:	bf38      	it	cc
 8008066:	2304      	movcc	r3, #4
 8008068:	50ca      	str	r2, [r1, r3]
 800806a:	b10a      	cbz	r2, 8008070 <__lshift+0xa4>
 800806c:	f108 0602 	add.w	r6, r8, #2
 8008070:	3e01      	subs	r6, #1
 8008072:	4638      	mov	r0, r7
 8008074:	612e      	str	r6, [r5, #16]
 8008076:	4621      	mov	r1, r4
 8008078:	f7ff fdda 	bl	8007c30 <_Bfree>
 800807c:	4628      	mov	r0, r5
 800807e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008082:	f842 0f04 	str.w	r0, [r2, #4]!
 8008086:	3301      	adds	r3, #1
 8008088:	e7c5      	b.n	8008016 <__lshift+0x4a>
 800808a:	3904      	subs	r1, #4
 800808c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008090:	f841 2f04 	str.w	r2, [r1, #4]!
 8008094:	459c      	cmp	ip, r3
 8008096:	d8f9      	bhi.n	800808c <__lshift+0xc0>
 8008098:	e7ea      	b.n	8008070 <__lshift+0xa4>
 800809a:	bf00      	nop
 800809c:	08008ee0 	.word	0x08008ee0
 80080a0:	08008ef1 	.word	0x08008ef1

080080a4 <__mcmp>:
 80080a4:	690a      	ldr	r2, [r1, #16]
 80080a6:	4603      	mov	r3, r0
 80080a8:	6900      	ldr	r0, [r0, #16]
 80080aa:	1a80      	subs	r0, r0, r2
 80080ac:	b530      	push	{r4, r5, lr}
 80080ae:	d10e      	bne.n	80080ce <__mcmp+0x2a>
 80080b0:	3314      	adds	r3, #20
 80080b2:	3114      	adds	r1, #20
 80080b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80080b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80080bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080c4:	4295      	cmp	r5, r2
 80080c6:	d003      	beq.n	80080d0 <__mcmp+0x2c>
 80080c8:	d205      	bcs.n	80080d6 <__mcmp+0x32>
 80080ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080ce:	bd30      	pop	{r4, r5, pc}
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	d3f3      	bcc.n	80080bc <__mcmp+0x18>
 80080d4:	e7fb      	b.n	80080ce <__mcmp+0x2a>
 80080d6:	2001      	movs	r0, #1
 80080d8:	e7f9      	b.n	80080ce <__mcmp+0x2a>
	...

080080dc <__mdiff>:
 80080dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	4689      	mov	r9, r1
 80080e2:	4606      	mov	r6, r0
 80080e4:	4611      	mov	r1, r2
 80080e6:	4648      	mov	r0, r9
 80080e8:	4614      	mov	r4, r2
 80080ea:	f7ff ffdb 	bl	80080a4 <__mcmp>
 80080ee:	1e05      	subs	r5, r0, #0
 80080f0:	d112      	bne.n	8008118 <__mdiff+0x3c>
 80080f2:	4629      	mov	r1, r5
 80080f4:	4630      	mov	r0, r6
 80080f6:	f7ff fd5b 	bl	8007bb0 <_Balloc>
 80080fa:	4602      	mov	r2, r0
 80080fc:	b928      	cbnz	r0, 800810a <__mdiff+0x2e>
 80080fe:	4b3f      	ldr	r3, [pc, #252]	@ (80081fc <__mdiff+0x120>)
 8008100:	f240 2137 	movw	r1, #567	@ 0x237
 8008104:	483e      	ldr	r0, [pc, #248]	@ (8008200 <__mdiff+0x124>)
 8008106:	f000 fb03 	bl	8008710 <__assert_func>
 800810a:	2301      	movs	r3, #1
 800810c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008110:	4610      	mov	r0, r2
 8008112:	b003      	add	sp, #12
 8008114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008118:	bfbc      	itt	lt
 800811a:	464b      	movlt	r3, r9
 800811c:	46a1      	movlt	r9, r4
 800811e:	4630      	mov	r0, r6
 8008120:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008124:	bfba      	itte	lt
 8008126:	461c      	movlt	r4, r3
 8008128:	2501      	movlt	r5, #1
 800812a:	2500      	movge	r5, #0
 800812c:	f7ff fd40 	bl	8007bb0 <_Balloc>
 8008130:	4602      	mov	r2, r0
 8008132:	b918      	cbnz	r0, 800813c <__mdiff+0x60>
 8008134:	4b31      	ldr	r3, [pc, #196]	@ (80081fc <__mdiff+0x120>)
 8008136:	f240 2145 	movw	r1, #581	@ 0x245
 800813a:	e7e3      	b.n	8008104 <__mdiff+0x28>
 800813c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008140:	6926      	ldr	r6, [r4, #16]
 8008142:	60c5      	str	r5, [r0, #12]
 8008144:	f109 0310 	add.w	r3, r9, #16
 8008148:	f109 0514 	add.w	r5, r9, #20
 800814c:	f104 0e14 	add.w	lr, r4, #20
 8008150:	f100 0b14 	add.w	fp, r0, #20
 8008154:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008158:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	46d9      	mov	r9, fp
 8008160:	f04f 0c00 	mov.w	ip, #0
 8008164:	9b01      	ldr	r3, [sp, #4]
 8008166:	f85e 0b04 	ldr.w	r0, [lr], #4
 800816a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800816e:	9301      	str	r3, [sp, #4]
 8008170:	fa1f f38a 	uxth.w	r3, sl
 8008174:	4619      	mov	r1, r3
 8008176:	b283      	uxth	r3, r0
 8008178:	1acb      	subs	r3, r1, r3
 800817a:	0c00      	lsrs	r0, r0, #16
 800817c:	4463      	add	r3, ip
 800817e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008182:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008186:	b29b      	uxth	r3, r3
 8008188:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800818c:	4576      	cmp	r6, lr
 800818e:	f849 3b04 	str.w	r3, [r9], #4
 8008192:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008196:	d8e5      	bhi.n	8008164 <__mdiff+0x88>
 8008198:	1b33      	subs	r3, r6, r4
 800819a:	3b15      	subs	r3, #21
 800819c:	f023 0303 	bic.w	r3, r3, #3
 80081a0:	3415      	adds	r4, #21
 80081a2:	3304      	adds	r3, #4
 80081a4:	42a6      	cmp	r6, r4
 80081a6:	bf38      	it	cc
 80081a8:	2304      	movcc	r3, #4
 80081aa:	441d      	add	r5, r3
 80081ac:	445b      	add	r3, fp
 80081ae:	461e      	mov	r6, r3
 80081b0:	462c      	mov	r4, r5
 80081b2:	4544      	cmp	r4, r8
 80081b4:	d30e      	bcc.n	80081d4 <__mdiff+0xf8>
 80081b6:	f108 0103 	add.w	r1, r8, #3
 80081ba:	1b49      	subs	r1, r1, r5
 80081bc:	f021 0103 	bic.w	r1, r1, #3
 80081c0:	3d03      	subs	r5, #3
 80081c2:	45a8      	cmp	r8, r5
 80081c4:	bf38      	it	cc
 80081c6:	2100      	movcc	r1, #0
 80081c8:	440b      	add	r3, r1
 80081ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081ce:	b191      	cbz	r1, 80081f6 <__mdiff+0x11a>
 80081d0:	6117      	str	r7, [r2, #16]
 80081d2:	e79d      	b.n	8008110 <__mdiff+0x34>
 80081d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80081d8:	46e6      	mov	lr, ip
 80081da:	0c08      	lsrs	r0, r1, #16
 80081dc:	fa1c fc81 	uxtah	ip, ip, r1
 80081e0:	4471      	add	r1, lr
 80081e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80081e6:	b289      	uxth	r1, r1
 80081e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80081ec:	f846 1b04 	str.w	r1, [r6], #4
 80081f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081f4:	e7dd      	b.n	80081b2 <__mdiff+0xd6>
 80081f6:	3f01      	subs	r7, #1
 80081f8:	e7e7      	b.n	80081ca <__mdiff+0xee>
 80081fa:	bf00      	nop
 80081fc:	08008ee0 	.word	0x08008ee0
 8008200:	08008ef1 	.word	0x08008ef1

08008204 <__d2b>:
 8008204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008208:	460f      	mov	r7, r1
 800820a:	2101      	movs	r1, #1
 800820c:	ec59 8b10 	vmov	r8, r9, d0
 8008210:	4616      	mov	r6, r2
 8008212:	f7ff fccd 	bl	8007bb0 <_Balloc>
 8008216:	4604      	mov	r4, r0
 8008218:	b930      	cbnz	r0, 8008228 <__d2b+0x24>
 800821a:	4602      	mov	r2, r0
 800821c:	4b23      	ldr	r3, [pc, #140]	@ (80082ac <__d2b+0xa8>)
 800821e:	4824      	ldr	r0, [pc, #144]	@ (80082b0 <__d2b+0xac>)
 8008220:	f240 310f 	movw	r1, #783	@ 0x30f
 8008224:	f000 fa74 	bl	8008710 <__assert_func>
 8008228:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800822c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008230:	b10d      	cbz	r5, 8008236 <__d2b+0x32>
 8008232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	f1b8 0300 	subs.w	r3, r8, #0
 800823c:	d023      	beq.n	8008286 <__d2b+0x82>
 800823e:	4668      	mov	r0, sp
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	f7ff fd7c 	bl	8007d3e <__lo0bits>
 8008246:	e9dd 1200 	ldrd	r1, r2, [sp]
 800824a:	b1d0      	cbz	r0, 8008282 <__d2b+0x7e>
 800824c:	f1c0 0320 	rsb	r3, r0, #32
 8008250:	fa02 f303 	lsl.w	r3, r2, r3
 8008254:	430b      	orrs	r3, r1
 8008256:	40c2      	lsrs	r2, r0
 8008258:	6163      	str	r3, [r4, #20]
 800825a:	9201      	str	r2, [sp, #4]
 800825c:	9b01      	ldr	r3, [sp, #4]
 800825e:	61a3      	str	r3, [r4, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	bf0c      	ite	eq
 8008264:	2201      	moveq	r2, #1
 8008266:	2202      	movne	r2, #2
 8008268:	6122      	str	r2, [r4, #16]
 800826a:	b1a5      	cbz	r5, 8008296 <__d2b+0x92>
 800826c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008270:	4405      	add	r5, r0
 8008272:	603d      	str	r5, [r7, #0]
 8008274:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008278:	6030      	str	r0, [r6, #0]
 800827a:	4620      	mov	r0, r4
 800827c:	b003      	add	sp, #12
 800827e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008282:	6161      	str	r1, [r4, #20]
 8008284:	e7ea      	b.n	800825c <__d2b+0x58>
 8008286:	a801      	add	r0, sp, #4
 8008288:	f7ff fd59 	bl	8007d3e <__lo0bits>
 800828c:	9b01      	ldr	r3, [sp, #4]
 800828e:	6163      	str	r3, [r4, #20]
 8008290:	3020      	adds	r0, #32
 8008292:	2201      	movs	r2, #1
 8008294:	e7e8      	b.n	8008268 <__d2b+0x64>
 8008296:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800829a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800829e:	6038      	str	r0, [r7, #0]
 80082a0:	6918      	ldr	r0, [r3, #16]
 80082a2:	f7ff fd2d 	bl	8007d00 <__hi0bits>
 80082a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082aa:	e7e5      	b.n	8008278 <__d2b+0x74>
 80082ac:	08008ee0 	.word	0x08008ee0
 80082b0:	08008ef1 	.word	0x08008ef1

080082b4 <__ssputs_r>:
 80082b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b8:	688e      	ldr	r6, [r1, #8]
 80082ba:	461f      	mov	r7, r3
 80082bc:	42be      	cmp	r6, r7
 80082be:	680b      	ldr	r3, [r1, #0]
 80082c0:	4682      	mov	sl, r0
 80082c2:	460c      	mov	r4, r1
 80082c4:	4690      	mov	r8, r2
 80082c6:	d82d      	bhi.n	8008324 <__ssputs_r+0x70>
 80082c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082d0:	d026      	beq.n	8008320 <__ssputs_r+0x6c>
 80082d2:	6965      	ldr	r5, [r4, #20]
 80082d4:	6909      	ldr	r1, [r1, #16]
 80082d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082da:	eba3 0901 	sub.w	r9, r3, r1
 80082de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082e2:	1c7b      	adds	r3, r7, #1
 80082e4:	444b      	add	r3, r9
 80082e6:	106d      	asrs	r5, r5, #1
 80082e8:	429d      	cmp	r5, r3
 80082ea:	bf38      	it	cc
 80082ec:	461d      	movcc	r5, r3
 80082ee:	0553      	lsls	r3, r2, #21
 80082f0:	d527      	bpl.n	8008342 <__ssputs_r+0x8e>
 80082f2:	4629      	mov	r1, r5
 80082f4:	f7ff fbd0 	bl	8007a98 <_malloc_r>
 80082f8:	4606      	mov	r6, r0
 80082fa:	b360      	cbz	r0, 8008356 <__ssputs_r+0xa2>
 80082fc:	6921      	ldr	r1, [r4, #16]
 80082fe:	464a      	mov	r2, r9
 8008300:	f7fe fcf9 	bl	8006cf6 <memcpy>
 8008304:	89a3      	ldrh	r3, [r4, #12]
 8008306:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800830a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800830e:	81a3      	strh	r3, [r4, #12]
 8008310:	6126      	str	r6, [r4, #16]
 8008312:	6165      	str	r5, [r4, #20]
 8008314:	444e      	add	r6, r9
 8008316:	eba5 0509 	sub.w	r5, r5, r9
 800831a:	6026      	str	r6, [r4, #0]
 800831c:	60a5      	str	r5, [r4, #8]
 800831e:	463e      	mov	r6, r7
 8008320:	42be      	cmp	r6, r7
 8008322:	d900      	bls.n	8008326 <__ssputs_r+0x72>
 8008324:	463e      	mov	r6, r7
 8008326:	6820      	ldr	r0, [r4, #0]
 8008328:	4632      	mov	r2, r6
 800832a:	4641      	mov	r1, r8
 800832c:	f000 f9c6 	bl	80086bc <memmove>
 8008330:	68a3      	ldr	r3, [r4, #8]
 8008332:	1b9b      	subs	r3, r3, r6
 8008334:	60a3      	str	r3, [r4, #8]
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	4433      	add	r3, r6
 800833a:	6023      	str	r3, [r4, #0]
 800833c:	2000      	movs	r0, #0
 800833e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008342:	462a      	mov	r2, r5
 8008344:	f000 fa28 	bl	8008798 <_realloc_r>
 8008348:	4606      	mov	r6, r0
 800834a:	2800      	cmp	r0, #0
 800834c:	d1e0      	bne.n	8008310 <__ssputs_r+0x5c>
 800834e:	6921      	ldr	r1, [r4, #16]
 8008350:	4650      	mov	r0, sl
 8008352:	f7ff fb2d 	bl	80079b0 <_free_r>
 8008356:	230c      	movs	r3, #12
 8008358:	f8ca 3000 	str.w	r3, [sl]
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008362:	81a3      	strh	r3, [r4, #12]
 8008364:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008368:	e7e9      	b.n	800833e <__ssputs_r+0x8a>
	...

0800836c <_svfiprintf_r>:
 800836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008370:	4698      	mov	r8, r3
 8008372:	898b      	ldrh	r3, [r1, #12]
 8008374:	061b      	lsls	r3, r3, #24
 8008376:	b09d      	sub	sp, #116	@ 0x74
 8008378:	4607      	mov	r7, r0
 800837a:	460d      	mov	r5, r1
 800837c:	4614      	mov	r4, r2
 800837e:	d510      	bpl.n	80083a2 <_svfiprintf_r+0x36>
 8008380:	690b      	ldr	r3, [r1, #16]
 8008382:	b973      	cbnz	r3, 80083a2 <_svfiprintf_r+0x36>
 8008384:	2140      	movs	r1, #64	@ 0x40
 8008386:	f7ff fb87 	bl	8007a98 <_malloc_r>
 800838a:	6028      	str	r0, [r5, #0]
 800838c:	6128      	str	r0, [r5, #16]
 800838e:	b930      	cbnz	r0, 800839e <_svfiprintf_r+0x32>
 8008390:	230c      	movs	r3, #12
 8008392:	603b      	str	r3, [r7, #0]
 8008394:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008398:	b01d      	add	sp, #116	@ 0x74
 800839a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839e:	2340      	movs	r3, #64	@ 0x40
 80083a0:	616b      	str	r3, [r5, #20]
 80083a2:	2300      	movs	r3, #0
 80083a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083a6:	2320      	movs	r3, #32
 80083a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80083b0:	2330      	movs	r3, #48	@ 0x30
 80083b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008550 <_svfiprintf_r+0x1e4>
 80083b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083ba:	f04f 0901 	mov.w	r9, #1
 80083be:	4623      	mov	r3, r4
 80083c0:	469a      	mov	sl, r3
 80083c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083c6:	b10a      	cbz	r2, 80083cc <_svfiprintf_r+0x60>
 80083c8:	2a25      	cmp	r2, #37	@ 0x25
 80083ca:	d1f9      	bne.n	80083c0 <_svfiprintf_r+0x54>
 80083cc:	ebba 0b04 	subs.w	fp, sl, r4
 80083d0:	d00b      	beq.n	80083ea <_svfiprintf_r+0x7e>
 80083d2:	465b      	mov	r3, fp
 80083d4:	4622      	mov	r2, r4
 80083d6:	4629      	mov	r1, r5
 80083d8:	4638      	mov	r0, r7
 80083da:	f7ff ff6b 	bl	80082b4 <__ssputs_r>
 80083de:	3001      	adds	r0, #1
 80083e0:	f000 80a7 	beq.w	8008532 <_svfiprintf_r+0x1c6>
 80083e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083e6:	445a      	add	r2, fp
 80083e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80083ea:	f89a 3000 	ldrb.w	r3, [sl]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 809f 	beq.w	8008532 <_svfiprintf_r+0x1c6>
 80083f4:	2300      	movs	r3, #0
 80083f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083fe:	f10a 0a01 	add.w	sl, sl, #1
 8008402:	9304      	str	r3, [sp, #16]
 8008404:	9307      	str	r3, [sp, #28]
 8008406:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800840a:	931a      	str	r3, [sp, #104]	@ 0x68
 800840c:	4654      	mov	r4, sl
 800840e:	2205      	movs	r2, #5
 8008410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008414:	484e      	ldr	r0, [pc, #312]	@ (8008550 <_svfiprintf_r+0x1e4>)
 8008416:	f7f7 fedb 	bl	80001d0 <memchr>
 800841a:	9a04      	ldr	r2, [sp, #16]
 800841c:	b9d8      	cbnz	r0, 8008456 <_svfiprintf_r+0xea>
 800841e:	06d0      	lsls	r0, r2, #27
 8008420:	bf44      	itt	mi
 8008422:	2320      	movmi	r3, #32
 8008424:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008428:	0711      	lsls	r1, r2, #28
 800842a:	bf44      	itt	mi
 800842c:	232b      	movmi	r3, #43	@ 0x2b
 800842e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008432:	f89a 3000 	ldrb.w	r3, [sl]
 8008436:	2b2a      	cmp	r3, #42	@ 0x2a
 8008438:	d015      	beq.n	8008466 <_svfiprintf_r+0xfa>
 800843a:	9a07      	ldr	r2, [sp, #28]
 800843c:	4654      	mov	r4, sl
 800843e:	2000      	movs	r0, #0
 8008440:	f04f 0c0a 	mov.w	ip, #10
 8008444:	4621      	mov	r1, r4
 8008446:	f811 3b01 	ldrb.w	r3, [r1], #1
 800844a:	3b30      	subs	r3, #48	@ 0x30
 800844c:	2b09      	cmp	r3, #9
 800844e:	d94b      	bls.n	80084e8 <_svfiprintf_r+0x17c>
 8008450:	b1b0      	cbz	r0, 8008480 <_svfiprintf_r+0x114>
 8008452:	9207      	str	r2, [sp, #28]
 8008454:	e014      	b.n	8008480 <_svfiprintf_r+0x114>
 8008456:	eba0 0308 	sub.w	r3, r0, r8
 800845a:	fa09 f303 	lsl.w	r3, r9, r3
 800845e:	4313      	orrs	r3, r2
 8008460:	9304      	str	r3, [sp, #16]
 8008462:	46a2      	mov	sl, r4
 8008464:	e7d2      	b.n	800840c <_svfiprintf_r+0xa0>
 8008466:	9b03      	ldr	r3, [sp, #12]
 8008468:	1d19      	adds	r1, r3, #4
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	9103      	str	r1, [sp, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	bfbb      	ittet	lt
 8008472:	425b      	neglt	r3, r3
 8008474:	f042 0202 	orrlt.w	r2, r2, #2
 8008478:	9307      	strge	r3, [sp, #28]
 800847a:	9307      	strlt	r3, [sp, #28]
 800847c:	bfb8      	it	lt
 800847e:	9204      	strlt	r2, [sp, #16]
 8008480:	7823      	ldrb	r3, [r4, #0]
 8008482:	2b2e      	cmp	r3, #46	@ 0x2e
 8008484:	d10a      	bne.n	800849c <_svfiprintf_r+0x130>
 8008486:	7863      	ldrb	r3, [r4, #1]
 8008488:	2b2a      	cmp	r3, #42	@ 0x2a
 800848a:	d132      	bne.n	80084f2 <_svfiprintf_r+0x186>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	1d1a      	adds	r2, r3, #4
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	9203      	str	r2, [sp, #12]
 8008494:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008498:	3402      	adds	r4, #2
 800849a:	9305      	str	r3, [sp, #20]
 800849c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008560 <_svfiprintf_r+0x1f4>
 80084a0:	7821      	ldrb	r1, [r4, #0]
 80084a2:	2203      	movs	r2, #3
 80084a4:	4650      	mov	r0, sl
 80084a6:	f7f7 fe93 	bl	80001d0 <memchr>
 80084aa:	b138      	cbz	r0, 80084bc <_svfiprintf_r+0x150>
 80084ac:	9b04      	ldr	r3, [sp, #16]
 80084ae:	eba0 000a 	sub.w	r0, r0, sl
 80084b2:	2240      	movs	r2, #64	@ 0x40
 80084b4:	4082      	lsls	r2, r0
 80084b6:	4313      	orrs	r3, r2
 80084b8:	3401      	adds	r4, #1
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c0:	4824      	ldr	r0, [pc, #144]	@ (8008554 <_svfiprintf_r+0x1e8>)
 80084c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084c6:	2206      	movs	r2, #6
 80084c8:	f7f7 fe82 	bl	80001d0 <memchr>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d036      	beq.n	800853e <_svfiprintf_r+0x1d2>
 80084d0:	4b21      	ldr	r3, [pc, #132]	@ (8008558 <_svfiprintf_r+0x1ec>)
 80084d2:	bb1b      	cbnz	r3, 800851c <_svfiprintf_r+0x1b0>
 80084d4:	9b03      	ldr	r3, [sp, #12]
 80084d6:	3307      	adds	r3, #7
 80084d8:	f023 0307 	bic.w	r3, r3, #7
 80084dc:	3308      	adds	r3, #8
 80084de:	9303      	str	r3, [sp, #12]
 80084e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e2:	4433      	add	r3, r6
 80084e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084e6:	e76a      	b.n	80083be <_svfiprintf_r+0x52>
 80084e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80084ec:	460c      	mov	r4, r1
 80084ee:	2001      	movs	r0, #1
 80084f0:	e7a8      	b.n	8008444 <_svfiprintf_r+0xd8>
 80084f2:	2300      	movs	r3, #0
 80084f4:	3401      	adds	r4, #1
 80084f6:	9305      	str	r3, [sp, #20]
 80084f8:	4619      	mov	r1, r3
 80084fa:	f04f 0c0a 	mov.w	ip, #10
 80084fe:	4620      	mov	r0, r4
 8008500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008504:	3a30      	subs	r2, #48	@ 0x30
 8008506:	2a09      	cmp	r2, #9
 8008508:	d903      	bls.n	8008512 <_svfiprintf_r+0x1a6>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0c6      	beq.n	800849c <_svfiprintf_r+0x130>
 800850e:	9105      	str	r1, [sp, #20]
 8008510:	e7c4      	b.n	800849c <_svfiprintf_r+0x130>
 8008512:	fb0c 2101 	mla	r1, ip, r1, r2
 8008516:	4604      	mov	r4, r0
 8008518:	2301      	movs	r3, #1
 800851a:	e7f0      	b.n	80084fe <_svfiprintf_r+0x192>
 800851c:	ab03      	add	r3, sp, #12
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	462a      	mov	r2, r5
 8008522:	4b0e      	ldr	r3, [pc, #56]	@ (800855c <_svfiprintf_r+0x1f0>)
 8008524:	a904      	add	r1, sp, #16
 8008526:	4638      	mov	r0, r7
 8008528:	f7fd fe1e 	bl	8006168 <_printf_float>
 800852c:	1c42      	adds	r2, r0, #1
 800852e:	4606      	mov	r6, r0
 8008530:	d1d6      	bne.n	80084e0 <_svfiprintf_r+0x174>
 8008532:	89ab      	ldrh	r3, [r5, #12]
 8008534:	065b      	lsls	r3, r3, #25
 8008536:	f53f af2d 	bmi.w	8008394 <_svfiprintf_r+0x28>
 800853a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800853c:	e72c      	b.n	8008398 <_svfiprintf_r+0x2c>
 800853e:	ab03      	add	r3, sp, #12
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	462a      	mov	r2, r5
 8008544:	4b05      	ldr	r3, [pc, #20]	@ (800855c <_svfiprintf_r+0x1f0>)
 8008546:	a904      	add	r1, sp, #16
 8008548:	4638      	mov	r0, r7
 800854a:	f7fe f8a5 	bl	8006698 <_printf_i>
 800854e:	e7ed      	b.n	800852c <_svfiprintf_r+0x1c0>
 8008550:	08009048 	.word	0x08009048
 8008554:	08009052 	.word	0x08009052
 8008558:	08006169 	.word	0x08006169
 800855c:	080082b5 	.word	0x080082b5
 8008560:	0800904e 	.word	0x0800904e

08008564 <__sflush_r>:
 8008564:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800856c:	0716      	lsls	r6, r2, #28
 800856e:	4605      	mov	r5, r0
 8008570:	460c      	mov	r4, r1
 8008572:	d454      	bmi.n	800861e <__sflush_r+0xba>
 8008574:	684b      	ldr	r3, [r1, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	dc02      	bgt.n	8008580 <__sflush_r+0x1c>
 800857a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800857c:	2b00      	cmp	r3, #0
 800857e:	dd48      	ble.n	8008612 <__sflush_r+0xae>
 8008580:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008582:	2e00      	cmp	r6, #0
 8008584:	d045      	beq.n	8008612 <__sflush_r+0xae>
 8008586:	2300      	movs	r3, #0
 8008588:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800858c:	682f      	ldr	r7, [r5, #0]
 800858e:	6a21      	ldr	r1, [r4, #32]
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	d030      	beq.n	80085f6 <__sflush_r+0x92>
 8008594:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	0759      	lsls	r1, r3, #29
 800859a:	d505      	bpl.n	80085a8 <__sflush_r+0x44>
 800859c:	6863      	ldr	r3, [r4, #4]
 800859e:	1ad2      	subs	r2, r2, r3
 80085a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085a2:	b10b      	cbz	r3, 80085a8 <__sflush_r+0x44>
 80085a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085a6:	1ad2      	subs	r2, r2, r3
 80085a8:	2300      	movs	r3, #0
 80085aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085ac:	6a21      	ldr	r1, [r4, #32]
 80085ae:	4628      	mov	r0, r5
 80085b0:	47b0      	blx	r6
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	d106      	bne.n	80085c6 <__sflush_r+0x62>
 80085b8:	6829      	ldr	r1, [r5, #0]
 80085ba:	291d      	cmp	r1, #29
 80085bc:	d82b      	bhi.n	8008616 <__sflush_r+0xb2>
 80085be:	4a2a      	ldr	r2, [pc, #168]	@ (8008668 <__sflush_r+0x104>)
 80085c0:	410a      	asrs	r2, r1
 80085c2:	07d6      	lsls	r6, r2, #31
 80085c4:	d427      	bmi.n	8008616 <__sflush_r+0xb2>
 80085c6:	2200      	movs	r2, #0
 80085c8:	6062      	str	r2, [r4, #4]
 80085ca:	04d9      	lsls	r1, r3, #19
 80085cc:	6922      	ldr	r2, [r4, #16]
 80085ce:	6022      	str	r2, [r4, #0]
 80085d0:	d504      	bpl.n	80085dc <__sflush_r+0x78>
 80085d2:	1c42      	adds	r2, r0, #1
 80085d4:	d101      	bne.n	80085da <__sflush_r+0x76>
 80085d6:	682b      	ldr	r3, [r5, #0]
 80085d8:	b903      	cbnz	r3, 80085dc <__sflush_r+0x78>
 80085da:	6560      	str	r0, [r4, #84]	@ 0x54
 80085dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085de:	602f      	str	r7, [r5, #0]
 80085e0:	b1b9      	cbz	r1, 8008612 <__sflush_r+0xae>
 80085e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085e6:	4299      	cmp	r1, r3
 80085e8:	d002      	beq.n	80085f0 <__sflush_r+0x8c>
 80085ea:	4628      	mov	r0, r5
 80085ec:	f7ff f9e0 	bl	80079b0 <_free_r>
 80085f0:	2300      	movs	r3, #0
 80085f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80085f4:	e00d      	b.n	8008612 <__sflush_r+0xae>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4628      	mov	r0, r5
 80085fa:	47b0      	blx	r6
 80085fc:	4602      	mov	r2, r0
 80085fe:	1c50      	adds	r0, r2, #1
 8008600:	d1c9      	bne.n	8008596 <__sflush_r+0x32>
 8008602:	682b      	ldr	r3, [r5, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0c6      	beq.n	8008596 <__sflush_r+0x32>
 8008608:	2b1d      	cmp	r3, #29
 800860a:	d001      	beq.n	8008610 <__sflush_r+0xac>
 800860c:	2b16      	cmp	r3, #22
 800860e:	d11e      	bne.n	800864e <__sflush_r+0xea>
 8008610:	602f      	str	r7, [r5, #0]
 8008612:	2000      	movs	r0, #0
 8008614:	e022      	b.n	800865c <__sflush_r+0xf8>
 8008616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800861a:	b21b      	sxth	r3, r3
 800861c:	e01b      	b.n	8008656 <__sflush_r+0xf2>
 800861e:	690f      	ldr	r7, [r1, #16]
 8008620:	2f00      	cmp	r7, #0
 8008622:	d0f6      	beq.n	8008612 <__sflush_r+0xae>
 8008624:	0793      	lsls	r3, r2, #30
 8008626:	680e      	ldr	r6, [r1, #0]
 8008628:	bf08      	it	eq
 800862a:	694b      	ldreq	r3, [r1, #20]
 800862c:	600f      	str	r7, [r1, #0]
 800862e:	bf18      	it	ne
 8008630:	2300      	movne	r3, #0
 8008632:	eba6 0807 	sub.w	r8, r6, r7
 8008636:	608b      	str	r3, [r1, #8]
 8008638:	f1b8 0f00 	cmp.w	r8, #0
 800863c:	dde9      	ble.n	8008612 <__sflush_r+0xae>
 800863e:	6a21      	ldr	r1, [r4, #32]
 8008640:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008642:	4643      	mov	r3, r8
 8008644:	463a      	mov	r2, r7
 8008646:	4628      	mov	r0, r5
 8008648:	47b0      	blx	r6
 800864a:	2800      	cmp	r0, #0
 800864c:	dc08      	bgt.n	8008660 <__sflush_r+0xfc>
 800864e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008656:	81a3      	strh	r3, [r4, #12]
 8008658:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800865c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008660:	4407      	add	r7, r0
 8008662:	eba8 0800 	sub.w	r8, r8, r0
 8008666:	e7e7      	b.n	8008638 <__sflush_r+0xd4>
 8008668:	dfbffffe 	.word	0xdfbffffe

0800866c <_fflush_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	690b      	ldr	r3, [r1, #16]
 8008670:	4605      	mov	r5, r0
 8008672:	460c      	mov	r4, r1
 8008674:	b913      	cbnz	r3, 800867c <_fflush_r+0x10>
 8008676:	2500      	movs	r5, #0
 8008678:	4628      	mov	r0, r5
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	b118      	cbz	r0, 8008686 <_fflush_r+0x1a>
 800867e:	6a03      	ldr	r3, [r0, #32]
 8008680:	b90b      	cbnz	r3, 8008686 <_fflush_r+0x1a>
 8008682:	f7fe f9b5 	bl	80069f0 <__sinit>
 8008686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d0f3      	beq.n	8008676 <_fflush_r+0xa>
 800868e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008690:	07d0      	lsls	r0, r2, #31
 8008692:	d404      	bmi.n	800869e <_fflush_r+0x32>
 8008694:	0599      	lsls	r1, r3, #22
 8008696:	d402      	bmi.n	800869e <_fflush_r+0x32>
 8008698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800869a:	f7fe fb2a 	bl	8006cf2 <__retarget_lock_acquire_recursive>
 800869e:	4628      	mov	r0, r5
 80086a0:	4621      	mov	r1, r4
 80086a2:	f7ff ff5f 	bl	8008564 <__sflush_r>
 80086a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086a8:	07da      	lsls	r2, r3, #31
 80086aa:	4605      	mov	r5, r0
 80086ac:	d4e4      	bmi.n	8008678 <_fflush_r+0xc>
 80086ae:	89a3      	ldrh	r3, [r4, #12]
 80086b0:	059b      	lsls	r3, r3, #22
 80086b2:	d4e1      	bmi.n	8008678 <_fflush_r+0xc>
 80086b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086b6:	f7fe fb1d 	bl	8006cf4 <__retarget_lock_release_recursive>
 80086ba:	e7dd      	b.n	8008678 <_fflush_r+0xc>

080086bc <memmove>:
 80086bc:	4288      	cmp	r0, r1
 80086be:	b510      	push	{r4, lr}
 80086c0:	eb01 0402 	add.w	r4, r1, r2
 80086c4:	d902      	bls.n	80086cc <memmove+0x10>
 80086c6:	4284      	cmp	r4, r0
 80086c8:	4623      	mov	r3, r4
 80086ca:	d807      	bhi.n	80086dc <memmove+0x20>
 80086cc:	1e43      	subs	r3, r0, #1
 80086ce:	42a1      	cmp	r1, r4
 80086d0:	d008      	beq.n	80086e4 <memmove+0x28>
 80086d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086da:	e7f8      	b.n	80086ce <memmove+0x12>
 80086dc:	4402      	add	r2, r0
 80086de:	4601      	mov	r1, r0
 80086e0:	428a      	cmp	r2, r1
 80086e2:	d100      	bne.n	80086e6 <memmove+0x2a>
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086ee:	e7f7      	b.n	80086e0 <memmove+0x24>

080086f0 <_sbrk_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4d06      	ldr	r5, [pc, #24]	@ (800870c <_sbrk_r+0x1c>)
 80086f4:	2300      	movs	r3, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	602b      	str	r3, [r5, #0]
 80086fc:	f7f9 f88e 	bl	800181c <_sbrk>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_sbrk_r+0x1a>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_sbrk_r+0x1a>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	200043ec 	.word	0x200043ec

08008710 <__assert_func>:
 8008710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008712:	4614      	mov	r4, r2
 8008714:	461a      	mov	r2, r3
 8008716:	4b09      	ldr	r3, [pc, #36]	@ (800873c <__assert_func+0x2c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4605      	mov	r5, r0
 800871c:	68d8      	ldr	r0, [r3, #12]
 800871e:	b954      	cbnz	r4, 8008736 <__assert_func+0x26>
 8008720:	4b07      	ldr	r3, [pc, #28]	@ (8008740 <__assert_func+0x30>)
 8008722:	461c      	mov	r4, r3
 8008724:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008728:	9100      	str	r1, [sp, #0]
 800872a:	462b      	mov	r3, r5
 800872c:	4905      	ldr	r1, [pc, #20]	@ (8008744 <__assert_func+0x34>)
 800872e:	f000 f86f 	bl	8008810 <fiprintf>
 8008732:	f000 f87f 	bl	8008834 <abort>
 8008736:	4b04      	ldr	r3, [pc, #16]	@ (8008748 <__assert_func+0x38>)
 8008738:	e7f4      	b.n	8008724 <__assert_func+0x14>
 800873a:	bf00      	nop
 800873c:	2000001c 	.word	0x2000001c
 8008740:	0800909e 	.word	0x0800909e
 8008744:	08009070 	.word	0x08009070
 8008748:	08009063 	.word	0x08009063

0800874c <_calloc_r>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	fba1 5402 	umull	r5, r4, r1, r2
 8008752:	b93c      	cbnz	r4, 8008764 <_calloc_r+0x18>
 8008754:	4629      	mov	r1, r5
 8008756:	f7ff f99f 	bl	8007a98 <_malloc_r>
 800875a:	4606      	mov	r6, r0
 800875c:	b928      	cbnz	r0, 800876a <_calloc_r+0x1e>
 800875e:	2600      	movs	r6, #0
 8008760:	4630      	mov	r0, r6
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	220c      	movs	r2, #12
 8008766:	6002      	str	r2, [r0, #0]
 8008768:	e7f9      	b.n	800875e <_calloc_r+0x12>
 800876a:	462a      	mov	r2, r5
 800876c:	4621      	mov	r1, r4
 800876e:	f7fe f9ec 	bl	8006b4a <memset>
 8008772:	e7f5      	b.n	8008760 <_calloc_r+0x14>

08008774 <__ascii_mbtowc>:
 8008774:	b082      	sub	sp, #8
 8008776:	b901      	cbnz	r1, 800877a <__ascii_mbtowc+0x6>
 8008778:	a901      	add	r1, sp, #4
 800877a:	b142      	cbz	r2, 800878e <__ascii_mbtowc+0x1a>
 800877c:	b14b      	cbz	r3, 8008792 <__ascii_mbtowc+0x1e>
 800877e:	7813      	ldrb	r3, [r2, #0]
 8008780:	600b      	str	r3, [r1, #0]
 8008782:	7812      	ldrb	r2, [r2, #0]
 8008784:	1e10      	subs	r0, r2, #0
 8008786:	bf18      	it	ne
 8008788:	2001      	movne	r0, #1
 800878a:	b002      	add	sp, #8
 800878c:	4770      	bx	lr
 800878e:	4610      	mov	r0, r2
 8008790:	e7fb      	b.n	800878a <__ascii_mbtowc+0x16>
 8008792:	f06f 0001 	mvn.w	r0, #1
 8008796:	e7f8      	b.n	800878a <__ascii_mbtowc+0x16>

08008798 <_realloc_r>:
 8008798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879c:	4680      	mov	r8, r0
 800879e:	4615      	mov	r5, r2
 80087a0:	460c      	mov	r4, r1
 80087a2:	b921      	cbnz	r1, 80087ae <_realloc_r+0x16>
 80087a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087a8:	4611      	mov	r1, r2
 80087aa:	f7ff b975 	b.w	8007a98 <_malloc_r>
 80087ae:	b92a      	cbnz	r2, 80087bc <_realloc_r+0x24>
 80087b0:	f7ff f8fe 	bl	80079b0 <_free_r>
 80087b4:	2400      	movs	r4, #0
 80087b6:	4620      	mov	r0, r4
 80087b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087bc:	f000 f841 	bl	8008842 <_malloc_usable_size_r>
 80087c0:	4285      	cmp	r5, r0
 80087c2:	4606      	mov	r6, r0
 80087c4:	d802      	bhi.n	80087cc <_realloc_r+0x34>
 80087c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80087ca:	d8f4      	bhi.n	80087b6 <_realloc_r+0x1e>
 80087cc:	4629      	mov	r1, r5
 80087ce:	4640      	mov	r0, r8
 80087d0:	f7ff f962 	bl	8007a98 <_malloc_r>
 80087d4:	4607      	mov	r7, r0
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d0ec      	beq.n	80087b4 <_realloc_r+0x1c>
 80087da:	42b5      	cmp	r5, r6
 80087dc:	462a      	mov	r2, r5
 80087de:	4621      	mov	r1, r4
 80087e0:	bf28      	it	cs
 80087e2:	4632      	movcs	r2, r6
 80087e4:	f7fe fa87 	bl	8006cf6 <memcpy>
 80087e8:	4621      	mov	r1, r4
 80087ea:	4640      	mov	r0, r8
 80087ec:	f7ff f8e0 	bl	80079b0 <_free_r>
 80087f0:	463c      	mov	r4, r7
 80087f2:	e7e0      	b.n	80087b6 <_realloc_r+0x1e>

080087f4 <__ascii_wctomb>:
 80087f4:	4603      	mov	r3, r0
 80087f6:	4608      	mov	r0, r1
 80087f8:	b141      	cbz	r1, 800880c <__ascii_wctomb+0x18>
 80087fa:	2aff      	cmp	r2, #255	@ 0xff
 80087fc:	d904      	bls.n	8008808 <__ascii_wctomb+0x14>
 80087fe:	228a      	movs	r2, #138	@ 0x8a
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008806:	4770      	bx	lr
 8008808:	700a      	strb	r2, [r1, #0]
 800880a:	2001      	movs	r0, #1
 800880c:	4770      	bx	lr
	...

08008810 <fiprintf>:
 8008810:	b40e      	push	{r1, r2, r3}
 8008812:	b503      	push	{r0, r1, lr}
 8008814:	4601      	mov	r1, r0
 8008816:	ab03      	add	r3, sp, #12
 8008818:	4805      	ldr	r0, [pc, #20]	@ (8008830 <fiprintf+0x20>)
 800881a:	f853 2b04 	ldr.w	r2, [r3], #4
 800881e:	6800      	ldr	r0, [r0, #0]
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	f000 f83f 	bl	80088a4 <_vfiprintf_r>
 8008826:	b002      	add	sp, #8
 8008828:	f85d eb04 	ldr.w	lr, [sp], #4
 800882c:	b003      	add	sp, #12
 800882e:	4770      	bx	lr
 8008830:	2000001c 	.word	0x2000001c

08008834 <abort>:
 8008834:	b508      	push	{r3, lr}
 8008836:	2006      	movs	r0, #6
 8008838:	f000 fa08 	bl	8008c4c <raise>
 800883c:	2001      	movs	r0, #1
 800883e:	f7f8 ff75 	bl	800172c <_exit>

08008842 <_malloc_usable_size_r>:
 8008842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008846:	1f18      	subs	r0, r3, #4
 8008848:	2b00      	cmp	r3, #0
 800884a:	bfbc      	itt	lt
 800884c:	580b      	ldrlt	r3, [r1, r0]
 800884e:	18c0      	addlt	r0, r0, r3
 8008850:	4770      	bx	lr

08008852 <__sfputc_r>:
 8008852:	6893      	ldr	r3, [r2, #8]
 8008854:	3b01      	subs	r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	b410      	push	{r4}
 800885a:	6093      	str	r3, [r2, #8]
 800885c:	da08      	bge.n	8008870 <__sfputc_r+0x1e>
 800885e:	6994      	ldr	r4, [r2, #24]
 8008860:	42a3      	cmp	r3, r4
 8008862:	db01      	blt.n	8008868 <__sfputc_r+0x16>
 8008864:	290a      	cmp	r1, #10
 8008866:	d103      	bne.n	8008870 <__sfputc_r+0x1e>
 8008868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800886c:	f000 b932 	b.w	8008ad4 <__swbuf_r>
 8008870:	6813      	ldr	r3, [r2, #0]
 8008872:	1c58      	adds	r0, r3, #1
 8008874:	6010      	str	r0, [r2, #0]
 8008876:	7019      	strb	r1, [r3, #0]
 8008878:	4608      	mov	r0, r1
 800887a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800887e:	4770      	bx	lr

08008880 <__sfputs_r>:
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008882:	4606      	mov	r6, r0
 8008884:	460f      	mov	r7, r1
 8008886:	4614      	mov	r4, r2
 8008888:	18d5      	adds	r5, r2, r3
 800888a:	42ac      	cmp	r4, r5
 800888c:	d101      	bne.n	8008892 <__sfputs_r+0x12>
 800888e:	2000      	movs	r0, #0
 8008890:	e007      	b.n	80088a2 <__sfputs_r+0x22>
 8008892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008896:	463a      	mov	r2, r7
 8008898:	4630      	mov	r0, r6
 800889a:	f7ff ffda 	bl	8008852 <__sfputc_r>
 800889e:	1c43      	adds	r3, r0, #1
 80088a0:	d1f3      	bne.n	800888a <__sfputs_r+0xa>
 80088a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088a4 <_vfiprintf_r>:
 80088a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a8:	460d      	mov	r5, r1
 80088aa:	b09d      	sub	sp, #116	@ 0x74
 80088ac:	4614      	mov	r4, r2
 80088ae:	4698      	mov	r8, r3
 80088b0:	4606      	mov	r6, r0
 80088b2:	b118      	cbz	r0, 80088bc <_vfiprintf_r+0x18>
 80088b4:	6a03      	ldr	r3, [r0, #32]
 80088b6:	b90b      	cbnz	r3, 80088bc <_vfiprintf_r+0x18>
 80088b8:	f7fe f89a 	bl	80069f0 <__sinit>
 80088bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088be:	07d9      	lsls	r1, r3, #31
 80088c0:	d405      	bmi.n	80088ce <_vfiprintf_r+0x2a>
 80088c2:	89ab      	ldrh	r3, [r5, #12]
 80088c4:	059a      	lsls	r2, r3, #22
 80088c6:	d402      	bmi.n	80088ce <_vfiprintf_r+0x2a>
 80088c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ca:	f7fe fa12 	bl	8006cf2 <__retarget_lock_acquire_recursive>
 80088ce:	89ab      	ldrh	r3, [r5, #12]
 80088d0:	071b      	lsls	r3, r3, #28
 80088d2:	d501      	bpl.n	80088d8 <_vfiprintf_r+0x34>
 80088d4:	692b      	ldr	r3, [r5, #16]
 80088d6:	b99b      	cbnz	r3, 8008900 <_vfiprintf_r+0x5c>
 80088d8:	4629      	mov	r1, r5
 80088da:	4630      	mov	r0, r6
 80088dc:	f000 f938 	bl	8008b50 <__swsetup_r>
 80088e0:	b170      	cbz	r0, 8008900 <_vfiprintf_r+0x5c>
 80088e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088e4:	07dc      	lsls	r4, r3, #31
 80088e6:	d504      	bpl.n	80088f2 <_vfiprintf_r+0x4e>
 80088e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088ec:	b01d      	add	sp, #116	@ 0x74
 80088ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f2:	89ab      	ldrh	r3, [r5, #12]
 80088f4:	0598      	lsls	r0, r3, #22
 80088f6:	d4f7      	bmi.n	80088e8 <_vfiprintf_r+0x44>
 80088f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088fa:	f7fe f9fb 	bl	8006cf4 <__retarget_lock_release_recursive>
 80088fe:	e7f3      	b.n	80088e8 <_vfiprintf_r+0x44>
 8008900:	2300      	movs	r3, #0
 8008902:	9309      	str	r3, [sp, #36]	@ 0x24
 8008904:	2320      	movs	r3, #32
 8008906:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800890a:	f8cd 800c 	str.w	r8, [sp, #12]
 800890e:	2330      	movs	r3, #48	@ 0x30
 8008910:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ac0 <_vfiprintf_r+0x21c>
 8008914:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008918:	f04f 0901 	mov.w	r9, #1
 800891c:	4623      	mov	r3, r4
 800891e:	469a      	mov	sl, r3
 8008920:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008924:	b10a      	cbz	r2, 800892a <_vfiprintf_r+0x86>
 8008926:	2a25      	cmp	r2, #37	@ 0x25
 8008928:	d1f9      	bne.n	800891e <_vfiprintf_r+0x7a>
 800892a:	ebba 0b04 	subs.w	fp, sl, r4
 800892e:	d00b      	beq.n	8008948 <_vfiprintf_r+0xa4>
 8008930:	465b      	mov	r3, fp
 8008932:	4622      	mov	r2, r4
 8008934:	4629      	mov	r1, r5
 8008936:	4630      	mov	r0, r6
 8008938:	f7ff ffa2 	bl	8008880 <__sfputs_r>
 800893c:	3001      	adds	r0, #1
 800893e:	f000 80a7 	beq.w	8008a90 <_vfiprintf_r+0x1ec>
 8008942:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008944:	445a      	add	r2, fp
 8008946:	9209      	str	r2, [sp, #36]	@ 0x24
 8008948:	f89a 3000 	ldrb.w	r3, [sl]
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 809f 	beq.w	8008a90 <_vfiprintf_r+0x1ec>
 8008952:	2300      	movs	r3, #0
 8008954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800895c:	f10a 0a01 	add.w	sl, sl, #1
 8008960:	9304      	str	r3, [sp, #16]
 8008962:	9307      	str	r3, [sp, #28]
 8008964:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008968:	931a      	str	r3, [sp, #104]	@ 0x68
 800896a:	4654      	mov	r4, sl
 800896c:	2205      	movs	r2, #5
 800896e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008972:	4853      	ldr	r0, [pc, #332]	@ (8008ac0 <_vfiprintf_r+0x21c>)
 8008974:	f7f7 fc2c 	bl	80001d0 <memchr>
 8008978:	9a04      	ldr	r2, [sp, #16]
 800897a:	b9d8      	cbnz	r0, 80089b4 <_vfiprintf_r+0x110>
 800897c:	06d1      	lsls	r1, r2, #27
 800897e:	bf44      	itt	mi
 8008980:	2320      	movmi	r3, #32
 8008982:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008986:	0713      	lsls	r3, r2, #28
 8008988:	bf44      	itt	mi
 800898a:	232b      	movmi	r3, #43	@ 0x2b
 800898c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008990:	f89a 3000 	ldrb.w	r3, [sl]
 8008994:	2b2a      	cmp	r3, #42	@ 0x2a
 8008996:	d015      	beq.n	80089c4 <_vfiprintf_r+0x120>
 8008998:	9a07      	ldr	r2, [sp, #28]
 800899a:	4654      	mov	r4, sl
 800899c:	2000      	movs	r0, #0
 800899e:	f04f 0c0a 	mov.w	ip, #10
 80089a2:	4621      	mov	r1, r4
 80089a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089a8:	3b30      	subs	r3, #48	@ 0x30
 80089aa:	2b09      	cmp	r3, #9
 80089ac:	d94b      	bls.n	8008a46 <_vfiprintf_r+0x1a2>
 80089ae:	b1b0      	cbz	r0, 80089de <_vfiprintf_r+0x13a>
 80089b0:	9207      	str	r2, [sp, #28]
 80089b2:	e014      	b.n	80089de <_vfiprintf_r+0x13a>
 80089b4:	eba0 0308 	sub.w	r3, r0, r8
 80089b8:	fa09 f303 	lsl.w	r3, r9, r3
 80089bc:	4313      	orrs	r3, r2
 80089be:	9304      	str	r3, [sp, #16]
 80089c0:	46a2      	mov	sl, r4
 80089c2:	e7d2      	b.n	800896a <_vfiprintf_r+0xc6>
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	1d19      	adds	r1, r3, #4
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	9103      	str	r1, [sp, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	bfbb      	ittet	lt
 80089d0:	425b      	neglt	r3, r3
 80089d2:	f042 0202 	orrlt.w	r2, r2, #2
 80089d6:	9307      	strge	r3, [sp, #28]
 80089d8:	9307      	strlt	r3, [sp, #28]
 80089da:	bfb8      	it	lt
 80089dc:	9204      	strlt	r2, [sp, #16]
 80089de:	7823      	ldrb	r3, [r4, #0]
 80089e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80089e2:	d10a      	bne.n	80089fa <_vfiprintf_r+0x156>
 80089e4:	7863      	ldrb	r3, [r4, #1]
 80089e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80089e8:	d132      	bne.n	8008a50 <_vfiprintf_r+0x1ac>
 80089ea:	9b03      	ldr	r3, [sp, #12]
 80089ec:	1d1a      	adds	r2, r3, #4
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	9203      	str	r2, [sp, #12]
 80089f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089f6:	3402      	adds	r4, #2
 80089f8:	9305      	str	r3, [sp, #20]
 80089fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ad0 <_vfiprintf_r+0x22c>
 80089fe:	7821      	ldrb	r1, [r4, #0]
 8008a00:	2203      	movs	r2, #3
 8008a02:	4650      	mov	r0, sl
 8008a04:	f7f7 fbe4 	bl	80001d0 <memchr>
 8008a08:	b138      	cbz	r0, 8008a1a <_vfiprintf_r+0x176>
 8008a0a:	9b04      	ldr	r3, [sp, #16]
 8008a0c:	eba0 000a 	sub.w	r0, r0, sl
 8008a10:	2240      	movs	r2, #64	@ 0x40
 8008a12:	4082      	lsls	r2, r0
 8008a14:	4313      	orrs	r3, r2
 8008a16:	3401      	adds	r4, #1
 8008a18:	9304      	str	r3, [sp, #16]
 8008a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1e:	4829      	ldr	r0, [pc, #164]	@ (8008ac4 <_vfiprintf_r+0x220>)
 8008a20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a24:	2206      	movs	r2, #6
 8008a26:	f7f7 fbd3 	bl	80001d0 <memchr>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d03f      	beq.n	8008aae <_vfiprintf_r+0x20a>
 8008a2e:	4b26      	ldr	r3, [pc, #152]	@ (8008ac8 <_vfiprintf_r+0x224>)
 8008a30:	bb1b      	cbnz	r3, 8008a7a <_vfiprintf_r+0x1d6>
 8008a32:	9b03      	ldr	r3, [sp, #12]
 8008a34:	3307      	adds	r3, #7
 8008a36:	f023 0307 	bic.w	r3, r3, #7
 8008a3a:	3308      	adds	r3, #8
 8008a3c:	9303      	str	r3, [sp, #12]
 8008a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a40:	443b      	add	r3, r7
 8008a42:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a44:	e76a      	b.n	800891c <_vfiprintf_r+0x78>
 8008a46:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	2001      	movs	r0, #1
 8008a4e:	e7a8      	b.n	80089a2 <_vfiprintf_r+0xfe>
 8008a50:	2300      	movs	r3, #0
 8008a52:	3401      	adds	r4, #1
 8008a54:	9305      	str	r3, [sp, #20]
 8008a56:	4619      	mov	r1, r3
 8008a58:	f04f 0c0a 	mov.w	ip, #10
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a62:	3a30      	subs	r2, #48	@ 0x30
 8008a64:	2a09      	cmp	r2, #9
 8008a66:	d903      	bls.n	8008a70 <_vfiprintf_r+0x1cc>
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0c6      	beq.n	80089fa <_vfiprintf_r+0x156>
 8008a6c:	9105      	str	r1, [sp, #20]
 8008a6e:	e7c4      	b.n	80089fa <_vfiprintf_r+0x156>
 8008a70:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a74:	4604      	mov	r4, r0
 8008a76:	2301      	movs	r3, #1
 8008a78:	e7f0      	b.n	8008a5c <_vfiprintf_r+0x1b8>
 8008a7a:	ab03      	add	r3, sp, #12
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	462a      	mov	r2, r5
 8008a80:	4b12      	ldr	r3, [pc, #72]	@ (8008acc <_vfiprintf_r+0x228>)
 8008a82:	a904      	add	r1, sp, #16
 8008a84:	4630      	mov	r0, r6
 8008a86:	f7fd fb6f 	bl	8006168 <_printf_float>
 8008a8a:	4607      	mov	r7, r0
 8008a8c:	1c78      	adds	r0, r7, #1
 8008a8e:	d1d6      	bne.n	8008a3e <_vfiprintf_r+0x19a>
 8008a90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a92:	07d9      	lsls	r1, r3, #31
 8008a94:	d405      	bmi.n	8008aa2 <_vfiprintf_r+0x1fe>
 8008a96:	89ab      	ldrh	r3, [r5, #12]
 8008a98:	059a      	lsls	r2, r3, #22
 8008a9a:	d402      	bmi.n	8008aa2 <_vfiprintf_r+0x1fe>
 8008a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a9e:	f7fe f929 	bl	8006cf4 <__retarget_lock_release_recursive>
 8008aa2:	89ab      	ldrh	r3, [r5, #12]
 8008aa4:	065b      	lsls	r3, r3, #25
 8008aa6:	f53f af1f 	bmi.w	80088e8 <_vfiprintf_r+0x44>
 8008aaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008aac:	e71e      	b.n	80088ec <_vfiprintf_r+0x48>
 8008aae:	ab03      	add	r3, sp, #12
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	462a      	mov	r2, r5
 8008ab4:	4b05      	ldr	r3, [pc, #20]	@ (8008acc <_vfiprintf_r+0x228>)
 8008ab6:	a904      	add	r1, sp, #16
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f7fd fded 	bl	8006698 <_printf_i>
 8008abe:	e7e4      	b.n	8008a8a <_vfiprintf_r+0x1e6>
 8008ac0:	08009048 	.word	0x08009048
 8008ac4:	08009052 	.word	0x08009052
 8008ac8:	08006169 	.word	0x08006169
 8008acc:	08008881 	.word	0x08008881
 8008ad0:	0800904e 	.word	0x0800904e

08008ad4 <__swbuf_r>:
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad6:	460e      	mov	r6, r1
 8008ad8:	4614      	mov	r4, r2
 8008ada:	4605      	mov	r5, r0
 8008adc:	b118      	cbz	r0, 8008ae6 <__swbuf_r+0x12>
 8008ade:	6a03      	ldr	r3, [r0, #32]
 8008ae0:	b90b      	cbnz	r3, 8008ae6 <__swbuf_r+0x12>
 8008ae2:	f7fd ff85 	bl	80069f0 <__sinit>
 8008ae6:	69a3      	ldr	r3, [r4, #24]
 8008ae8:	60a3      	str	r3, [r4, #8]
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	071a      	lsls	r2, r3, #28
 8008aee:	d501      	bpl.n	8008af4 <__swbuf_r+0x20>
 8008af0:	6923      	ldr	r3, [r4, #16]
 8008af2:	b943      	cbnz	r3, 8008b06 <__swbuf_r+0x32>
 8008af4:	4621      	mov	r1, r4
 8008af6:	4628      	mov	r0, r5
 8008af8:	f000 f82a 	bl	8008b50 <__swsetup_r>
 8008afc:	b118      	cbz	r0, 8008b06 <__swbuf_r+0x32>
 8008afe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008b02:	4638      	mov	r0, r7
 8008b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	6922      	ldr	r2, [r4, #16]
 8008b0a:	1a98      	subs	r0, r3, r2
 8008b0c:	6963      	ldr	r3, [r4, #20]
 8008b0e:	b2f6      	uxtb	r6, r6
 8008b10:	4283      	cmp	r3, r0
 8008b12:	4637      	mov	r7, r6
 8008b14:	dc05      	bgt.n	8008b22 <__swbuf_r+0x4e>
 8008b16:	4621      	mov	r1, r4
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f7ff fda7 	bl	800866c <_fflush_r>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d1ed      	bne.n	8008afe <__swbuf_r+0x2a>
 8008b22:	68a3      	ldr	r3, [r4, #8]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	60a3      	str	r3, [r4, #8]
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	6022      	str	r2, [r4, #0]
 8008b2e:	701e      	strb	r6, [r3, #0]
 8008b30:	6962      	ldr	r2, [r4, #20]
 8008b32:	1c43      	adds	r3, r0, #1
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d004      	beq.n	8008b42 <__swbuf_r+0x6e>
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	07db      	lsls	r3, r3, #31
 8008b3c:	d5e1      	bpl.n	8008b02 <__swbuf_r+0x2e>
 8008b3e:	2e0a      	cmp	r6, #10
 8008b40:	d1df      	bne.n	8008b02 <__swbuf_r+0x2e>
 8008b42:	4621      	mov	r1, r4
 8008b44:	4628      	mov	r0, r5
 8008b46:	f7ff fd91 	bl	800866c <_fflush_r>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d0d9      	beq.n	8008b02 <__swbuf_r+0x2e>
 8008b4e:	e7d6      	b.n	8008afe <__swbuf_r+0x2a>

08008b50 <__swsetup_r>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4b29      	ldr	r3, [pc, #164]	@ (8008bf8 <__swsetup_r+0xa8>)
 8008b54:	4605      	mov	r5, r0
 8008b56:	6818      	ldr	r0, [r3, #0]
 8008b58:	460c      	mov	r4, r1
 8008b5a:	b118      	cbz	r0, 8008b64 <__swsetup_r+0x14>
 8008b5c:	6a03      	ldr	r3, [r0, #32]
 8008b5e:	b90b      	cbnz	r3, 8008b64 <__swsetup_r+0x14>
 8008b60:	f7fd ff46 	bl	80069f0 <__sinit>
 8008b64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b68:	0719      	lsls	r1, r3, #28
 8008b6a:	d422      	bmi.n	8008bb2 <__swsetup_r+0x62>
 8008b6c:	06da      	lsls	r2, r3, #27
 8008b6e:	d407      	bmi.n	8008b80 <__swsetup_r+0x30>
 8008b70:	2209      	movs	r2, #9
 8008b72:	602a      	str	r2, [r5, #0]
 8008b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b78:	81a3      	strh	r3, [r4, #12]
 8008b7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b7e:	e033      	b.n	8008be8 <__swsetup_r+0x98>
 8008b80:	0758      	lsls	r0, r3, #29
 8008b82:	d512      	bpl.n	8008baa <__swsetup_r+0x5a>
 8008b84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b86:	b141      	cbz	r1, 8008b9a <__swsetup_r+0x4a>
 8008b88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b8c:	4299      	cmp	r1, r3
 8008b8e:	d002      	beq.n	8008b96 <__swsetup_r+0x46>
 8008b90:	4628      	mov	r0, r5
 8008b92:	f7fe ff0d 	bl	80079b0 <_free_r>
 8008b96:	2300      	movs	r3, #0
 8008b98:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ba0:	81a3      	strh	r3, [r4, #12]
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	6063      	str	r3, [r4, #4]
 8008ba6:	6923      	ldr	r3, [r4, #16]
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	f043 0308 	orr.w	r3, r3, #8
 8008bb0:	81a3      	strh	r3, [r4, #12]
 8008bb2:	6923      	ldr	r3, [r4, #16]
 8008bb4:	b94b      	cbnz	r3, 8008bca <__swsetup_r+0x7a>
 8008bb6:	89a3      	ldrh	r3, [r4, #12]
 8008bb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bc0:	d003      	beq.n	8008bca <__swsetup_r+0x7a>
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	f000 f883 	bl	8008cd0 <__smakebuf_r>
 8008bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bce:	f013 0201 	ands.w	r2, r3, #1
 8008bd2:	d00a      	beq.n	8008bea <__swsetup_r+0x9a>
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	60a2      	str	r2, [r4, #8]
 8008bd8:	6962      	ldr	r2, [r4, #20]
 8008bda:	4252      	negs	r2, r2
 8008bdc:	61a2      	str	r2, [r4, #24]
 8008bde:	6922      	ldr	r2, [r4, #16]
 8008be0:	b942      	cbnz	r2, 8008bf4 <__swsetup_r+0xa4>
 8008be2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008be6:	d1c5      	bne.n	8008b74 <__swsetup_r+0x24>
 8008be8:	bd38      	pop	{r3, r4, r5, pc}
 8008bea:	0799      	lsls	r1, r3, #30
 8008bec:	bf58      	it	pl
 8008bee:	6962      	ldrpl	r2, [r4, #20]
 8008bf0:	60a2      	str	r2, [r4, #8]
 8008bf2:	e7f4      	b.n	8008bde <__swsetup_r+0x8e>
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	e7f7      	b.n	8008be8 <__swsetup_r+0x98>
 8008bf8:	2000001c 	.word	0x2000001c

08008bfc <_raise_r>:
 8008bfc:	291f      	cmp	r1, #31
 8008bfe:	b538      	push	{r3, r4, r5, lr}
 8008c00:	4605      	mov	r5, r0
 8008c02:	460c      	mov	r4, r1
 8008c04:	d904      	bls.n	8008c10 <_raise_r+0x14>
 8008c06:	2316      	movs	r3, #22
 8008c08:	6003      	str	r3, [r0, #0]
 8008c0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c0e:	bd38      	pop	{r3, r4, r5, pc}
 8008c10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c12:	b112      	cbz	r2, 8008c1a <_raise_r+0x1e>
 8008c14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c18:	b94b      	cbnz	r3, 8008c2e <_raise_r+0x32>
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f000 f830 	bl	8008c80 <_getpid_r>
 8008c20:	4622      	mov	r2, r4
 8008c22:	4601      	mov	r1, r0
 8008c24:	4628      	mov	r0, r5
 8008c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c2a:	f000 b817 	b.w	8008c5c <_kill_r>
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d00a      	beq.n	8008c48 <_raise_r+0x4c>
 8008c32:	1c59      	adds	r1, r3, #1
 8008c34:	d103      	bne.n	8008c3e <_raise_r+0x42>
 8008c36:	2316      	movs	r3, #22
 8008c38:	6003      	str	r3, [r0, #0]
 8008c3a:	2001      	movs	r0, #1
 8008c3c:	e7e7      	b.n	8008c0e <_raise_r+0x12>
 8008c3e:	2100      	movs	r1, #0
 8008c40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c44:	4620      	mov	r0, r4
 8008c46:	4798      	blx	r3
 8008c48:	2000      	movs	r0, #0
 8008c4a:	e7e0      	b.n	8008c0e <_raise_r+0x12>

08008c4c <raise>:
 8008c4c:	4b02      	ldr	r3, [pc, #8]	@ (8008c58 <raise+0xc>)
 8008c4e:	4601      	mov	r1, r0
 8008c50:	6818      	ldr	r0, [r3, #0]
 8008c52:	f7ff bfd3 	b.w	8008bfc <_raise_r>
 8008c56:	bf00      	nop
 8008c58:	2000001c 	.word	0x2000001c

08008c5c <_kill_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4d07      	ldr	r5, [pc, #28]	@ (8008c7c <_kill_r+0x20>)
 8008c60:	2300      	movs	r3, #0
 8008c62:	4604      	mov	r4, r0
 8008c64:	4608      	mov	r0, r1
 8008c66:	4611      	mov	r1, r2
 8008c68:	602b      	str	r3, [r5, #0]
 8008c6a:	f7f8 fd4f 	bl	800170c <_kill>
 8008c6e:	1c43      	adds	r3, r0, #1
 8008c70:	d102      	bne.n	8008c78 <_kill_r+0x1c>
 8008c72:	682b      	ldr	r3, [r5, #0]
 8008c74:	b103      	cbz	r3, 8008c78 <_kill_r+0x1c>
 8008c76:	6023      	str	r3, [r4, #0]
 8008c78:	bd38      	pop	{r3, r4, r5, pc}
 8008c7a:	bf00      	nop
 8008c7c:	200043ec 	.word	0x200043ec

08008c80 <_getpid_r>:
 8008c80:	f7f8 bd3c 	b.w	80016fc <_getpid>

08008c84 <__swhatbuf_r>:
 8008c84:	b570      	push	{r4, r5, r6, lr}
 8008c86:	460c      	mov	r4, r1
 8008c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	b096      	sub	sp, #88	@ 0x58
 8008c90:	4615      	mov	r5, r2
 8008c92:	461e      	mov	r6, r3
 8008c94:	da0d      	bge.n	8008cb2 <__swhatbuf_r+0x2e>
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c9c:	f04f 0100 	mov.w	r1, #0
 8008ca0:	bf14      	ite	ne
 8008ca2:	2340      	movne	r3, #64	@ 0x40
 8008ca4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ca8:	2000      	movs	r0, #0
 8008caa:	6031      	str	r1, [r6, #0]
 8008cac:	602b      	str	r3, [r5, #0]
 8008cae:	b016      	add	sp, #88	@ 0x58
 8008cb0:	bd70      	pop	{r4, r5, r6, pc}
 8008cb2:	466a      	mov	r2, sp
 8008cb4:	f000 f848 	bl	8008d48 <_fstat_r>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	dbec      	blt.n	8008c96 <__swhatbuf_r+0x12>
 8008cbc:	9901      	ldr	r1, [sp, #4]
 8008cbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008cc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008cc6:	4259      	negs	r1, r3
 8008cc8:	4159      	adcs	r1, r3
 8008cca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cce:	e7eb      	b.n	8008ca8 <__swhatbuf_r+0x24>

08008cd0 <__smakebuf_r>:
 8008cd0:	898b      	ldrh	r3, [r1, #12]
 8008cd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cd4:	079d      	lsls	r5, r3, #30
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	460c      	mov	r4, r1
 8008cda:	d507      	bpl.n	8008cec <__smakebuf_r+0x1c>
 8008cdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	6123      	str	r3, [r4, #16]
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	6163      	str	r3, [r4, #20]
 8008ce8:	b003      	add	sp, #12
 8008cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cec:	ab01      	add	r3, sp, #4
 8008cee:	466a      	mov	r2, sp
 8008cf0:	f7ff ffc8 	bl	8008c84 <__swhatbuf_r>
 8008cf4:	9f00      	ldr	r7, [sp, #0]
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	4639      	mov	r1, r7
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f7fe fecc 	bl	8007a98 <_malloc_r>
 8008d00:	b948      	cbnz	r0, 8008d16 <__smakebuf_r+0x46>
 8008d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d06:	059a      	lsls	r2, r3, #22
 8008d08:	d4ee      	bmi.n	8008ce8 <__smakebuf_r+0x18>
 8008d0a:	f023 0303 	bic.w	r3, r3, #3
 8008d0e:	f043 0302 	orr.w	r3, r3, #2
 8008d12:	81a3      	strh	r3, [r4, #12]
 8008d14:	e7e2      	b.n	8008cdc <__smakebuf_r+0xc>
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	6020      	str	r0, [r4, #0]
 8008d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d1e:	81a3      	strh	r3, [r4, #12]
 8008d20:	9b01      	ldr	r3, [sp, #4]
 8008d22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d26:	b15b      	cbz	r3, 8008d40 <__smakebuf_r+0x70>
 8008d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f000 f81d 	bl	8008d6c <_isatty_r>
 8008d32:	b128      	cbz	r0, 8008d40 <__smakebuf_r+0x70>
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	f023 0303 	bic.w	r3, r3, #3
 8008d3a:	f043 0301 	orr.w	r3, r3, #1
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	431d      	orrs	r5, r3
 8008d44:	81a5      	strh	r5, [r4, #12]
 8008d46:	e7cf      	b.n	8008ce8 <__smakebuf_r+0x18>

08008d48 <_fstat_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4d07      	ldr	r5, [pc, #28]	@ (8008d68 <_fstat_r+0x20>)
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	4611      	mov	r1, r2
 8008d54:	602b      	str	r3, [r5, #0]
 8008d56:	f7f8 fd39 	bl	80017cc <_fstat>
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	d102      	bne.n	8008d64 <_fstat_r+0x1c>
 8008d5e:	682b      	ldr	r3, [r5, #0]
 8008d60:	b103      	cbz	r3, 8008d64 <_fstat_r+0x1c>
 8008d62:	6023      	str	r3, [r4, #0]
 8008d64:	bd38      	pop	{r3, r4, r5, pc}
 8008d66:	bf00      	nop
 8008d68:	200043ec 	.word	0x200043ec

08008d6c <_isatty_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d06      	ldr	r5, [pc, #24]	@ (8008d88 <_isatty_r+0x1c>)
 8008d70:	2300      	movs	r3, #0
 8008d72:	4604      	mov	r4, r0
 8008d74:	4608      	mov	r0, r1
 8008d76:	602b      	str	r3, [r5, #0]
 8008d78:	f7f8 fd38 	bl	80017ec <_isatty>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d102      	bne.n	8008d86 <_isatty_r+0x1a>
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	b103      	cbz	r3, 8008d86 <_isatty_r+0x1a>
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	200043ec 	.word	0x200043ec

08008d8c <_init>:
 8008d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8e:	bf00      	nop
 8008d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d92:	bc08      	pop	{r3}
 8008d94:	469e      	mov	lr, r3
 8008d96:	4770      	bx	lr

08008d98 <_fini>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	bf00      	nop
 8008d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d9e:	bc08      	pop	{r3}
 8008da0:	469e      	mov	lr, r3
 8008da2:	4770      	bx	lr
